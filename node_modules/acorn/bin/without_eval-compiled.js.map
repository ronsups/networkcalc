{"version":3,"sources":["without_eval"],"names":[],"mappings":";;AAEA,IAAI,KAAK,QAAQ,IAAR,CAAT;;AAEA,IAAI,WAAW,GAAG,YAAH,CAAgB,QAAQ,OAAR,CAAgB,eAAhB,CAAhB,EAAkD,MAAlD,CAAf;AACA,IAAI,QAAQ,QAAQ,eAAR,CAAZ;AAAA,IAAsC,OAAO,QAAQ,cAAR,CAA7C;;AAEA,IAAI,MAAM,MAAM,KAAN,CAAY,QAAZ,CAAV;AACA,IAAI,WAAW,EAAf;AAAA,IAAmB,OAAO,EAA1B;;AAEA,IAAI,QAAJ;;AAEA,KAAK,MAAL,CAAY,GAAZ,EAAiB;AACf,uBAAqB,6BAAS,IAAT,EAAe;AAClC,QAAI,KAAK,EAAL,CAAQ,IAAR,IAAgB,eAApB,EAAqC;AACnC,iBAAW,IAAX;AACA,eAAS,IAAT,CAAc,EAAC,MAAM,2CAAP,EAAoD,MAAM,KAAK,KAA/D,EAAsE,IAAI,KAAK,GAA/E,EAAd;AACD;AACF,GANc;AAOf,oBAAkB,0BAAS,IAAT,EAAe;AAC/B,SAAK,UAAL,CAAgB,OAAhB,CAAwB,UAAS,IAAT,EAAe;AACrC,UAAI,KAAK,KAAL,CAAW,IAAX,IAAmB,gBAAnB,IACA,KAAK,KAAL,CAAW,MAAX,CAAkB,IAAlB,IAA0B,eAD9B,EAEE,KAAK,IAAL,CAAU,KAAK,KAAf;AACH,KAJD;AAKD;AAbc,CAAjB;;AAgBA,IAAI,UAAU,EAAd;AACA,IAAI,SAAS,SAAS,KAAT,CAAe,CAAf,EAAkB,SAAS,GAA3B,IAAkC,mCAAlC,GACT,8FADS,GAET,SAAS,KAAT,CAAe,SAAS,GAAxB,CAFJ,CAGE,IAAI,QAAJ,CAAa,YAAb,EAA2B,MAA3B,CAAD,CAAqC,OAArC;;AAED,KAAK,OAAL,CAAa,UAAU,IAAV,EAAgB,CAAhB,EAAmB;AAC9B,WAAS,IAAT,CAAc,EAAC,MAAM,QAAQ,CAAR,EAAW,QAAX,EAAP,EAA8B,MAAM,KAAK,KAAzC,EAAgD,IAAI,KAAK,GAAzD,EAAd;AACD,CAFD;;AAIA,IAAI,SAAS,EAAb;AAAA,IAAiB,MAAM,CAAvB;AACA,SAAS,IAAT,CAAc,UAAS,CAAT,EAAY,CAAZ,EAAe;AAAE,SAAO,EAAE,IAAF,GAAS,EAAE,IAAlB;AAAwB,CAAvD;AACA,SAAS,OAAT,CAAiB,UAAS,OAAT,EAAkB;AACjC,YAAU,SAAS,KAAT,CAAe,GAAf,EAAoB,QAAQ,IAA5B,CAAV;AACA,YAAU,QAAQ,IAAlB;AACA,QAAM,QAAQ,EAAd;AACD,CAJD;AAKA,UAAU,SAAS,KAAT,CAAe,GAAf,CAAV;;AAEA,QAAQ,MAAR,CAAe,KAAf,CAAqB,MAArB","file":"without_eval-compiled.js","sourcesContent":["#!/usr/bin/env node\n\nvar fs = require(\"fs\")\n\nvar acornSrc = fs.readFileSync(require.resolve(\"../dist/acorn\"), \"utf8\")\nvar acorn = require(\"../dist/acorn\"), walk = require(\"../dist/walk\")\n\nvar ast = acorn.parse(acornSrc)\nvar touchups = [], uses = []\n\nvar makePred\n\nwalk.simple(ast, {\n  FunctionDeclaration: function(node) {\n    if (node.id.name == \"makePredicate\") {\n      makePred = node\n      touchups.push({text: \"// Removed to create an eval-free library\", from: node.start, to: node.end})\n    }\n  },\n  ObjectExpression: function(node) {\n    node.properties.forEach(function(prop) {\n      if (prop.value.type == \"CallExpression\" &&\n          prop.value.callee.name == \"makePredicate\")\n        uses.push(prop.value)\n    })\n  }\n})\n\nvar results = []\nvar dryRun = acornSrc.slice(0, makePred.end) + \"; makePredicate = (function(mp) {\" +\n    \"return function(words) { var r = mp(words); predicates.push(r); return r }})(makePredicate);\" +\n    acornSrc.slice(makePred.end)\n;(new Function(\"predicates\", dryRun))(results)\n\nuses.forEach(function (node, i) {\n  touchups.push({text: results[i].toString(), from: node.start, to: node.end})\n})\n\nvar result = \"\", pos = 0\ntouchups.sort(function(a, b) { return a.from - b.from })\ntouchups.forEach(function(touchup) {\n  result += acornSrc.slice(pos, touchup.from)\n  result += touchup.text\n  pos = touchup.to\n})\nresult += acornSrc.slice(pos)\n\nprocess.stdout.write(result)\n"]}