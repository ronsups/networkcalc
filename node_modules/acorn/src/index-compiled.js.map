{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAqBA;;;;;kBAOQ,M;;;;;;kBAAQ,O;;;;AANhB;;;;;oBAOQ,c;;;;;;;;;qBACA,c;;;;;;qBACA,W;;;;;;;;;iBACA,I;;;;;;;;;sBACA,S;;;;;;sBAAW,K;;;;;;;;;yBACX,U;;;;;;yBAAY,K;;;;;;;;;uBACZ,gB;;;;;;uBAAkB,iB;;;;;;;;;qBAClB,K;;;;;;;;;uBACA,S;;;;;;uBAAW,S;;;;;;uBAAW,U;;;QAWd,K,GAAA,K;QAWA,iB,GAAA,iB;QASA,S,GAAA,S;;AA7ChB;;AACA;;AACA;;AACA;;AAaO,IAAM,4BAAU,OAAhB;;;;;;;;;AASA,SAAS,KAAT,CAAe,KAAf,EAAsB,OAAtB,EAA+B;AACpC,MAAI,IAAI,OAAO,OAAP,EAAgB,KAAhB,CAAR;AACA,MAAI,WAAW,EAAE,GAAjB;AAAA,MAAsB,WAAW,EAAE,OAAF,CAAU,SAAV,IAAuB,EAAE,WAAF,EAAxD;AACA,IAAE,SAAF;AACA,SAAO,EAAE,aAAF,CAAgB,EAAE,OAAF,CAAU,OAAV,IAAqB,EAAE,WAAF,CAAc,QAAd,EAAwB,QAAxB,CAArC,CAAP;AACD;;;;;;AAMM,SAAS,iBAAT,CAA2B,KAA3B,EAAkC,GAAlC,EAAuC,OAAvC,EAAgD;AACrD,MAAI,IAAI,OAAO,OAAP,EAAgB,KAAhB,EAAuB,GAAvB,CAAR;AACA,IAAE,SAAF;AACA,SAAO,EAAE,eAAF,EAAP;AACD;;;;;AAKM,SAAS,SAAT,CAAmB,KAAnB,EAA0B,OAA1B,EAAmC;AACxC,SAAO,OAAO,OAAP,EAAgB,KAAhB,CAAP;AACD;;AAED,SAAS,MAAT,CAAgB,OAAhB,EAAyB,KAAzB,EAAgC;AAC9B,SAAO,kBAAW,yBAAW,OAAX,CAAX,EAAgC,OAAO,KAAP,CAAhC,CAAP;AACD","file":"index-compiled.js","sourcesContent":["// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/marijnh/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/marijnh/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\nimport {Parser} from \"./state\"\nimport {getOptions} from \"./options\"\nimport \"./parseutil\"\nimport \"./statement\"\nimport \"./lval\"\nimport \"./expression\"\n\nexport {Parser, plugins} from \"./state\"\nexport {defaultOptions} from \"./options\"\nexport {SourceLocation} from \"./location\"\nexport {getLineInfo} from \"./location\"\nexport {Node} from \"./node\"\nexport {TokenType, types as tokTypes} from \"./tokentype\"\nexport {TokContext, types as tokContexts} from \"./tokencontext\"\nexport {isIdentifierChar, isIdentifierStart} from \"./identifier\"\nexport {Token} from \"./tokenize\"\nexport {isNewLine, lineBreak, lineBreakG} from \"./whitespace\"\n\nexport const version = \"1.2.2\"\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nexport function parse(input, options) {\n  let p = parser(options, input)\n  let startPos = p.pos, startLoc = p.options.locations && p.curPosition()\n  p.nextToken()\n  return p.parseTopLevel(p.options.program || p.startNodeAt(startPos, startLoc))\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nexport function parseExpressionAt(input, pos, options) {\n  let p = parser(options, input, pos)\n  p.nextToken()\n  return p.parseExpression()\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenize` export provides an interface to the tokenizer.\n\nexport function tokenizer(input, options) {\n  return parser(options, input)\n}\n\nfunction parser(options, input) {\n  return new Parser(getOptions(options), String(input))\n}\n"]}