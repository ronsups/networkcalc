{"version":3,"sources":["expression.js"],"names":[],"mappings":"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","file":"expression-compiled.js","sourcesContent":["import {LooseParser} from \"./state\"\nimport {isDummy} from \"./parseutil\"\nimport {tokTypes as tt} from \"..\"\n\nconst lp = LooseParser.prototype\n\nlp.checkLVal = function(expr, binding) {\n  if (!expr) return expr\n  switch (expr.type) {\n  case \"Identifier\":\n    return expr\n\n  case \"MemberExpression\":\n    return binding ? this.dummyIdent() : expr\n\n  case \"ParenthesizedExpression\":\n    expr.expression = this.checkLVal(expr.expression, binding)\n    return expr\n\n  // FIXME recursively check contents\n  case \"ObjectPattern\":\n  case \"ArrayPattern\":\n  case \"RestElement\":\n  case \"AssignmentPattern\":\n    if (this.options.ecmaVersion >= 6) return expr\n\n  default:\n    return this.dummyIdent()\n  }\n}\n\nlp.parseExpression = function(noIn) {\n  let start = this.storeCurrentPos()\n  let expr = this.parseMaybeAssign(noIn)\n  if (this.tok.type === tt.comma) {\n    let node = this.startNodeAt(start)\n    node.expressions = [expr]\n    while (this.eat(tt.comma)) node.expressions.push(this.parseMaybeAssign(noIn))\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n}\n\nlp.parseParenExpression = function() {\n  this.pushCx()\n  this.expect(tt.parenL)\n  let val = this.parseExpression()\n  this.popCx()\n  this.expect(tt.parenR)\n  return val\n}\n\nlp.parseMaybeAssign = function(noIn) {\n  let start = this.storeCurrentPos()\n  let left = this.parseMaybeConditional(noIn)\n  if (this.tok.type.isAssign) {\n    let node = this.startNodeAt(start)\n    node.operator = this.tok.value\n    node.left = this.tok.type === tt.eq ? this.toAssignable(left) : this.checkLVal(left)\n    this.next()\n    node.right = this.parseMaybeAssign(noIn)\n    return this.finishNode(node, \"AssignmentExpression\")\n  }\n  return left\n}\n\nlp.parseMaybeConditional = function(noIn) {\n  let start = this.storeCurrentPos()\n  let expr = this.parseExprOps(noIn)\n  if (this.eat(tt.question)) {\n    let node = this.startNodeAt(start)\n    node.test = expr\n    node.consequent = this.parseMaybeAssign()\n    node.alternate = this.expect(tt.colon) ? this.parseMaybeAssign(noIn) : this.dummyIdent()\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n}\n\nlp.parseExprOps = function(noIn) {\n  let start = this.storeCurrentPos()\n  let indent = this.curIndent, line = this.curLineStart\n  return this.parseExprOp(this.parseMaybeUnary(noIn), start, -1, noIn, indent, line)\n}\n\nlp.parseExprOp = function(left, start, minPrec, noIn, indent, line) {\n  if (this.curLineStart != line && this.curIndent < indent && this.tokenStartsLine()) return left\n  let prec = this.tok.type.binop\n  if (prec != null && (!noIn || this.tok.type !== tt._in)) {\n    if (prec > minPrec) {\n      let node = this.startNodeAt(start)\n      node.left = left\n      node.operator = this.tok.value\n      this.next()\n      if (this.curLineStart != line && this.curIndent < indent && this.tokenStartsLine()) {\n        node.right = this.dummyIdent()\n      } else {\n        let rightStart = this.storeCurrentPos()\n        node.right = this.parseExprOp(this.parseMaybeUnary(noIn), rightStart, prec, noIn, indent, line)\n      }\n      this.finishNode(node, /&&|\\|\\|/.test(node.operator) ? \"LogicalExpression\" : \"BinaryExpression\")\n      return this.parseExprOp(node, start, minPrec, noIn, indent, line)\n    }\n  }\n  return left\n}\n\nlp.parseMaybeUnary = function(noIn) {\n  if (this.tok.type.prefix) {\n    let node = this.startNode(), update = this.tok.type === tt.incDec\n    node.operator = this.tok.value\n    node.prefix = true\n    this.next()\n    node.argument = this.parseMaybeUnary(noIn)\n    if (update) node.argument = this.checkLVal(node.argument)\n    return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\")\n  } else if (this.tok.type === tt.ellipsis) {\n    let node = this.startNode()\n    this.next()\n    node.argument = this.parseMaybeUnary(noIn)\n    return this.finishNode(node, \"SpreadElement\")\n  }\n  let start = this.storeCurrentPos()\n  let expr = this.parseExprSubscripts()\n  while (this.tok.type.postfix && !this.canInsertSemicolon()) {\n    let node = this.startNodeAt(start)\n    node.operator = this.tok.value\n    node.prefix = false\n    node.argument = this.checkLVal(expr)\n    this.next()\n    expr = this.finishNode(node, \"UpdateExpression\")\n  }\n  return expr\n}\n\nlp.parseExprSubscripts = function() {\n  let start = this.storeCurrentPos()\n  return this.parseSubscripts(this.parseExprAtom(), start, false, this.curIndent, this.curLineStart)\n}\n\nlp.parseSubscripts = function(base, start, noCalls, startIndent, line) {\n  for (;;) {\n    if (this.curLineStart != line && this.curIndent <= startIndent && this.tokenStartsLine()) {\n      if (this.tok.type == tt.dot && this.curIndent == startIndent)\n        --startIndent\n      else\n        return base\n    }\n\n    if (this.eat(tt.dot)) {\n      let node = this.startNodeAt(start)\n      node.object = base\n      if (this.curLineStart != line && this.curIndent <= startIndent && this.tokenStartsLine())\n        node.property = this.dummyIdent()\n      else\n        node.property = this.parsePropertyAccessor() || this.dummyIdent()\n      node.computed = false\n      base = this.finishNode(node, \"MemberExpression\")\n    } else if (this.tok.type == tt.bracketL) {\n      this.pushCx()\n      this.next()\n      let node = this.startNodeAt(start)\n      node.object = base\n      node.property = this.parseExpression()\n      node.computed = true\n      this.popCx()\n      this.expect(tt.bracketR)\n      base = this.finishNode(node, \"MemberExpression\")\n    } else if (!noCalls && this.tok.type == tt.parenL) {\n      let node = this.startNodeAt(start)\n      node.callee = base\n      node.arguments = this.parseExprList(tt.parenR)\n      base = this.finishNode(node, \"CallExpression\")\n    } else if (this.tok.type == tt.backQuote) {\n      let node = this.startNodeAt(start)\n      node.tag = base\n      node.quasi = this.parseTemplate()\n      base = this.finishNode(node, \"TaggedTemplateExpression\")\n    } else {\n      return base\n    }\n  }\n}\n\nlp.parseExprAtom = function() {\n  let node\n  switch (this.tok.type) {\n  case tt._this:\n  case tt._super:\n    let type = this.tok.type === tt._this ? \"ThisExpression\" : \"Super\"\n    node = this.startNode()\n    this.next()\n    return this.finishNode(node, type)\n\n  case tt.name:\n    let start = this.storeCurrentPos()\n    let id = this.parseIdent()\n    return this.eat(tt.arrow) ? this.parseArrowExpression(this.startNodeAt(start), [id]) : id\n\n  case tt.regexp:\n    node = this.startNode()\n    let val = this.tok.value\n    node.regex = {pattern: val.pattern, flags: val.flags}\n    node.value = val.value\n    node.raw = this.input.slice(this.tok.start, this.tok.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tt.num: case tt.string:\n    node = this.startNode()\n    node.value = this.tok.value\n    node.raw = this.input.slice(this.tok.start, this.tok.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tt._null: case tt._true: case tt._false:\n    node = this.startNode()\n    node.value = this.tok.type === tt._null ? null : this.tok.type === tt._true\n    node.raw = this.tok.type.keyword\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tt.parenL:\n    let parenStart = this.storeCurrentPos()\n    this.next()\n    let inner = this.parseExpression()\n    this.expect(tt.parenR)\n    if (this.eat(tt.arrow)) {\n      return this.parseArrowExpression(this.startNodeAt(parenStart), inner.expressions || (isDummy(inner) ? [] : [inner]))\n    }\n    if (this.options.preserveParens) {\n      let par = this.startNodeAt(parenStart)\n      par.expression = inner\n      inner = this.finishNode(par, \"ParenthesizedExpression\")\n    }\n    return inner\n\n  case tt.bracketL:\n    node = this.startNode()\n    node.elements = this.parseExprList(tt.bracketR, true)\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case tt.braceL:\n    return this.parseObj()\n\n  case tt._class:\n    return this.parseClass()\n\n  case tt._function:\n    node = this.startNode()\n    this.next()\n    return this.parseFunction(node, false)\n\n  case tt._new:\n    return this.parseNew()\n\n  case tt._yield:\n    node = this.startNode()\n    this.next()\n    if (this.semicolon() || this.canInsertSemicolon() || (this.tok.type != tt.star && !this.tok.type.startsExpr)) {\n      node.delegate = false\n      node.argument = null\n    } else {\n      node.delegate = this.eat(tt.star)\n      node.argument = this.parseMaybeAssign()\n    }\n    return this.finishNode(node, \"YieldExpression\")\n\n  case tt.backQuote:\n    return this.parseTemplate()\n\n  default:\n    return this.dummyIdent()\n  }\n}\n\nlp.parseNew = function() {\n  let node = this.startNode(), startIndent = this.curIndent, line = this.curLineStart\n  let meta = this.parseIdent(true)\n  if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {\n    node.meta = meta\n    node.property = this.parseIdent(true)\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  let start = this.storeCurrentPos()\n  node.callee = this.parseSubscripts(this.parseExprAtom(), start, true, startIndent, line)\n  if (this.tok.type == tt.parenL) {\n    node.arguments = this.parseExprList(tt.parenR)\n  } else {\n    node.arguments = []\n  }\n  return this.finishNode(node, \"NewExpression\")\n}\n\nlp.parseTemplateElement = function() {\n  let elem = this.startNode()\n  elem.value = {\n    raw: this.input.slice(this.tok.start, this.tok.end),\n    cooked: this.tok.value\n  }\n  this.next()\n  elem.tail = this.tok.type === tt.backQuote\n  return this.finishNode(elem, \"TemplateElement\")\n}\n\nlp.parseTemplate = function() {\n  let node = this.startNode()\n  this.next()\n  node.expressions = []\n  let curElt = this.parseTemplateElement()\n  node.quasis = [curElt]\n  while (!curElt.tail) {\n    this.next()\n    node.expressions.push(this.parseExpression())\n    if (this.expect(tt.braceR)) {\n      curElt = this.parseTemplateElement()\n    } else {\n      curElt = this.startNode()\n      curElt.value = {cooked: '', raw: ''}\n      curElt.tail = true\n    }\n    node.quasis.push(curElt)\n  }\n  this.expect(tt.backQuote)\n  return this.finishNode(node, \"TemplateLiteral\")\n}\n\nlp.parseObj = function() {\n  let node = this.startNode()\n  node.properties = []\n  this.pushCx()\n  let indent = this.curIndent + 1, line = this.curLineStart\n  this.eat(tt.braceL)\n  if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart }\n  while (!this.closes(tt.braceR, indent, line)) {\n    let prop = this.startNode(), isGenerator, start\n    if (this.options.ecmaVersion >= 6) {\n      start = this.storeCurrentPos()\n      prop.method = false\n      prop.shorthand = false\n      isGenerator = this.eat(tt.star)\n    }\n    this.parsePropertyName(prop)\n    if (isDummy(prop.key)) { if (isDummy(this.parseMaybeAssign())) this.next(); this.eat(tt.comma); continue }\n    if (this.eat(tt.colon)) {\n      prop.kind = \"init\"\n      prop.value = this.parseMaybeAssign()\n    } else if (this.options.ecmaVersion >= 6 && (this.tok.type === tt.parenL || this.tok.type === tt.braceL)) {\n      prop.kind = \"init\"\n      prop.method = true\n      prop.value = this.parseMethod(isGenerator)\n    } else if (this.options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" &&\n               !prop.computed && (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.tok.type != tt.comma && this.tok.type != tt.braceR)) {\n      prop.kind = prop.key.name\n      this.parsePropertyName(prop)\n      prop.value = this.parseMethod(false)\n    } else {\n      prop.kind = \"init\"\n      if (this.options.ecmaVersion >= 6) {\n        if (this.eat(tt.eq)) {\n          let assign = this.startNodeAt(start)\n          assign.operator = \"=\"\n          assign.left = prop.key\n          assign.right = this.parseMaybeAssign()\n          prop.value = this.finishNode(assign, \"AssignmentExpression\")\n        } else {\n          prop.value = prop.key\n        }\n      } else {\n        prop.value = this.dummyIdent()\n      }\n      prop.shorthand = true\n    }\n    node.properties.push(this.finishNode(prop, \"Property\"))\n    this.eat(tt.comma)\n  }\n  this.popCx()\n  if (!this.eat(tt.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  return this.finishNode(node, \"ObjectExpression\")\n}\n\nlp.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(tt.bracketL)) {\n      prop.computed = true\n      prop.key = this.parseExpression()\n      this.expect(tt.bracketR)\n      return\n    } else {\n      prop.computed = false\n    }\n  }\n  let key = (this.tok.type === tt.num || this.tok.type === tt.string) ? this.parseExprAtom() : this.parseIdent()\n  prop.key = key || this.dummyIdent()\n}\n\nlp.parsePropertyAccessor = function() {\n  if (this.tok.type === tt.name || this.tok.type.keyword) return this.parseIdent()\n}\n\nlp.parseIdent = function() {\n  let name = this.tok.type === tt.name ? this.tok.value : this.tok.type.keyword\n  if (!name) return this.dummyIdent()\n  let node = this.startNode()\n  this.next()\n  node.name = name\n  return this.finishNode(node, \"Identifier\")\n}\n\nlp.initFunction = function(node) {\n  node.id = null\n  node.params = []\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false\n    node.expression = false\n  }\n}\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\nlp.toAssignable = function(node, binding) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\"\n      let props = node.properties\n      for (let i = 0; i < props.length; i++)\n        this.toAssignable(props[i].value, binding)\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\"\n      this.toAssignableList(node.elements, binding)\n      break\n\n    case \"SpreadElement\":\n      node.type = \"RestElement\"\n      node.argument = this.toAssignable(node.argument, binding)\n      break\n\n    case \"AssignmentExpression\":\n      node.type = \"AssignmentPattern\"\n      break\n    }\n  }\n  return this.checkLVal(node, binding)\n}\n\nlp.toAssignableList = function(exprList, binding) {\n  for (let i = 0; i < exprList.length; i++)\n    exprList[i] = this.toAssignable(exprList[i], binding)\n  return exprList\n}\n\nlp.parseFunctionParams = function(params) {\n  params = this.parseExprList(tt.parenR)\n  return this.toAssignableList(params, true)\n}\n\nlp.parseMethod = function(isGenerator) {\n  let node = this.startNode()\n  this.initFunction(node)\n  node.params = this.parseFunctionParams()\n  node.generator = isGenerator || false\n  node.expression = this.options.ecmaVersion >= 6 && this.tok.type !== tt.braceL\n  node.body = node.expression ? this.parseMaybeAssign() : this.parseBlock()\n  return this.finishNode(node, \"FunctionExpression\")\n}\n\nlp.parseArrowExpression = function(node, params) {\n  this.initFunction(node)\n  node.params = this.toAssignableList(params, true)\n  node.expression = this.tok.type !== tt.braceL\n  node.body = node.expression ? this.parseMaybeAssign() : this.parseBlock()\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n}\n\nlp.parseExprList = function(close, allowEmpty) {\n  this.pushCx()\n  let indent = this.curIndent, line = this.curLineStart, elts = []\n  this.next(); // Opening bracket\n  while (!this.closes(close, indent + 1, line)) {\n    if (this.eat(tt.comma)) {\n      elts.push(allowEmpty ? null : this.dummyIdent())\n      continue\n    }\n    let elt = this.parseMaybeAssign()\n    if (isDummy(elt)) {\n      if (this.closes(close, indent, line)) break\n      this.next()\n    } else {\n      elts.push(elt)\n    }\n    this.eat(tt.comma)\n  }\n  this.popCx()\n  if (!this.eat(close)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  return elts\n}\n"]}