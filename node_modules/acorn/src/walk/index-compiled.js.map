{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["// AST walker module for Mozilla Parser API compatible trees\n\n// A simple walk is one where you simply specify callbacks to be\n// called on specific nodes. The last two arguments are optional. A\n// simple use would be\n//\n//     walk.simple(myTree, {\n//         Expression: function(node) { ... }\n//     });\n//\n// to do something with all expressions. All Parser API node types\n// can be used to identify node types, as well as Expression,\n// Statement, and ScopeBody, which denote categories of nodes.\n//\n// The base argument can be used to pass a custom (recursive)\n// walker, and state can be used to give this walked an initial\n// state.\n\nexport function simple(node, visitors, base, state) {\n  if (!base) base = exports.base\n  ;(function c(node, st, override) {\n    let type = override || node.type, found = visitors[type]\n    base[type](node, st, c)\n    if (found) found(node, st)\n  })(node, state)\n}\n\n// An ancestor walk builds up an array of ancestor nodes (including\n// the current node) and passes them to the callback as the state parameter.\nexport function ancestor(node, visitors, base, state) {\n  if (!base) base = exports.base\n  if (!state) state = []\n  ;(function c(node, st, override) {\n    let type = override || node.type, found = visitors[type]\n    if (node != st[st.length - 1]) {\n      st = st.slice()\n      st.push(node)\n    }\n    base[type](node, st, c)\n    if (found) found(node, st)\n  })(node, state)\n}\n\n// A recursive walk is one where your functions override the default\n// walkers. They can modify and replace the state parameter that's\n// threaded through the walk, and can opt how and whether to walk\n// their child nodes (by calling their third argument on these\n// nodes).\nexport function recursive(node, state, funcs, base) {\n  let visitor = funcs ? exports.make(funcs, base) : base\n  ;(function c(node, st, override) {\n    visitor[override || node.type](node, st, c)\n  })(node, state)\n}\n\nfunction makeTest(test) {\n  if (typeof test == \"string\")\n    return type => type == test\n  else if (!test)\n    return () => true\n  else\n    return test\n}\n\nclass Found {\n  constructor(node, state) { this.node = node; this.state = state }\n}\n\n// Find a node with a given start, end, and type (all are optional,\n// null can be used as wildcard). Returns a {node, state} object, or\n// undefined when it doesn't find a matching node.\nexport function findNodeAt(node, start, end, test, base, state) {\n  test = makeTest(test)\n  if (!base) base = exports.base\n  try {\n    ;(function c(node, st, override) {\n      let type = override || node.type\n      if ((start == null || node.start <= start) &&\n          (end == null || node.end >= end))\n        base[type](node, st, c)\n      if (test(type, node) &&\n          (start == null || node.start == start) &&\n          (end == null || node.end == end))\n        throw new Found(node, st)\n    })(node, state)\n  } catch (e) {\n    if (e instanceof Found) return e\n    throw e\n  }\n}\n\n// Find the innermost node of a given type that contains the given\n// position. Interface similar to findNodeAt.\nexport function findNodeAround(node, pos, test, base, state) {\n  test = makeTest(test)\n  if (!base) base = exports.base\n  try {\n    ;(function c(node, st, override) {\n      let type = override || node.type\n      if (node.start > pos || node.end < pos) return\n      base[type](node, st, c)\n      if (test(type, node)) throw new Found(node, st)\n    })(node, state)\n  } catch (e) {\n    if (e instanceof Found) return e\n    throw e\n  }\n}\n\n// Find the outermost matching node after a given position.\nexport function findNodeAfter(node, pos, test, base, state) {\n  test = makeTest(test)\n  if (!base) base = exports.base\n  try {\n    ;(function c(node, st, override) {\n      if (node.end < pos) return\n      let type = override || node.type\n      if (node.start >= pos && test(type, node)) throw new Found(node, st)\n      base[type](node, st, c)\n    })(node, state)\n  } catch (e) {\n    if (e instanceof Found) return e\n    throw e\n  }\n}\n\n// Find the outermost matching node before a given position.\nexport function findNodeBefore(node, pos, test, base, state) {\n  test = makeTest(test)\n  if (!base) base = exports.base\n  let max\n  ;(function c(node, st, override) {\n    if (node.start > pos) return\n    let type = override || node.type\n    if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node))\n      max = new Found(node, st)\n    base[type](node, st, c)\n  })(node, state)\n  return max\n}\n\n// Used to create a custom walker. Will fill in all missing node\n// type properties with the defaults.\nexport function make(funcs, base) {\n  if (!base) base = exports.base\n  let visitor = {}\n  for (var type in base) visitor[type] = base[type]\n  for (var type in funcs) visitor[type] = funcs[type]\n  return visitor\n}\n\nfunction skipThrough(node, st, c) { c(node, st) }\nfunction ignore(_node, _st, _c) {}\n\n// Node walkers.\n\nexport const base = {}\n\nbase.Program = base.BlockStatement = (node, st, c) => {\n  for (let i = 0; i < node.body.length; ++i)\n    c(node.body[i], st, \"Statement\")\n}\nbase.Statement = skipThrough\nbase.EmptyStatement = ignore\nbase.ExpressionStatement = base.ParenthesizedExpression =\n  (node, st, c) => c(node.expression, st, \"Expression\")\nbase.IfStatement = (node, st, c) => {\n  c(node.test, st, \"Expression\")\n  c(node.consequent, st, \"Statement\")\n  if (node.alternate) c(node.alternate, st, \"Statement\")\n}\nbase.LabeledStatement = (node, st, c) => c(node.body, st, \"Statement\")\nbase.BreakStatement = base.ContinueStatement = ignore\nbase.WithStatement = (node, st, c) => {\n  c(node.object, st, \"Expression\")\n  c(node.body, st, \"Statement\")\n}\nbase.SwitchStatement = (node, st, c) => {\n  c(node.discriminant, st, \"Expression\")\n  for (let i = 0; i < node.cases.length; ++i) {\n    let cs = node.cases[i]\n    if (cs.test) c(cs.test, st, \"Expression\")\n    for (let j = 0; j < cs.consequent.length; ++j)\n      c(cs.consequent[j], st, \"Statement\")\n  }\n}\nbase.ReturnStatement = base.YieldExpression = (node, st, c) => {\n  if (node.argument) c(node.argument, st, \"Expression\")\n}\nbase.ThrowStatement = base.SpreadElement = base.RestElement =\n  (node, st, c) => c(node.argument, st, \"Expression\")\nbase.TryStatement = (node, st, c) => {\n  c(node.block, st, \"Statement\")\n  if (node.handler) c(node.handler.body, st, \"ScopeBody\")\n  if (node.finalizer) c(node.finalizer, st, \"Statement\")\n}\nbase.WhileStatement = base.DoWhileStatement = (node, st, c) => {\n  c(node.test, st, \"Expression\")\n  c(node.body, st, \"Statement\")\n}\nbase.ForStatement = (node, st, c) => {\n  if (node.init) c(node.init, st, \"ForInit\")\n  if (node.test) c(node.test, st, \"Expression\")\n  if (node.update) c(node.update, st, \"Expression\")\n  c(node.body, st, \"Statement\")\n}\nbase.ForInStatement = base.ForOfStatement = (node, st, c) => {\n  c(node.left, st, \"ForInit\")\n  c(node.right, st, \"Expression\")\n  c(node.body, st, \"Statement\")\n}\nbase.ForInit = (node, st, c) => {\n  if (node.type == \"VariableDeclaration\") c(node, st)\n  else c(node, st, \"Expression\")\n}\nbase.DebuggerStatement = ignore\n\nbase.FunctionDeclaration = (node, st, c) => c(node, st, \"Function\")\nbase.VariableDeclaration = (node, st, c) => {\n  for (let i = 0; i < node.declarations.length; ++i) {\n    let decl = node.declarations[i]\n    if (decl.init) c(decl.init, st, \"Expression\")\n  }\n}\n\nbase.Function = (node, st, c) => c(node.body, st, \"ScopeBody\")\nbase.ScopeBody = (node, st, c) => c(node, st, \"Statement\")\n\nbase.Expression = skipThrough\nbase.ThisExpression = base.Super = base.MetaProperty = ignore\nbase.ArrayExpression = base.ArrayPattern =  (node, st, c) => {\n  for (let i = 0; i < node.elements.length; ++i) {\n    let elt = node.elements[i]\n    if (elt) c(elt, st, \"Expression\")\n  }\n}\nbase.ObjectExpression = base.ObjectPattern = (node, st, c) => {\n  for (let i = 0; i < node.properties.length; ++i)\n    c(node.properties[i], st)\n}\nbase.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration\nbase.SequenceExpression = base.TemplateLiteral = (node, st, c) => {\n  for (let i = 0; i < node.expressions.length; ++i)\n    c(node.expressions[i], st, \"Expression\")\n}\nbase.UnaryExpression = base.UpdateExpression = (node, st, c) => {\n  c(node.argument, st, \"Expression\")\n}\nbase.BinaryExpression = base.AssignmentExpression = base.AssignmentPattern = base.LogicalExpression = (node, st, c) => {\n  c(node.left, st, \"Expression\")\n  c(node.right, st, \"Expression\")\n}\nbase.ConditionalExpression = (node, st, c) => {\n  c(node.test, st, \"Expression\")\n  c(node.consequent, st, \"Expression\")\n  c(node.alternate, st, \"Expression\")\n}\nbase.NewExpression = base.CallExpression = (node, st, c) => {\n  c(node.callee, st, \"Expression\")\n  if (node.arguments) for (let i = 0; i < node.arguments.length; ++i)\n    c(node.arguments[i], st, \"Expression\")\n}\nbase.MemberExpression = (node, st, c) => {\n  c(node.object, st, \"Expression\")\n  if (node.computed) c(node.property, st, \"Expression\")\n}\nbase.ExportNamedDeclaration = base.ExportDefaultDeclaration = (node, st, c) => c(node.declaration, st)\nbase.ImportDeclaration = (node, st, c) => {\n  for (let i = 0; i < node.specifiers.length; i++)\n    c(node.specifiers[i], st)\n}\nbase.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = ignore\n\nbase.TaggedTemplateExpression = (node, st, c) => {\n  c(node.tag, st, \"Expression\")\n  c(node.quasi, st)\n}\nbase.ClassDeclaration = base.ClassExpression = (node, st, c) => {\n  if (node.superClass) c(node.superClass, st, \"Expression\")\n  for (let i = 0; i < node.body.body.length; i++)\n    c(node.body.body[i], st)\n}\nbase.MethodDefinition = base.Property = (node, st, c) => {\n  if (node.computed) c(node.key, st, \"Expression\")\n  c(node.value, st, \"Expression\")\n}\nbase.ComprehensionExpression = (node, st, c) => {\n  for (let i = 0; i < node.blocks.length; i++)\n    c(node.blocks[i].right, st, \"Expression\")\n  c(node.body, st, \"Expression\")\n}\n"]}