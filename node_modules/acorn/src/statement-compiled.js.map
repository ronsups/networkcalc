{"version":3,"sources":["statement.js"],"names":[],"mappings":"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","file":"statement-compiled.js","sourcesContent":["import {types as tt} from \"./tokentype\"\nimport {Parser} from \"./state\"\nimport {lineBreak} from \"./whitespace\"\n\nconst pp = Parser.prototype\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp.parseTopLevel = function(node) {\n  let first = true\n  if (!node.body) node.body = []\n  while (this.type !== tt.eof) {\n    let stmt = this.parseStatement(true, true)\n    node.body.push(stmt)\n    if (first && this.isUseStrict(stmt)) this.setStrict(true)\n    first = false\n  }\n  this.next()\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType\n  }\n  return this.finishNode(node, \"Program\")\n}\n\nconst loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"}\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp.parseStatement = function(declaration, topLevel) {\n  let starttype = this.type, node = this.startNode()\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case tt._break: case tt._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case tt._debugger: return this.parseDebuggerStatement(node)\n  case tt._do: return this.parseDoStatement(node)\n  case tt._for: return this.parseForStatement(node)\n  case tt._function:\n    if (!declaration && this.options.ecmaVersion >= 6) this.unexpected()\n    return this.parseFunctionStatement(node)\n  case tt._class:\n    if (!declaration) this.unexpected()\n    return this.parseClass(node, true)\n  case tt._if: return this.parseIfStatement(node)\n  case tt._return: return this.parseReturnStatement(node)\n  case tt._switch: return this.parseSwitchStatement(node)\n  case tt._throw: return this.parseThrowStatement(node)\n  case tt._try: return this.parseTryStatement(node)\n  case tt._let: case tt._const: if (!declaration) this.unexpected() // NOTE: falls through to _var\n  case tt._var: return this.parseVarStatement(node, starttype)\n  case tt._while: return this.parseWhileStatement(node)\n  case tt._with: return this.parseWithStatement(node)\n  case tt.braceL: return this.parseBlock()\n  case tt.semi: return this.parseEmptyStatement(node)\n  case tt._export:\n  case tt._import:\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        this.raise(this.start, \"'import' and 'export' may only appear at the top level\")\n      if (!this.inModule)\n        this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\")\n    }\n    return starttype === tt._import ? this.parseImport(node) : this.parseExport(node)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    let maybeName = this.value, expr = this.parseExpression()\n    if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon))\n      return this.parseLabeledStatement(node, maybeName, expr)\n    else return this.parseExpressionStatement(node, expr)\n  }\n}\n\npp.parseBreakContinueStatement = function(node, keyword) {\n  let isBreak = keyword == \"break\"\n  this.next()\n  if (this.eat(tt.semi) || this.insertSemicolon()) node.label = null\n  else if (this.type !== tt.name) this.unexpected()\n  else {\n    node.label = this.parseIdent()\n    this.semicolon()\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  for (var i = 0; i < this.labels.length; ++i) {\n    let lab = this.labels[i]\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break\n      if (node.label && isBreak) break\n    }\n  }\n  if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword)\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n}\n\npp.parseDebuggerStatement = function(node) {\n  this.next()\n  this.semicolon()\n  return this.finishNode(node, \"DebuggerStatement\")\n}\n\npp.parseDoStatement = function(node) {\n  this.next()\n  this.labels.push(loopLabel)\n  node.body = this.parseStatement(false)\n  this.labels.pop()\n  this.expect(tt._while)\n  node.test = this.parseParenExpression()\n  if (this.options.ecmaVersion >= 6)\n    this.eat(tt.semi)\n  else\n    this.semicolon()\n  return this.finishNode(node, \"DoWhileStatement\")\n}\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp.parseForStatement = function(node) {\n  this.next()\n  this.labels.push(loopLabel)\n  this.expect(tt.parenL)\n  if (this.type === tt.semi) return this.parseFor(node, null)\n  if (this.type === tt._var || this.type === tt._let || this.type === tt._const) {\n    let init = this.startNode(), varKind = this.type\n    this.next()\n    this.parseVar(init, true, varKind)\n    this.finishNode(init, \"VariableDeclaration\")\n    if ((this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init.declarations.length === 1 &&\n        !(varKind !== tt._var && init.declarations[0].init))\n      return this.parseForIn(node, init)\n    return this.parseFor(node, init)\n  }\n  let refShorthandDefaultPos = {start: 0}\n  let init = this.parseExpression(true, refShorthandDefaultPos)\n  if (this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    this.toAssignable(init)\n    this.checkLVal(init)\n    return this.parseForIn(node, init)\n  } else if (refShorthandDefaultPos.start) {\n    this.unexpected(refShorthandDefaultPos.start)\n  }\n  return this.parseFor(node, init)\n}\n\npp.parseFunctionStatement = function(node) {\n  this.next()\n  return this.parseFunction(node, true)\n}\n\npp.parseIfStatement = function(node) {\n  this.next()\n  node.test = this.parseParenExpression()\n  node.consequent = this.parseStatement(false)\n  node.alternate = this.eat(tt._else) ? this.parseStatement(false) : null\n  return this.finishNode(node, \"IfStatement\")\n}\n\npp.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    this.raise(this.start, \"'return' outside of function\")\n  this.next()\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(tt.semi) || this.insertSemicolon()) node.argument = null\n  else { node.argument = this.parseExpression(); this.semicolon() }\n  return this.finishNode(node, \"ReturnStatement\")\n}\n\npp.parseSwitchStatement = function(node) {\n  this.next()\n  node.discriminant = this.parseParenExpression()\n  node.cases = []\n  this.expect(tt.braceL)\n  this.labels.push(switchLabel)\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  for (var cur, sawDefault; this.type != tt.braceR;) {\n    if (this.type === tt._case || this.type === tt._default) {\n      let isCase = this.type === tt._case\n      if (cur) this.finishNode(cur, \"SwitchCase\")\n      node.cases.push(cur = this.startNode())\n      cur.consequent = []\n      this.next()\n      if (isCase) {\n        cur.test = this.parseExpression()\n      } else {\n        if (sawDefault) this.raise(this.lastTokStart, \"Multiple default clauses\")\n        sawDefault = true\n        cur.test = null\n      }\n      this.expect(tt.colon)\n    } else {\n      if (!cur) this.unexpected()\n      cur.consequent.push(this.parseStatement(true))\n    }\n  }\n  if (cur) this.finishNode(cur, \"SwitchCase\")\n  this.next() // Closing brace\n  this.labels.pop()\n  return this.finishNode(node, \"SwitchStatement\")\n}\n\npp.parseThrowStatement = function(node) {\n  this.next()\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    this.raise(this.lastTokEnd, \"Illegal newline after throw\")\n  node.argument = this.parseExpression()\n  this.semicolon()\n  return this.finishNode(node, \"ThrowStatement\")\n}\n\n// Reused empty array added for node fields that are always empty.\n\nconst empty = []\n\npp.parseTryStatement = function(node) {\n  this.next()\n  node.block = this.parseBlock()\n  node.handler = null\n  if (this.type === tt._catch) {\n    let clause = this.startNode()\n    this.next()\n    this.expect(tt.parenL)\n    clause.param = this.parseBindingAtom()\n    this.checkLVal(clause.param, true)\n    this.expect(tt.parenR)\n    clause.guard = null\n    clause.body = this.parseBlock()\n    node.handler = this.finishNode(clause, \"CatchClause\")\n  }\n  node.guardedHandlers = empty\n  node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null\n  if (!node.handler && !node.finalizer)\n    this.raise(node.start, \"Missing catch or finally clause\")\n  return this.finishNode(node, \"TryStatement\")\n}\n\npp.parseVarStatement = function(node, kind) {\n  this.next()\n  this.parseVar(node, false, kind)\n  this.semicolon()\n  return this.finishNode(node, \"VariableDeclaration\")\n}\n\npp.parseWhileStatement = function(node) {\n  this.next()\n  node.test = this.parseParenExpression()\n  this.labels.push(loopLabel)\n  node.body = this.parseStatement(false)\n  this.labels.pop()\n  return this.finishNode(node, \"WhileStatement\")\n}\n\npp.parseWithStatement = function(node) {\n  if (this.strict) this.raise(this.start, \"'with' in strict mode\")\n  this.next()\n  node.object = this.parseParenExpression()\n  node.body = this.parseStatement(false)\n  return this.finishNode(node, \"WithStatement\")\n}\n\npp.parseEmptyStatement = function(node) {\n  this.next()\n  return this.finishNode(node, \"EmptyStatement\")\n}\n\npp.parseLabeledStatement = function(node, maybeName, expr) {\n  for (let i = 0; i < this.labels.length; ++i)\n    if (this.labels[i].name === maybeName) this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\")\n  let kind = this.type.isLoop ? \"loop\" : this.type === tt._switch ? \"switch\" : null\n  this.labels.push({name: maybeName, kind: kind})\n  node.body = this.parseStatement(true)\n  this.labels.pop()\n  node.label = expr\n  return this.finishNode(node, \"LabeledStatement\")\n}\n\npp.parseExpressionStatement = function(node, expr) {\n  node.expression = expr\n  this.semicolon()\n  return this.finishNode(node, \"ExpressionStatement\")\n}\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp.parseBlock = function(allowStrict) {\n  let node = this.startNode(), first = true, oldStrict\n  node.body = []\n  this.expect(tt.braceL)\n  while (!this.eat(tt.braceR)) {\n    let stmt = this.parseStatement(true)\n    node.body.push(stmt)\n    if (first && allowStrict && this.isUseStrict(stmt)) {\n      oldStrict = this.strict\n      this.setStrict(this.strict = true)\n    }\n    first = false\n  }\n  if (oldStrict === false) this.setStrict(false)\n  return this.finishNode(node, \"BlockStatement\")\n}\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp.parseFor = function(node, init) {\n  node.init = init\n  this.expect(tt.semi)\n  node.test = this.type === tt.semi ? null : this.parseExpression()\n  this.expect(tt.semi)\n  node.update = this.type === tt.parenR ? null : this.parseExpression()\n  this.expect(tt.parenR)\n  node.body = this.parseStatement(false)\n  this.labels.pop()\n  return this.finishNode(node, \"ForStatement\")\n}\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp.parseForIn = function(node, init) {\n  let type = this.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\"\n  this.next()\n  node.left = init\n  node.right = this.parseExpression()\n  this.expect(tt.parenR)\n  node.body = this.parseStatement(false)\n  this.labels.pop()\n  return this.finishNode(node, type)\n}\n\n// Parse a list of variable declarations.\n\npp.parseVar = function(node, isFor, kind) {\n  node.declarations = []\n  node.kind = kind.keyword\n  for (;;) {\n    let decl = this.startNode()\n    this.parseVarId(decl)\n    if (this.eat(tt.eq)) {\n      decl.init = this.parseMaybeAssign(isFor)\n    } else if (kind === tt._const && !(this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\n      this.unexpected()\n    } else if (decl.id.type != \"Identifier\" && !(isFor && (this.type === tt._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\")\n    } else {\n      decl.init = null\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"))\n    if (!this.eat(tt.comma)) break\n  }\n  return node\n}\n\npp.parseVarId = function(decl) {\n  decl.id = this.parseBindingAtom()\n  this.checkLVal(decl.id, true)\n}\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseFunction = function(node, isStatement, allowExpressionBody) {\n  this.initFunction(node)\n  if (this.options.ecmaVersion >= 6)\n    node.generator = this.eat(tt.star)\n  if (isStatement || this.type === tt.name)\n    node.id = this.parseIdent()\n  this.parseFunctionParams(node)\n  this.parseFunctionBody(node, allowExpressionBody)\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n}\n\npp.parseFunctionParams = function(node) {\n  this.expect(tt.parenL)\n  node.params = this.parseBindingList(tt.parenR, false, false)\n}\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseClass = function(node, isStatement) {\n  this.next()\n  this.parseClassId(node, isStatement)\n  this.parseClassSuper(node)\n  let classBody = this.startNode()\n  let hadConstructor = false\n  classBody.body = []\n  this.expect(tt.braceL)\n  while (!this.eat(tt.braceR)) {\n    if (this.eat(tt.semi)) continue\n    let method = this.startNode()\n    let isGenerator = this.eat(tt.star)\n    let isMaybeStatic = this.type === tt.name && this.value === \"static\"\n    this.parsePropertyName(method)\n    method.static = isMaybeStatic && this.type !== tt.parenL\n    if (method.static) {\n      if (isGenerator) this.unexpected()\n      isGenerator = this.eat(tt.star)\n      this.parsePropertyName(method)\n    }\n    method.kind = \"method\"\n    if (!method.computed) {\n      let {key} = method\n      let isGetSet = false\n      if (!isGenerator && key.type === \"Identifier\" && this.type !== tt.parenL && (key.name === \"get\" || key.name === \"set\")) {\n        isGetSet = true\n        method.kind = key.name\n        key = this.parsePropertyName(method)\n      }\n      if (!method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n          key.type === \"Literal\" && key.value === \"constructor\")) {\n        if (hadConstructor) this.raise(key.start, \"Duplicate constructor in the same class\")\n        if (isGetSet) this.raise(key.start, \"Constructor can't have get/set modifier\")\n        if (isGenerator) this.raise(key.start, \"Constructor can't be a generator\")\n        method.kind = \"constructor\"\n        hadConstructor = true\n      }\n    }\n    this.parseClassMethod(classBody, method, isGenerator)\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\")\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n}\n\npp.parseClassMethod = function(classBody, method, isGenerator) {\n  method.value = this.parseMethod(isGenerator)\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"))\n}\n\npp.parseClassId = function(node, isStatement) {\n  node.id = this.type === tt.name ? this.parseIdent() : isStatement ? this.unexpected() : null\n}\n\npp.parseClassSuper = function(node) {\n  node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null\n}\n\n// Parses module export declaration.\n\npp.parseExport = function(node) {\n  this.next()\n  // export * from '...'\n  if (this.eat(tt.star)) {\n    this.expectContextual(\"from\")\n    node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n    this.semicolon()\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(tt._default)) { // export default ...\n    let expr = this.parseMaybeAssign()\n    let needsSemi = true\n    if (expr.type == \"FunctionExpression\" ||\n        expr.type == \"ClassExpression\") {\n      needsSemi = false\n      if (expr.id) {\n        expr.type = expr.type == \"FunctionExpression\"\n          ? \"FunctionDeclaration\"\n          : \"ClassDeclaration\"\n      }\n    }\n    node.declaration = expr\n    if (needsSemi) this.semicolon()\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true)\n    node.specifiers = []\n    node.source = null\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null\n    node.specifiers = this.parseExportSpecifiers()\n    if (this.eatContextual(\"from\")) {\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n    } else {\n      node.source = null\n    }\n    this.semicolon()\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n}\n\npp.shouldParseExportStatement = function() {\n  return this.type.keyword\n}\n\n// Parses a comma-separated list of module exports.\n\npp.parseExportSpecifiers = function() {\n  let nodes = [], first = true\n  // export { x, y as z } [from '...']\n  this.expect(tt.braceL)\n  while (!this.eat(tt.braceR)) {\n    if (!first) {\n      this.expect(tt.comma)\n      if (this.afterTrailingComma(tt.braceR)) break\n    } else first = false\n\n    let node = this.startNode()\n    node.local = this.parseIdent(this.type === tt._default)\n    node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"))\n  }\n  return nodes\n}\n\n// Parses import declaration.\n\npp.parseImport = function(node) {\n  this.next()\n  // import '...'\n  if (this.type === tt.string) {\n    node.specifiers = empty\n    node.source = this.parseExprAtom()\n    node.kind = \"\"\n  } else {\n    node.specifiers = this.parseImportSpecifiers()\n    this.expectContextual(\"from\")\n    node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n  }\n  this.semicolon()\n  return this.finishNode(node, \"ImportDeclaration\")\n}\n\n// Parses a comma-separated list of module imports.\n\npp.parseImportSpecifiers = function() {\n  let nodes = [], first = true\n  if (this.type === tt.name) {\n    // import defaultObj, { x, y as z } from '...'\n    let node = this.startNode()\n    node.local = this.parseIdent()\n    this.checkLVal(node.local, true)\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"))\n    if (!this.eat(tt.comma)) return nodes\n  }\n  if (this.type === tt.star) {\n    let node = this.startNode()\n    this.next()\n    this.expectContextual(\"as\")\n    node.local = this.parseIdent()\n    this.checkLVal(node.local, true)\n    nodes.push(this.finishNode(node, \"ImportNamespaceSpecifier\"))\n    return nodes\n  }\n  this.expect(tt.braceL)\n  while (!this.eat(tt.braceR)) {\n    if (!first) {\n      this.expect(tt.comma)\n      if (this.afterTrailingComma(tt.braceR)) break\n    } else first = false\n\n    let node = this.startNode()\n    node.imported = this.parseIdent(true)\n    node.local = this.eatContextual(\"as\") ? this.parseIdent() : node.imported\n    this.checkLVal(node.local, true)\n    nodes.push(this.finishNode(node, \"ImportSpecifier\"))\n  }\n  return nodes\n}\n"]}