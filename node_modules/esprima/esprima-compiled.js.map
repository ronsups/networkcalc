{"version":3,"sources":["esprima.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDA4CC,UAAU,IAAV,CAAgB,OAAhB,CAAyB,CACtB,a;;AAIA,GAAI,MAAO,OAAP,GAAkB,UAAlB,EAAgC,OAAO,GAA3C,CAAgD,CAC5C,OAAO,CAAC,SAAD,CAAP,CAAoB,OAApB,EACH,CAFD,IAEO,IAAI,MAAO,QAAP,GAAmB,WAAvB,CAAoC,CACvC,QAAQ,OAAR,EACH,CAFM,IAEA,CACH,QAAS,KAAK,OAAL,CAAe,EAAxB,EACH,CACJ,CAZA,YAYO,SAAU,OAAV,CAAmB,CACvB,aAEA,GAAI,MAAJ,CACI,SADJ,CAEI,YAFJ,CAGI,MAHJ,CAII,YAJJ,CAKI,QALJ,CAMI,KANJ,CAOI,kBAPJ,CAQI,MARJ,CASI,MATJ,CAUI,KAVJ,CAWI,UAXJ,CAYI,SAZJ,CAaI,MAbJ,CAcI,QAdJ,CAeI,SAfJ,CAgBI,KAhBJ,CAiBI,KAjBJ,CAmBA,MAAQ,CACJ,eAAgB,CADZ,CAEJ,IAAK,CAFD,CAGJ,WAAY,CAHR,CAIJ,QAAS,CAJL,CAKJ,YAAa,CALT,CAMJ,eAAgB,CANZ,CAOJ,WAAY,CAPR,CAQJ,cAAe,CARX,CASJ,kBAAmB,CATf,CAAR,CAYA,UAAY,EAAZ,CACA,UAAU,MAAM,cAAhB,EAAkC,SAAlC,CACA,UAAU,MAAM,GAAhB,EAAuB,OAAvB,CACA,UAAU,MAAM,UAAhB,EAA8B,YAA9B,CACA,UAAU,MAAM,OAAhB,EAA2B,SAA3B,CACA,UAAU,MAAM,WAAhB,EAA+B,MAA/B,CACA,UAAU,MAAM,cAAhB,EAAkC,SAAlC,CACA,UAAU,MAAM,UAAhB,EAA8B,YAA9B,CACA,UAAU,MAAM,aAAhB,EAAiC,QAAjC,CACA,UAAU,MAAM,iBAAhB,EAAqC,mBAArC,C;AAGA,aAAe,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAAgB,IAAhB,CAAsB,QAAtB,CAAgC,YAAhC,CAA8C,KAA9C,CACC,QADD,CACW,MADX,CACmB,QADnB,CAC6B,OAD7B,CACsC,MADtC,C;AAGC,GAHD,CAGM,IAHN,CAGY,IAHZ,CAGkB,IAHlB,CAGwB,IAHxB,CAG8B,IAH9B,CAGoC,KAHpC,CAG2C,KAH3C,CAGkD,MAHlD,CAIC,IAJD,CAIO,IAJP,CAIa,IAJb,CAImB,GAJnB,C;AAMC,GAND,CAMM,GANN,CAMW,GANX,CAMgB,GANhB,CAMqB,GANrB,CAM0B,IAN1B,CAMgC,IANhC,CAMsC,IANtC,CAM4C,IAN5C,CAMkD,KANlD,CAMyD,GANzD,CAOC,GAPD,CAOM,GAPN,CAOW,GAPX,CAOgB,GAPhB,CAOqB,IAPrB,CAO2B,IAP3B,CAOiC,GAPjC,CAOsC,GAPtC,CAO2C,KAP3C,CAOkD,IAPlD,CAOwD,IAPxD,CAQC,IARD,CAQO,GARP,CAQY,GARZ,CAQiB,IARjB,CAQuB,KARvB,CAAf,CAUA,OAAS,CACL,qBAAsB,sBADjB,CAEL,gBAAiB,iBAFZ,CAGL,eAAgB,gBAHX,CAIL,iBAAkB,kBAJb,CAKL,eAAgB,gBALX,CAML,eAAgB,gBANX,CAOL,YAAa,aAPR,CAQL,sBAAuB,uBARlB,CASL,kBAAmB,mBATd,CAUL,iBAAkB,kBAVb,CAWL,kBAAmB,mBAXd,CAYL,eAAgB,gBAZX,CAaL,oBAAqB,qBAbhB,CAcL,aAAc,cAdT,CAeL,eAAgB,gBAfX,CAgBL,oBAAqB,qBAhBhB,CAiBL,mBAAoB,oBAjBf,CAkBL,WAAY,YAlBP,CAmBL,YAAa,aAnBR,CAoBL,QAAS,SApBJ,CAqBL,iBAAkB,kBArBb,CAsBL,kBAAmB,mBAtBd,CAuBL,iBAAkB,kBAvBb,CAwBL,cAAe,eAxBV,CAyBL,iBAAkB,kBAzBb,CA0BL,QAAS,SA1BJ,CA2BL,SAAU,UA3BL,CA4BL,gBAAiB,iBA5BZ,CA6BL,mBAAoB,oBA7Bf,CA8BL,gBAAiB,iBA9BZ,CA+BL,WAAY,YA/BP,CAgCL,eAAgB,gBAhCX,CAiCL,eAAgB,gBAjCX,CAkCL,aAAc,cAlCT,CAmCL,gBAAiB,iBAnCZ,CAoCL,iBAAkB,kBApCb,CAqCL,oBAAqB,qBArChB,CAsCL,mBAAoB,oBAtCf,CAuCL,eAAgB,gBAvCX,CAwCL,cAAe,eAxCV,CAAT,CA2CA,aAAe,CACX,KAAM,CADK,CAEX,IAAK,CAFM,CAGX,IAAK,CAHM,CAAf,C;AAOA,SAAW,CACP,gBAAkB,qBADX,CAEP,iBAAmB,mBAFZ,CAGP,iBAAmB,mBAHZ,CAIP,qBAAuB,uBAJhB,CAKP,mBAAqB,0BALd,CAMP,cAAgB,yBANT,CAOP,kBAAoB,6BAPb,CAQP,cAAe,4BARR,CASP,mBAAqB,uCATd,CAUP,uBAAyB,sCAVlB,CAWP,kBAAoB,kCAXb,CAYP,yBAA0B,kDAZnB,CAaP,iBAAmB,oCAbZ,CAcP,aAAc,wBAdP,CAeP,cAAe,qCAfR,CAgBP,gBAAiB,4BAhBV,CAiBP,aAAc,yBAjBP,CAkBP,cAAe,0BAlBR,CAmBP,eAAiB,mDAnBV,CAoBP,oBAAsB,4DApBf,CAqBP,cAAgB,2DArBT,CAsBP,gBAAkB,gEAtBX,CAuBP,gBAAiB,6DAvBV,CAwBP,mBAAqB,2DAxBd,CAyBP,mBAAqB,gDAzBd,CA0BP,aAAe,qDA1BR,CA2BP,wBAA0B,sEA3BnB,CA4BP,qBAAuB,2EA5BhB,CA6BP,eAAiB,2EA7BV,CA8BP,oBAAsB,+DA9Bf,CA+BP,iBAAmB,mFA/BZ,CAgCP,gBAAkB,kFAhCX,CAiCP,mBAAqB,4CAjCd,CAAX,C;AAqCA,MAAQ,CACJ,wBAAyB,GAAI,OAAJ,CAAW,o5BAAX,CADrB,CAEJ,uBAAwB,GAAI,OAAJ,CAAW,ulCAAX,CAFpB,CAAR,C;;;;AAUA,QAAS,OAAT,CAAgB,SAAhB,CAA2B,OAA3B,CAAoC,CAChC,GAAI,CAAC,SAAL,CAAgB,CACZ,KAAM,IAAI,MAAJ,CAAU,WAAa,OAAvB,CAAN,CACH,CACJ,CAED,QAAS,eAAT,CAAwB,EAAxB,CAA4B,CACxB,MAAQ,KAAM,EAAN,EAAY,IAAM,EAA1B,C;AACH,CAED,QAAS,WAAT,CAAoB,EAApB,CAAwB,CACpB,MAAO,yBAAyB,OAAzB,CAAiC,EAAjC,GAAwC,CAA/C,CACH,CAED,QAAS,aAAT,CAAsB,EAAtB,CAA0B,CACtB,MAAO,WAAW,OAAX,CAAmB,EAAnB,GAA0B,CAAjC,CACH,C;AAKD,QAAS,aAAT,CAAsB,EAAtB,CAA0B,CACtB,MAAQ,MAAO,IAAR,EAAkB,KAAO,IAAzB,EAAmC,KAAO,IAA1C,EAAoD,KAAO,IAA3D,EAAqE,KAAO,IAA5E,EACF,IAAM,MAAN,EAAgB,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,CAAyB,MAAzB,CAAiC,MAAjC,CAAyC,MAAzC,CAAiD,MAAjD,CAAyD,MAAzD,CAAiE,MAAjE,CAAyE,MAAzE,CAAiF,MAAjF,CAAyF,MAAzF,CAAiG,MAAjG,CAAyG,MAAzG,CAAiH,MAAjH,CAAyH,MAAzH,CAAiI,MAAjI,EAAyI,OAAzI,CAAiJ,EAAjJ,GAAwJ,CAD7K,CAEH,C;AAID,QAAS,iBAAT,CAA0B,EAA1B,CAA8B,CAC1B,MAAQ,MAAO,IAAR,EAAkB,KAAO,IAAzB,EAAmC,KAAO,MAA1C,EAAsD,KAAO,MAApE,CACH,C;AAID,QAAS,kBAAT,CAA2B,EAA3B,CAA+B,CAC3B,MAAQ,MAAO,IAAR,EAAkB,KAAO,IAAzB,E;AACF,IAAM,IAAN,EAAc,IAAM,IADlB,E;AAEF,IAAM,IAAN,EAAc,IAAM,IAFlB,E;AAGF,KAAO,IAHL,E;AAID,IAAM,IAAP,EAAgB,MAAM,uBAAN,CAA8B,IAA9B,CAAmC,OAAO,YAAP,CAAoB,EAApB,CAAnC,CAJrB,CAKH,CAED,QAAS,iBAAT,CAA0B,EAA1B,CAA8B,CAC1B,MAAQ,MAAO,IAAR,EAAkB,KAAO,IAAzB,E;AACF,IAAM,IAAN,EAAc,IAAM,IADlB,E;AAEF,IAAM,IAAN,EAAc,IAAM,IAFlB,E;AAGF,IAAM,IAAN,EAAc,IAAM,IAHlB,E;AAIF,KAAO,IAJL,E;AAKD,IAAM,IAAP,EAAgB,MAAM,sBAAN,CAA6B,IAA7B,CAAkC,OAAO,YAAP,CAAoB,EAApB,CAAlC,CALrB,CAMH,C;AAID,QAAS,qBAAT,CAA8B,EAA9B,CAAkC,CAC9B,OAAQ,EAAR,EACA,IAAK,OAAL,CACA,IAAK,MAAL,CACA,IAAK,QAAL,CACA,IAAK,SAAL,CACA,IAAK,QAAL,CACA,IAAK,OAAL,CACI,MAAO,KAAP,CACJ,QACI,MAAO,MAAP,CATJ,CAWH,CAED,QAAS,yBAAT,CAAkC,EAAlC,CAAsC,CAClC,OAAQ,EAAR,EACA,IAAK,YAAL,CACA,IAAK,WAAL,CACA,IAAK,SAAL,CACA,IAAK,SAAL,CACA,IAAK,WAAL,CACA,IAAK,QAAL,CACA,IAAK,QAAL,CACA,IAAK,OAAL,CACA,IAAK,KAAL,CACI,MAAO,KAAP,CACJ,QACI,MAAO,MAAP,CAZJ,CAcH,CAED,QAAS,iBAAT,CAA0B,EAA1B,CAA8B,CAC1B,MAAO,MAAO,MAAP,EAAiB,KAAO,WAA/B,CACH,C;AAID,QAAS,UAAT,CAAmB,EAAnB,CAAuB,CACnB,GAAI,QAAU,yBAAyB,EAAzB,CAAd,CAA4C,CACxC,MAAO,KAAP,CACH,C;;;AAMD,OAAQ,GAAG,MAAX,EACA,IAAK,EAAL,CACI,MAAQ,MAAO,IAAR,EAAkB,KAAO,IAAzB,EAAmC,KAAO,IAAjD,CACJ,IAAK,EAAL,CACI,MAAQ,MAAO,KAAR,EAAmB,KAAO,KAA1B,EAAqC,KAAO,KAA5C,EACF,KAAO,KADL,EACgB,KAAO,KAD9B,CAEJ,IAAK,EAAL,CACI,MAAQ,MAAO,MAAR,EAAoB,KAAO,MAA3B,EAAuC,KAAO,MAA9C,EACF,KAAO,MADL,EACiB,KAAO,MADxB,EACoC,KAAO,MADlD,CAEJ,IAAK,EAAL,CACI,MAAQ,MAAO,OAAR,EAAqB,KAAO,OAA5B,EAAyC,KAAO,OAAhD,EACF,KAAO,OADL,EACkB,KAAO,OADzB,EACsC,KAAO,OAD7C,EAEF,KAAO,OAFL,EAEkB,KAAO,OAFhC,CAGJ,IAAK,EAAL,CACI,MAAQ,MAAO,QAAR,EAAsB,KAAO,QAA7B,EAA2C,KAAO,QAAlD,EACF,KAAO,QADL,EACmB,KAAO,QAD1B,EACwC,KAAO,QADtD,CAEJ,IAAK,EAAL,CACI,MAAQ,MAAO,SAAR,EAAuB,KAAO,SAA9B,EAA6C,KAAO,SAA3D,CACJ,IAAK,EAAL,CACI,MAAQ,MAAO,UAAR,EAAwB,KAAO,UAA/B,EAA+C,KAAO,UAA7D,CACJ,IAAK,GAAL,CACI,MAAQ,MAAO,YAAf,CACJ,QACI,MAAO,MAAP,CAvBJ,CAyBH,C;AAID,QAAS,WAAT,CAAoB,IAApB,CAA0B,KAA1B,CAAiC,KAAjC,CAAwC,GAAxC,CAA6C,GAA7C,CAAkD,CAC9C,GAAI,QAAJ,CAAa,QAAb,CAEA,OAAO,MAAO,MAAP,GAAiB,QAAxB,CAAkC,kCAAlC,E;;;;AAMA,GAAI,MAAM,gBAAN,EAA0B,KAA9B,CAAqC,CACjC,OACH,CACD,MAAM,gBAAN,CAAyB,KAAzB,CAEA,QAAU,CACN,KAAM,IADA,CAEN,MAAO,KAFD,CAAV,CAIA,GAAI,MAAM,KAAV,CAAiB,CACb,QAAQ,KAAR,CAAgB,CAAC,KAAD,CAAQ,GAAR,CAAhB,CACH,CACD,GAAI,MAAM,GAAV,CAAe,CACX,QAAQ,GAAR,CAAc,GAAd,CACH,CACD,MAAM,QAAN,CAAe,IAAf,CAAoB,OAApB,EAEA,GAAI,MAAM,aAAV,CAAyB,CACrB,SAAW,CACP,QAAS,OADF,CAEP,QAAS,IAFF,CAGP,SAAU,IAHH,CAIP,MAAO,CAAC,KAAD,CAAQ,GAAR,CAJA,CAAX,CAMA,MAAM,eAAN,CAAsB,IAAtB,CAA2B,QAA3B,EACH,CACJ,CAED,QAAS,sBAAT,CAA+B,MAA/B,CAAuC,CACnC,GAAI,MAAJ,CAAW,GAAX,CAAgB,EAAhB,CAAoB,OAApB,CAEA,MAAQ,MAAQ,MAAhB,CACA,IAAM,CACF,MAAO,CACH,KAAM,UADH,CAEH,OAAQ,MAAQ,SAAR,CAAoB,MAFzB,CADL,CAAN,CAOA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,UAAP,CAAkB,KAAlB,CAAL,CACA,EAAE,KAAF,CACA,GAAI,iBAAiB,EAAjB,CAAJ,CAA0B,CACtB,GAAI,MAAM,QAAV,CAAoB,CAChB,QAAU,OAAO,KAAP,CAAa,MAAQ,MAArB,CAA6B,MAAQ,CAArC,CAAV,CACA,IAAI,GAAJ,CAAU,CACN,KAAM,UADA,CAEN,OAAQ,MAAQ,SAAR,CAAoB,CAFtB,CAAV,CAIA,WAAW,MAAX,CAAmB,OAAnB,CAA4B,KAA5B,CAAmC,MAAQ,CAA3C,CAA8C,GAA9C,EACH,CACD,GAAI,KAAO,EAAP,EAAa,OAAO,UAAP,CAAkB,KAAlB,IAA6B,EAA9C,CAAkD,CAC9C,EAAE,KAAF,CACH,CACD,EAAE,UAAF,CACA,UAAY,KAAZ,CACA,OACH,CACJ,CAED,GAAI,MAAM,QAAV,CAAoB,CAChB,QAAU,OAAO,KAAP,CAAa,MAAQ,MAArB,CAA6B,KAA7B,CAAV,CACA,IAAI,GAAJ,CAAU,CACN,KAAM,UADA,CAEN,OAAQ,MAAQ,SAFV,CAAV,CAIA,WAAW,MAAX,CAAmB,OAAnB,CAA4B,KAA5B,CAAmC,KAAnC,CAA0C,GAA1C,EACH,CACJ,CAED,QAAS,qBAAT,EAAgC,CAC5B,GAAI,MAAJ,CAAW,GAAX,CAAgB,EAAhB,CAAoB,OAApB,CAEA,GAAI,MAAM,QAAV,CAAoB,CAChB,MAAQ,MAAQ,CAAhB,CACA,IAAM,CACF,MAAO,CACH,KAAM,UADH,CAEH,OAAQ,MAAQ,SAAR,CAAoB,CAFzB,CADL,CAAN,CAMH,CAED,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,UAAP,CAAkB,KAAlB,CAAL,CACA,GAAI,iBAAiB,EAAjB,CAAJ,CAA0B,CACtB,GAAI,KAAO,IAAP,EAAe,OAAO,UAAP,CAAkB,MAAQ,CAA1B,IAAiC,IAApD,CAA0D,CACtD,EAAE,KAAF,CACH,CACD,EAAE,UAAF,CACA,EAAE,KAAF,CACA,UAAY,KAAZ,CACA,GAAI,OAAS,MAAb,CAAqB,CACjB,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACJ,CAVD,IAUO,IAAI,KAAO,IAAX,CAAiB,C;AAEpB,GAAI,OAAO,UAAP,CAAkB,MAAQ,CAA1B,IAAiC,IAArC,CAA2C,CACvC,EAAE,KAAF,CACA,EAAE,KAAF,CACA,GAAI,MAAM,QAAV,CAAoB,CAChB,QAAU,OAAO,KAAP,CAAa,MAAQ,CAArB,CAAwB,MAAQ,CAAhC,CAAV,CACA,IAAI,GAAJ,CAAU,CACN,KAAM,UADA,CAEN,OAAQ,MAAQ,SAFV,CAAV,CAIA,WAAW,OAAX,CAAoB,OAApB,CAA6B,KAA7B,CAAoC,KAApC,CAA2C,GAA3C,EACH,CACD,OACH,CACD,EAAE,KAAF,CACH,CAhBM,IAgBA,CACH,EAAE,KAAF,CACH,CACJ,CAED,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CAED,QAAS,YAAT,EAAuB,CACnB,GAAI,GAAJ,CAAQ,KAAR,CAEA,MAAS,QAAU,CAAnB,CACA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,UAAP,CAAkB,KAAlB,CAAL,CAEA,GAAI,aAAa,EAAb,CAAJ,CAAsB,CAClB,EAAE,KAAF,CACH,CAFD,IAEO,IAAI,iBAAiB,EAAjB,CAAJ,CAA0B,CAC7B,EAAE,KAAF,CACA,GAAI,KAAO,IAAP,EAAe,OAAO,UAAP,CAAkB,KAAlB,IAA6B,IAAhD,CAAsD,CAClD,EAAE,KAAF,CACH,CACD,EAAE,UAAF,CACA,UAAY,KAAZ,CACA,MAAQ,IAAR,CACH,CARM,IAQA,IAAI,KAAO,IAAX,CAAiB,C;AACpB,GAAK,OAAO,UAAP,CAAkB,MAAQ,CAA1B,CAAL,CACA,GAAI,KAAO,IAAX,CAAiB,CACb,EAAE,KAAF,CACA,EAAE,KAAF,CACA,sBAAsB,CAAtB,EACA,MAAQ,IAAR,CACH,CALD,IAKO,IAAI,KAAO,IAAX,CAAiB,C;AACpB,EAAE,KAAF,CACA,EAAE,KAAF,CACA,uBACH,CAJM,IAIA,CACH,MACH,CACJ,CAdM,IAcA,IAAI,OAAS,KAAO,IAApB,CAA0B,C;;AAE7B,GAAK,OAAO,UAAP,CAAkB,MAAQ,CAA1B,IAAiC,IAAlC,EAA4C,OAAO,UAAP,CAAkB,MAAQ,CAA1B,IAAiC,IAAjF,CAAwF,C;AAEpF,OAAS,CAAT,CACA,sBAAsB,CAAtB,EACH,CAJD,IAIO,CACH,MACH,CACJ,CATM,IASA,IAAI,KAAO,IAAX,CAAiB,C;AACpB,GAAI,OAAO,KAAP,CAAa,MAAQ,CAArB,CAAwB,MAAQ,CAAhC,IAAuC,KAA3C,CAAkD,CAC9C,EAAE,KAAF,C;AACA,EAAE,KAAF,C;AACA,EAAE,KAAF,C;AACA,EAAE,KAAF,C;AACA,sBAAsB,CAAtB,EACH,CAND,IAMO,CACH,MACH,CACJ,CAVM,IAUA,CACH,MACH,CACJ,CACJ,CAED,QAAS,cAAT,CAAuB,MAAvB,CAA+B,CAC3B,GAAI,EAAJ,CAAO,GAAP,CAAY,EAAZ,CAAgB,KAAO,CAAvB,CAEA,IAAO,SAAW,GAAZ,CAAmB,CAAnB,CAAuB,CAA7B,CACA,IAAK,EAAI,CAAT,CAAY,EAAI,GAAhB,CAAqB,EAAE,CAAvB,CAA0B,CACtB,GAAI,MAAQ,MAAR,EAAkB,WAAW,OAAO,KAAP,CAAX,CAAtB,CAAiD,CAC7C,GAAK,OAAO,OAAP,CAAL,CACA,KAAO,KAAO,EAAP,CAAY,mBAAmB,OAAnB,CAA2B,GAAG,WAAH,EAA3B,CAAnB,CACH,CAHD,IAGO,CACH,MAAO,EAAP,CACH,CACJ,CACD,MAAO,QAAO,YAAP,CAAoB,IAApB,CAAP,CACH,CAED,QAAS,qBAAT,EAAgC,CAC5B,GAAI,GAAJ,CAAQ,EAAR,CAEA,GAAK,OAAO,UAAP,CAAkB,OAAlB,CAAL,CACA,GAAK,OAAO,YAAP,CAAoB,EAApB,CAAL,C;AAGA,GAAI,KAAO,IAAX,CAAiB,CACb,GAAI,OAAO,UAAP,CAAkB,KAAlB,IAA6B,IAAjC,CAAuC,CACnC,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACD,EAAE,KAAF,CACA,GAAK,cAAc,GAAd,CAAL,CACA,GAAI,CAAC,EAAD,EAAO,KAAO,IAAd,EAAsB,CAAC,kBAAkB,GAAG,UAAH,CAAc,CAAd,CAAlB,CAA3B,CAAgE,CAC5D,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACD,GAAK,EAAL,CACH,CAED,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,UAAP,CAAkB,KAAlB,CAAL,CACA,GAAI,CAAC,iBAAiB,EAAjB,CAAL,CAA2B,CACvB,MACH,CACD,EAAE,KAAF,CACA,IAAM,OAAO,YAAP,CAAoB,EAApB,CAAN,C;AAGA,GAAI,KAAO,IAAX,CAAiB,CACb,GAAK,GAAG,MAAH,CAAU,CAAV,CAAa,GAAG,MAAH,CAAY,CAAzB,CAAL,CACA,GAAI,OAAO,UAAP,CAAkB,KAAlB,IAA6B,IAAjC,CAAuC,CACnC,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACD,EAAE,KAAF,CACA,GAAK,cAAc,GAAd,CAAL,CACA,GAAI,CAAC,EAAD,EAAO,KAAO,IAAd,EAAsB,CAAC,iBAAiB,GAAG,UAAH,CAAc,CAAd,CAAjB,CAA3B,CAA+D,CAC3D,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACD,IAAM,EAAN,CACH,CACJ,CAED,MAAO,GAAP,CACH,CAED,QAAS,cAAT,EAAyB,CACrB,GAAI,MAAJ,CAAW,EAAX,CAEA,MAAQ,OAAR,CACA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,UAAP,CAAkB,KAAlB,CAAL,CACA,GAAI,KAAO,IAAX,CAAiB,C;AAEb,MAAQ,KAAR,CACA,MAAO,uBAAP,CACH,CACD,GAAI,iBAAiB,EAAjB,CAAJ,CAA0B,CACtB,EAAE,KAAF,CACH,CAFD,IAEO,CACH,MACH,CACJ,CAED,MAAO,QAAO,KAAP,CAAa,KAAb,CAAoB,KAApB,CAAP,CACH,CAED,QAAS,eAAT,EAA0B,CACtB,GAAI,MAAJ,CAAW,EAAX,CAAe,IAAf,CAEA,MAAQ,KAAR,C;AAGA,GAAM,OAAO,UAAP,CAAkB,KAAlB,IAA6B,IAA9B,CAAsC,sBAAtC,CAA+D,eAApE,C;;AAIA,GAAI,GAAG,MAAH,GAAc,CAAlB,CAAqB,CACjB,KAAO,MAAM,UAAb,CACH,CAFD,IAEO,IAAI,UAAU,EAAV,CAAJ,CAAmB,CACtB,KAAO,MAAM,OAAb,CACH,CAFM,IAEA,IAAI,KAAO,MAAX,CAAmB,CACtB,KAAO,MAAM,WAAb,CACH,CAFM,IAEA,IAAI,KAAO,MAAP,EAAiB,KAAO,OAA5B,CAAqC,CACxC,KAAO,MAAM,cAAb,CACH,CAFM,IAEA,CACH,KAAO,MAAM,UAAb,CACH,CAED,MAAO,CACH,KAAM,IADH,CAEH,MAAO,EAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,C;AAKD,QAAS,eAAT,EAA0B,CACtB,GAAI,OAAQ,KAAZ,CACI,KAAO,OAAO,UAAP,CAAkB,KAAlB,CADX,CAEI,KAFJ,CAGI,IAAM,OAAO,KAAP,CAHV,CAII,GAJJ,CAKI,GALJ,CAMI,GANJ,CAQA,OAAQ,IAAR,E;AAGA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACI,EAAE,KAAF,CACA,GAAI,MAAM,QAAV,CAAoB,CAChB,GAAI,OAAS,IAAb,CAAmB,CACf,MAAM,cAAN,CAAuB,MAAM,MAAN,CAAa,MAApC,CACH,CAFD,IAEO,IAAI,OAAS,IAAb,CAAmB,CACtB,MAAM,cAAN,CAAuB,MAAM,MAAN,CAAa,MAApC,CACH,CACJ,CACD,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,OAAO,YAAP,CAAoB,IAApB,CAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAQJ,QACI,MAAQ,OAAO,UAAP,CAAkB,MAAQ,CAA1B,CAAR,C;AAGA,GAAI,QAAU,IAAd,CAAoB,CAChB,OAAQ,IAAR,EACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACI,OAAS,CAAT,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,OAAO,YAAP,CAAoB,IAApB,EAA4B,OAAO,YAAP,CAAoB,KAApB,CAFhC,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAQJ,IAAK,KAAL,C;AACA,IAAK,KAAL,C;AACI,OAAS,CAAT,C;AAGA,GAAI,OAAO,UAAP,CAAkB,KAAlB,IAA6B,IAAjC,CAAuC,CACnC,EAAE,KAAF,CACH,CACD,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,OAAO,KAAP,CAAa,KAAb,CAAoB,KAApB,CAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOJ,QACI,MApCJ,CAsCH,CACD,MA3EJ,C;AAgFA,IAAM,OAAO,MAAQ,CAAf,CAAN,CACA,IAAM,OAAO,MAAQ,CAAf,CAAN,CACA,IAAM,OAAO,MAAQ,CAAf,CAAN,C;AAIA,GAAI,MAAQ,GAAR,EAAe,MAAQ,GAAvB,EAA8B,MAAQ,GAA1C,CAA+C,CAC3C,GAAI,MAAQ,GAAZ,CAAiB,CACb,OAAS,CAAT,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,MAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CACJ,C;AAID,GAAI,MAAQ,GAAR,EAAe,MAAQ,GAAvB,EAA8B,MAAQ,GAA1C,CAA+C,CAC3C,OAAS,CAAT,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,KAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CAED,GAAI,MAAQ,GAAR,EAAe,MAAQ,GAAvB,EAA8B,MAAQ,GAA1C,CAA+C,CAC3C,OAAS,CAAT,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,KAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CAED,GAAI,MAAQ,GAAR,EAAe,MAAQ,GAAvB,EAA8B,MAAQ,GAA1C,CAA+C,CAC3C,OAAS,CAAT,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,KAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,C;AAID,GAAI,MAAQ,GAAR,EAAgB,SAAS,OAAT,CAAiB,GAAjB,GAAyB,CAA7C,CAAiD,CAC7C,OAAS,CAAT,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,IAAM,GAFV,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CAED,GAAI,eAAe,OAAf,CAAuB,GAAvB,GAA+B,CAAnC,CAAsC,CAClC,EAAE,KAAF,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,GAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CAED,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,C;AAID,QAAS,eAAT,CAAwB,KAAxB,CAA+B,CAC3B,GAAI,QAAS,EAAb,CAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAI,CAAC,WAAW,OAAO,KAAP,CAAX,CAAL,CAAgC,CAC5B,MACH,CACD,QAAU,OAAO,OAAP,CAAV,CACH,CAED,GAAI,OAAO,MAAP,GAAkB,CAAtB,CAAyB,CACrB,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CAED,GAAI,kBAAkB,OAAO,UAAP,CAAkB,KAAlB,CAAlB,CAAJ,CAAiD,CAC7C,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CAED,MAAO,CACH,KAAM,MAAM,cADT,CAEH,MAAO,SAAS,KAAO,MAAhB,CAAwB,EAAxB,CAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CAED,QAAS,iBAAT,CAA0B,KAA1B,CAAiC,CAC7B,GAAI,QAAS,IAAM,OAAO,OAAP,CAAnB,CACA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAI,CAAC,aAAa,OAAO,KAAP,CAAb,CAAL,CAAkC,CAC9B,MACH,CACD,QAAU,OAAO,OAAP,CAAV,CACH,CAED,GAAI,kBAAkB,OAAO,UAAP,CAAkB,KAAlB,CAAlB,GAA+C,eAAe,OAAO,UAAP,CAAkB,KAAlB,CAAf,CAAnD,CAA6F,CACzF,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CAED,MAAO,CACH,KAAM,MAAM,cADT,CAEH,MAAO,SAAS,MAAT,CAAiB,CAAjB,CAFJ,CAGH,MAAO,IAHJ,CAIH,WAAY,UAJT,CAKH,UAAW,SALR,CAMH,MAAO,CAAC,KAAD,CAAQ,KAAR,CANJ,CAAP,CAQH,CAED,QAAS,mBAAT,EAA8B,CAC1B,GAAI,OAAJ,CAAY,KAAZ,CAAmB,EAAnB,CAEA,GAAK,OAAO,KAAP,CAAL,CACA,OAAO,eAAe,GAAG,UAAH,CAAc,CAAd,CAAf,GAAqC,KAAO,GAAnD,CACI,oEADJ,EAGA,MAAQ,KAAR,CACA,OAAS,EAAT,CACA,GAAI,KAAO,GAAX,CAAgB,CACZ,OAAS,OAAO,OAAP,CAAT,CACA,GAAK,OAAO,KAAP,CAAL,C;;AAIA,GAAI,SAAW,GAAf,CAAoB,CAChB,GAAI,KAAO,GAAP,EAAc,KAAO,GAAzB,CAA8B,CAC1B,EAAE,KAAF,CACA,MAAO,gBAAe,KAAf,CAAP,CACH,CACD,GAAI,aAAa,EAAb,CAAJ,CAAsB,CAClB,MAAO,kBAAiB,KAAjB,CAAP,CACH,C;AAGD,GAAI,IAAM,eAAe,GAAG,UAAH,CAAc,CAAd,CAAf,CAAV,CAA4C,CACxC,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACJ,CAED,MAAO,eAAe,OAAO,UAAP,CAAkB,KAAlB,CAAf,CAAP,CAAiD,CAC7C,QAAU,OAAO,OAAP,CAAV,CACH,CACD,GAAK,OAAO,KAAP,CAAL,CACH,CAED,GAAI,KAAO,GAAX,CAAgB,CACZ,QAAU,OAAO,OAAP,CAAV,CACA,MAAO,eAAe,OAAO,UAAP,CAAkB,KAAlB,CAAf,CAAP,CAAiD,CAC7C,QAAU,OAAO,OAAP,CAAV,CACH,CACD,GAAK,OAAO,KAAP,CAAL,CACH,CAED,GAAI,KAAO,GAAP,EAAc,KAAO,GAAzB,CAA8B,CAC1B,QAAU,OAAO,OAAP,CAAV,CAEA,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,KAAO,GAAP,EAAc,KAAO,GAAzB,CAA8B,CAC1B,QAAU,OAAO,OAAP,CAAV,CACH,CACD,GAAI,eAAe,OAAO,UAAP,CAAkB,KAAlB,CAAf,CAAJ,CAA8C,CAC1C,MAAO,eAAe,OAAO,UAAP,CAAkB,KAAlB,CAAf,CAAP,CAAiD,CAC7C,QAAU,OAAO,OAAP,CAAV,CACH,CACJ,CAJD,IAIO,CACH,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACJ,CAED,GAAI,kBAAkB,OAAO,UAAP,CAAkB,KAAlB,CAAlB,CAAJ,CAAiD,CAC7C,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CAED,MAAO,CACH,KAAM,MAAM,cADT,CAEH,MAAO,WAAW,MAAX,CAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,C;AAID,QAAS,kBAAT,EAA6B,CACzB,GAAI,KAAM,EAAV,CAAc,KAAd,CAAqB,KAArB,CAA4B,EAA5B,CAAgC,IAAhC,CAAsC,SAAtC,CAAiD,OAAjD,CAA0D,MAAQ,KAAlE,CAEA,MAAQ,OAAO,KAAP,CAAR,CACA,OAAQ,QAAU,IAAV,EAAkB,QAAU,GAApC,CACI,yCADJ,EAGA,MAAQ,KAAR,CACA,EAAE,KAAF,CAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,OAAP,CAAL,CAEA,GAAI,KAAO,KAAX,CAAkB,CACd,MAAQ,EAAR,CACA,MACH,CAHD,IAGO,IAAI,KAAO,IAAX,CAAiB,CACpB,GAAK,OAAO,OAAP,CAAL,CACA,GAAI,CAAC,EAAD,EAAO,CAAC,iBAAiB,GAAG,UAAH,CAAc,CAAd,CAAjB,CAAZ,CAAgD,CAC5C,OAAQ,EAAR,EACA,IAAK,GAAL,CACI,KAAO,IAAP,CACA,MACJ,IAAK,GAAL,CACI,KAAO,IAAP,CACA,MACJ,IAAK,GAAL,CACI,KAAO,IAAP,CACA,MACJ,IAAK,GAAL,CACA,IAAK,GAAL,CACI,QAAU,KAAV,CACA,UAAY,cAAc,EAAd,CAAZ,CACA,GAAI,SAAJ,CAAe,CACX,KAAO,SAAP,CACH,CAFD,IAEO,CACH,MAAQ,OAAR,CACA,KAAO,EAAP,CACH,CACD,MACJ,IAAK,GAAL,CACI,KAAO,IAAP,CACA,MACJ,IAAK,GAAL,CACI,KAAO,IAAP,CACA,MACJ,IAAK,GAAL,CACI,KAAO,MAAP,CACA,MAEJ,QACI,GAAI,aAAa,EAAb,CAAJ,CAAsB,CAClB,KAAO,WAAW,OAAX,CAAmB,EAAnB,CAAP,C;AAGA,GAAI,OAAS,CAAb,CAAgB,CACZ,MAAQ,IAAR,CACH,CAED,GAAI,MAAQ,MAAR,EAAkB,aAAa,OAAO,KAAP,CAAb,CAAtB,CAAmD,CAC/C,MAAQ,IAAR,CACA,KAAO,KAAO,CAAP,CAAW,WAAW,OAAX,CAAmB,OAAO,OAAP,CAAnB,CAAlB,C;;AAIA,GAAI,OAAO,OAAP,CAAe,EAAf,GAAsB,CAAtB,EACI,MAAQ,MADZ,EAEI,aAAa,OAAO,KAAP,CAAb,CAFR,CAEqC,CACjC,KAAO,KAAO,CAAP,CAAW,WAAW,OAAX,CAAmB,OAAO,OAAP,CAAnB,CAAlB,CACH,CACJ,CACD,KAAO,OAAO,YAAP,CAAoB,IAApB,CAAP,CACH,CArBD,IAqBO,CACH,KAAO,EAAP,CACH,CACD,MAxDJ,CA0DH,CA3DD,IA2DO,CACH,EAAE,UAAF,CACA,GAAI,KAAQ,IAAR,EAAgB,OAAO,KAAP,IAAkB,IAAtC,CAA4C,CACxC,EAAE,KAAF,CACH,CACD,UAAY,KAAZ,CACH,CACJ,CApEM,IAoEA,IAAI,iBAAiB,GAAG,UAAH,CAAc,CAAd,CAAjB,CAAJ,CAAwC,CAC3C,MACH,CAFM,IAEA,CACH,KAAO,EAAP,CACH,CACJ,CAED,GAAI,QAAU,EAAd,CAAkB,CACd,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CAED,MAAO,CACH,KAAM,MAAM,aADT,CAEH,MAAO,GAFJ,CAGH,MAAO,KAHJ,CAIH,WAAY,UAJT,CAKH,UAAW,SALR,CAMH,MAAO,CAAC,KAAD,CAAQ,KAAR,CANJ,CAAP,CAQH,CAED,QAAS,WAAT,EAAsB,CAClB,GAAI,IAAJ,CAAS,EAAT,CAAa,KAAb,CAAoB,OAApB,CAA6B,KAA7B,CAAoC,KAApC,CAA2C,YAAc,KAAzD,CAAgE,OAAhE,CAAyE,WAAa,KAAtF,CAEA,UAAY,IAAZ,CACA,cAEA,MAAQ,KAAR,CACA,GAAK,OAAO,KAAP,CAAL,CACA,OAAO,KAAO,GAAd,CAAmB,oDAAnB,EACA,IAAM,OAAO,OAAP,CAAN,CAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,OAAP,CAAL,CACA,KAAO,EAAP,CACA,GAAI,KAAO,IAAX,CAAiB,CACb,GAAK,OAAO,OAAP,CAAL,C;AAEA,GAAI,iBAAiB,GAAG,UAAH,CAAc,CAAd,CAAjB,CAAJ,CAAwC,CACpC,WAAW,EAAX,CAAe,SAAS,kBAAxB,EACH,CACD,KAAO,EAAP,CACH,CAPD,IAOO,IAAI,iBAAiB,GAAG,UAAH,CAAc,CAAd,CAAjB,CAAJ,CAAwC,CAC3C,WAAW,EAAX,CAAe,SAAS,kBAAxB,EACH,CAFM,IAEA,IAAI,WAAJ,CAAiB,CACpB,GAAI,KAAO,GAAX,CAAgB,CACZ,YAAc,KAAd,CACH,CACJ,CAJM,IAIA,CACH,GAAI,KAAO,GAAX,CAAgB,CACZ,WAAa,IAAb,CACA,MACH,CAHD,IAGO,IAAI,KAAO,GAAX,CAAgB,CACnB,YAAc,IAAd,CACH,CACJ,CACJ,CAED,GAAI,CAAC,UAAL,CAAiB,CACb,WAAW,EAAX,CAAe,SAAS,kBAAxB,EACH,C;AAGD,QAAU,IAAI,MAAJ,CAAW,CAAX,CAAc,IAAI,MAAJ,CAAa,CAA3B,CAAV,CAEA,MAAQ,EAAR,CACA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,CAAC,iBAAiB,GAAG,UAAH,CAAc,CAAd,CAAjB,CAAL,CAAyC,CACrC,MACH,CAED,EAAE,KAAF,CACA,GAAI,KAAO,IAAP,EAAe,MAAQ,MAA3B,CAAmC,CAC/B,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,KAAO,GAAX,CAAgB,CACZ,EAAE,KAAF,CACA,QAAU,KAAV,CACA,GAAK,cAAc,GAAd,CAAL,CACA,GAAI,EAAJ,CAAQ,CACJ,OAAS,EAAT,CACA,IAAK,KAAO,KAAZ,CAAmB,QAAU,KAA7B,CAAoC,EAAE,OAAtC,CAA+C,CAC3C,KAAO,OAAO,OAAP,CAAP,CACH,CACJ,CALD,IAKO,CACH,MAAQ,OAAR,CACA,OAAS,GAAT,CACA,KAAO,KAAP,CACH,CACJ,CAdD,IAcO,CACH,KAAO,IAAP,CACH,CACJ,CAnBD,IAmBO,CACH,OAAS,EAAT,CACA,KAAO,EAAP,CACH,CACJ,CAED,GAAI,CACA,MAAQ,GAAI,OAAJ,CAAW,OAAX,CAAoB,KAApB,CAAR,CACH,CAAC,MAAO,CAAP,CAAU,CACR,WAAW,EAAX,CAAe,SAAS,aAAxB,EACH,CAID,GAAI,MAAM,QAAV,CAAoB,CAChB,MAAO,CACH,KAAM,MAAM,iBADT,CAEH,MAAO,KAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CACD,MAAO,CACH,QAAS,GADN,CAEH,MAAO,KAFJ,CAGH,MAAO,CAAC,KAAD,CAAQ,KAAR,CAHJ,CAAP,CAKH,CAED,QAAS,aAAT,EAAwB,CACpB,GAAI,IAAJ,CAAS,GAAT,CAAc,KAAd,CAAqB,KAArB,CAEA,cAEA,IAAM,KAAN,CACA,IAAM,CACF,MAAO,CACH,KAAM,UADH,CAEH,OAAQ,MAAQ,SAFb,CADL,CAAN,CAOA,MAAQ,YAAR,CACA,IAAI,GAAJ,CAAU,CACN,KAAM,UADA,CAEN,OAAQ,MAAQ,SAFV,CAAV,CAKA,GAAI,CAAC,MAAM,QAAX,CAAqB,C;AAEjB,GAAI,MAAM,MAAN,CAAa,MAAb,CAAsB,CAA1B,CAA6B,CACzB,MAAQ,MAAM,MAAN,CAAa,MAAM,MAAN,CAAa,MAAb,CAAsB,CAAnC,CAAR,CACA,GAAI,MAAM,KAAN,CAAY,CAAZ,IAAmB,GAAnB,EAA0B,MAAM,IAAN,GAAe,YAA7C,CAA2D,CACvD,GAAI,MAAM,KAAN,GAAgB,GAAhB,EAAuB,MAAM,KAAN,GAAgB,IAA3C,CAAiD,CAC7C,MAAM,MAAN,CAAa,GAAb,GACH,CACJ,CACJ,CAED,MAAM,MAAN,CAAa,IAAb,CAAkB,CACd,KAAM,mBADQ,CAEd,MAAO,MAAM,OAFC,CAGd,MAAO,CAAC,GAAD,CAAM,KAAN,CAHO,CAId,IAAK,GAJS,CAAlB,EAMH,CAED,MAAO,MAAP,CACH,CAED,QAAS,iBAAT,CAA0B,KAA1B,CAAiC,CAC7B,MAAO,OAAM,IAAN,GAAe,MAAM,UAArB,EACH,MAAM,IAAN,GAAe,MAAM,OADlB,EAEH,MAAM,IAAN,GAAe,MAAM,cAFlB,EAGH,MAAM,IAAN,GAAe,MAAM,WAHzB,CAIH,CAED,QAAS,aAAT,EAAwB,CACpB,GAAI,UAAJ,CACI,UADJ,C;;AAIA,UAAY,MAAM,MAAN,CAAa,MAAM,MAAN,CAAa,MAAb,CAAsB,CAAnC,CAAZ,CACA,GAAI,CAAC,SAAL,CAAgB,C;AAEZ,MAAO,eAAP,CACH,CACD,GAAI,UAAU,IAAV,GAAmB,YAAvB,CAAqC,CACjC,GAAI,UAAU,KAAV,GAAoB,GAAxB,CAA6B,CACzB,MAAO,iBAAP,CACH,CACD,GAAI,UAAU,KAAV,GAAoB,GAAxB,CAA6B,CACzB,WAAa,MAAM,MAAN,CAAa,MAAM,cAAN,CAAuB,CAApC,CAAb,CACA,GAAI,YACI,WAAW,IAAX,GAAoB,SADxB,GAEK,WAAW,KAAX,GAAqB,IAArB,EACA,WAAW,KAAX,GAAqB,OADrB,EAEA,WAAW,KAAX,GAAqB,KAFrB,EAGA,WAAW,KAAX,GAAqB,MAL1B,CAAJ,CAKuC,CACnC,MAAO,eAAP,CACH,CACD,MAAO,iBAAP,CACH,CACD,GAAI,UAAU,KAAV,GAAoB,GAAxB,CAA6B,C;;AAGzB,GAAI,MAAM,MAAN,CAAa,MAAM,cAAN,CAAuB,CAApC,GACI,MAAM,MAAN,CAAa,MAAM,cAAN,CAAuB,CAApC,EAAuC,IAAvC,GAAgD,SADxD,CACmE,C;AAE/D,WAAa,MAAM,MAAN,CAAa,MAAM,cAAN,CAAuB,CAApC,CAAb,CACA,GAAI,CAAC,UAAL,CAAiB,CACb,MAAO,iBAAP,CACH,CACJ,CAPD,IAOO,IAAI,MAAM,MAAN,CAAa,MAAM,cAAN,CAAuB,CAApC,GACH,MAAM,MAAN,CAAa,MAAM,cAAN,CAAuB,CAApC,EAAuC,IAAvC,GAAgD,SADjD,CAC4D,C;AAE/D,WAAa,MAAM,MAAN,CAAa,MAAM,cAAN,CAAuB,CAApC,CAAb,CACA,GAAI,CAAC,UAAL,CAAiB,CACb,MAAO,eAAP,CACH,CACJ,CAPM,IAOA,CACH,MAAO,iBAAP,CACH,C;;AAGD,GAAI,aAAa,OAAb,CAAqB,WAAW,KAAhC,GAA0C,CAA9C,CAAiD,C;AAE7C,MAAO,iBAAP,CACH,C;AAED,MAAO,eAAP,CACH,CACD,MAAO,eAAP,CACH,CACD,GAAI,UAAU,IAAV,GAAmB,SAAvB,CAAkC,CAC9B,MAAO,eAAP,CACH,CACD,MAAO,iBAAP,CACH,CAED,QAAS,QAAT,EAAmB,CACf,GAAI,GAAJ,CAEA,cAEA,GAAI,OAAS,MAAb,CAAqB,CACjB,MAAO,CACH,KAAM,MAAM,GADT,CAEH,WAAY,UAFT,CAGH,UAAW,SAHR,CAIH,MAAO,CAAC,KAAD,CAAQ,KAAR,CAJJ,CAAP,CAMH,CAED,GAAK,OAAO,UAAP,CAAkB,KAAlB,CAAL,C;AAGA,GAAI,KAAO,IAAP,EAAe,KAAO,IAAtB,EAA8B,KAAO,IAAzC,CAA+C,CAC3C,MAAO,iBAAP,CACH,C;AAGD,GAAI,KAAO,IAAP,EAAe,KAAO,IAA1B,CAAgC,CAC5B,MAAO,oBAAP,CACH,CAED,GAAI,kBAAkB,EAAlB,CAAJ,CAA2B,CACvB,MAAO,iBAAP,CACH,C;;AAID,GAAI,KAAO,IAAX,CAAiB,CACb,GAAI,eAAe,OAAO,UAAP,CAAkB,MAAQ,CAA1B,CAAf,CAAJ,CAAkD,CAC9C,MAAO,qBAAP,CACH,CACD,MAAO,iBAAP,CACH,CAED,GAAI,eAAe,EAAf,CAAJ,CAAwB,CACpB,MAAO,qBAAP,CACH,C;AAGD,GAAI,MAAM,QAAN,EAAkB,KAAO,IAA7B,CAAmC,CAC/B,MAAO,eAAP,CACH,CAED,MAAO,iBAAP,CACH,CAED,QAAS,aAAT,EAAwB,CACpB,GAAI,MAAJ,CAAW,GAAX,CAAgB,KAAhB,CAAuB,KAAvB,CAA8B,KAA9B,CAEA,cACA,MAAQ,KAAR,CACA,IAAM,CACF,MAAO,CACH,KAAM,UADH,CAEH,OAAQ,MAAQ,SAFb,CADL,CAAN,CAOA,MAAQ,SAAR,CACA,IAAI,GAAJ,CAAU,CACN,KAAM,UADA,CAEN,OAAQ,MAAQ,SAFV,CAAV,CAKA,GAAI,MAAM,IAAN,GAAe,MAAM,GAAzB,CAA8B,CAC1B,MAAQ,CAAC,MAAM,KAAN,CAAY,CAAZ,CAAD,CAAiB,MAAM,KAAN,CAAY,CAAZ,CAAjB,CAAR,CACA,MAAQ,OAAO,KAAP,CAAa,MAAM,KAAN,CAAY,CAAZ,CAAb,CAA6B,MAAM,KAAN,CAAY,CAAZ,CAA7B,CAAR,CACA,MAAM,MAAN,CAAa,IAAb,CAAkB,CACd,KAAM,UAAU,MAAM,IAAhB,CADQ,CAEd,MAAO,KAFO,CAGd,MAAO,KAHO,CAId,IAAK,GAJS,CAAlB,EAMH,CAED,MAAO,MAAP,CACH,CAED,QAAS,IAAT,EAAe,CACX,GAAI,MAAJ,CAEA,MAAQ,SAAR,CACA,MAAQ,MAAM,KAAN,CAAY,CAAZ,CAAR,CACA,WAAa,MAAM,UAAnB,CACA,UAAY,MAAM,SAAlB,CAEA,UAAa,MAAO,OAAM,MAAb,GAAwB,WAAzB,CAAwC,cAAxC,CAAyD,SAArE,CAEA,MAAQ,MAAM,KAAN,CAAY,CAAZ,CAAR,CACA,WAAa,MAAM,UAAnB,CACA,UAAY,MAAM,SAAlB,CAEA,MAAO,MAAP,CACH,CAED,QAAS,KAAT,EAAgB,CACZ,GAAI,IAAJ,CAAS,IAAT,CAAe,KAAf,CAEA,IAAM,KAAN,CACA,KAAO,UAAP,CACA,MAAQ,SAAR,CACA,UAAa,MAAO,OAAM,MAAb,GAAwB,WAAzB,CAAwC,cAAxC,CAAyD,SAArE,CACA,MAAQ,GAAR,CACA,WAAa,IAAb,CACA,UAAY,KAAZ,CACH,CAED,mBAAqB,CAEjB,KAAM,YAFW,CAIjB,UAAW,oBAAY,CACnB,cACA,GAAI,MAAM,GAAV,CAAe,CACX,MAAM,WAAN,CAAkB,IAAlB,CAAuB,MAAQ,SAA/B,EACA,MAAM,WAAN,CAAkB,IAAlB,CAAuB,UAAvB,EACH,CACD,GAAI,MAAM,KAAV,CAAiB,CACb,MAAM,WAAN,CAAkB,IAAlB,CAAuB,KAAvB,EACH,CACJ,CAbgB,CAejB,eAAgB,wBAAU,IAAV,CAAgB,CAC5B,GAAI,EAAJ,CAAO,QAAP,CAAiB,GAAjB,CAAsB,GAAtB,CAA2B,SAA3B,CAEA,GAAI,MAAO,MAAK,IAAZ,GAAqB,WAArB,EAAoC,KAAK,IAAL,GAAc,OAAO,OAA7D,CAAsE,CAClE,OACH,C;AAGD,OAEA,IAAK,EAAI,CAAT,CAAY,EAAI,MAAM,eAAN,CAAsB,MAAtC,CAA8C,EAAE,CAAhD,CAAmD,CAC/C,SAAW,MAAM,eAAN,CAAsB,CAAtB,CAAX,CACA,GAAI,KAAK,KAAL,CAAW,CAAX,GAAiB,SAAS,OAAT,CAAiB,KAAjB,CAAuB,CAAvB,CAArB,CAAgD,CAC5C,UAAY,SAAS,OAArB,CACA,GAAI,SAAJ,CAAe,CACX,IAAM,UAAU,KAAV,CAAgB,CAAhB,CAAN,CACA,IAAM,UAAU,KAAV,CAAgB,CAAhB,EAAqB,GAA3B,CACA,GAAI,KAAK,KAAL,CAAW,CAAX,GAAiB,GAAjB,EAAyB,KAAK,KAAL,CAAW,CAAX,EAAgB,KAAK,KAAL,CAAW,CAAX,CAAhB,EAAiC,GAA9D,CAAoE,CAChE,SAAS,OAAT,CAAmB,IAAnB,CACH,CACJ,CAND,IAMO,CACH,SAAS,OAAT,CAAmB,IAAnB,CACH,CACJ,CACD,GAAI,KAAK,KAAL,CAAW,CAAX,GAAiB,SAAS,OAAT,CAAiB,KAAjB,CAAuB,CAAvB,CAArB,CAAgD,CAC5C,UAAY,SAAS,QAArB,CACA,GAAI,SAAJ,CAAe,CACX,IAAM,UAAU,KAAV,CAAgB,CAAhB,CAAN,CACA,IAAM,UAAU,KAAV,CAAgB,CAAhB,EAAqB,GAA3B,CACA,GAAI,KAAK,KAAL,CAAW,CAAX,GAAiB,GAAjB,EAAyB,KAAK,KAAL,CAAW,CAAX,EAAgB,KAAK,KAAL,CAAW,CAAX,CAAhB,EAAiC,GAA9D,CAAoE,CAChE,SAAS,QAAT,CAAoB,IAApB,CACH,CACJ,CAND,IAMO,CACH,SAAS,QAAT,CAAoB,IAApB,CACH,CACJ,CACJ,CACJ,CApDgB,CAsDjB,QAAS,iBAAU,IAAV,CAAgB,CACrB,GAAI,MAAM,KAAV,CAAiB,CACb,KAAK,KAAL,CAAa,CAAC,MAAM,WAAN,CAAkB,GAAlB,EAAD,CAA0B,KAA1B,CAAb,CACH,CACD,GAAI,MAAM,GAAV,CAAe,CACX,KAAK,GAAL,CAAW,CACP,MAAO,CACH,KAAM,MAAM,WAAN,CAAkB,GAAlB,EADH,CAEH,OAAQ,MAAM,WAAN,CAAkB,GAAlB,EAFL,CADA,CAKP,IAAK,CACD,KAAM,UADL,CAED,OAAQ,MAAQ,SAFf,CALE,CAAX,CAUA,KAAK,WAAL,CAAiB,IAAjB,EACH,CACD,GAAI,MAAM,aAAV,CAAyB,CACrB,KAAK,cAAL,CAAoB,IAApB,EACH,CACD,MAAO,KAAP,CACH,CA3EgB,CA6EjB,UAAW,mBAAU,IAAV,CAAgB,CACvB,GAAI,KAAK,KAAL,EAAc,KAAK,GAAvB,CAA4B,CACxB,GAAI,MAAM,GAAV,CAAe,CACX,MAAM,WAAN,CAAkB,GAAlB,GACA,MAAM,WAAN,CAAkB,GAAlB,GACH,CACD,GAAI,MAAM,KAAV,CAAiB,CACb,MAAM,WAAN,CAAkB,GAAlB,GACH,CACJ,CARD,IAQO,CACH,KAAK,OAAL,CAAa,IAAb,EACH,CACD,MAAO,KAAP,CACH,CA1FgB,CA4FjB,YAAa,qBAAU,IAAV,CAAgB,CACzB,GAAI,MAAM,MAAV,CAAkB,CACd,KAAK,GAAL,CAAS,MAAT,CAAkB,MAAM,MAAxB,CACH,CACD,MAAO,KAAP,CACH,CAjGgB,CAmGjB,sBAAuB,+BAAU,QAAV,CAAoB,CACvC,MAAO,CACH,KAAM,OAAO,eADV,CAEH,SAAU,QAFP,CAAP,CAIH,CAxGgB,CA0GjB,2BAA4B,oCAAU,QAAV,CAAoB,IAApB,CAA0B,KAA1B,CAAiC,CACzD,MAAO,CACH,KAAM,OAAO,oBADV,CAEH,SAAU,QAFP,CAGH,KAAM,IAHH,CAIH,MAAO,KAJJ,CAAP,CAMH,CAjHgB,CAmHjB,uBAAwB,gCAAU,QAAV,CAAoB,IAApB,CAA0B,KAA1B,CAAiC,CACrD,GAAI,MAAQ,WAAa,IAAb,EAAqB,WAAa,IAAnC,CAA2C,OAAO,iBAAlD,CACC,OAAO,gBADnB,CAEA,MAAO,CACH,KAAM,IADH,CAEH,SAAU,QAFP,CAGH,KAAM,IAHH,CAIH,MAAO,KAJJ,CAAP,CAMH,CA5HgB,CA8HjB,qBAAsB,8BAAU,IAAV,CAAgB,CAClC,MAAO,CACH,KAAM,OAAO,cADV,CAEH,KAAM,IAFH,CAAP,CAIH,CAnIgB,CAqIjB,qBAAsB,8BAAU,KAAV,CAAiB,CACnC,MAAO,CACH,KAAM,OAAO,cADV,CAEH,MAAO,KAFJ,CAAP,CAIH,CA1IgB,CA4IjB,qBAAsB,8BAAU,MAAV,CAAkB,IAAlB,CAAwB,CAC1C,MAAO,CACH,KAAM,OAAO,cADV,CAEH,OAAQ,MAFL,CAGH,YAAa,IAHV,CAAP,CAKH,CAlJgB,CAoJjB,kBAAmB,2BAAU,KAAV,CAAiB,IAAjB,CAAuB,CACtC,MAAO,CACH,KAAM,OAAO,WADV,CAEH,MAAO,KAFJ,CAGH,KAAM,IAHH,CAAP,CAKH,CA1JgB,CA4JjB,4BAA6B,qCAAU,IAAV,CAAgB,UAAhB,CAA4B,SAA5B,CAAuC,CAChE,MAAO,CACH,KAAM,OAAO,qBADV,CAEH,KAAM,IAFH,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAAP,CAMH,CAnKgB,CAqKjB,wBAAyB,iCAAU,KAAV,CAAiB,CACtC,MAAO,CACH,KAAM,OAAO,iBADV,CAEH,MAAO,KAFJ,CAAP,CAIH,CA1KgB,CA4KjB,wBAAyB,kCAAY,CACjC,MAAO,CACH,KAAM,OAAO,iBADV,CAAP,CAGH,CAhLgB,CAkLjB,uBAAwB,gCAAU,IAAV,CAAgB,IAAhB,CAAsB,CAC1C,MAAO,CACH,KAAM,OAAO,gBADV,CAEH,KAAM,IAFH,CAGH,KAAM,IAHH,CAAP,CAKH,CAxLgB,CA0LjB,qBAAsB,+BAAY,CAC9B,MAAO,CACH,KAAM,OAAO,cADV,CAAP,CAGH,CA9LgB,CAgMjB,0BAA2B,mCAAU,UAAV,CAAsB,CAC7C,MAAO,CACH,KAAM,OAAO,mBADV,CAEH,WAAY,UAFT,CAAP,CAIH,CArMgB,CAuMjB,mBAAoB,4BAAU,IAAV,CAAgB,IAAhB,CAAsB,MAAtB,CAA8B,IAA9B,CAAoC,CACpD,MAAO,CACH,KAAM,OAAO,YADV,CAEH,KAAM,IAFH,CAGH,KAAM,IAHH,CAIH,OAAQ,MAJL,CAKH,KAAM,IALH,CAAP,CAOH,CA/MgB,CAiNjB,qBAAsB,8BAAU,IAAV,CAAgB,KAAhB,CAAuB,IAAvB,CAA6B,CAC/C,MAAO,CACH,KAAM,OAAO,cADV,CAEH,KAAM,IAFH,CAGH,MAAO,KAHJ,CAIH,KAAM,IAJH,CAKH,KAAM,KALH,CAAP,CAOH,CAzNgB,CA2NjB,0BAA2B,mCAAU,EAAV,CAAc,MAAd,CAAsB,QAAtB,CAAgC,IAAhC,CAAsC,CAC7D,MAAO,CACH,KAAM,OAAO,mBADV,CAEH,GAAI,EAFD,CAGH,OAAQ,MAHL,CAIH,SAAU,QAJP,CAKH,KAAM,IALH,CAMH,KAAM,IANH,CAOH,UAAW,KAPR,CAQH,WAAY,KART,CAAP,CAUH,CAtOgB,CAwOjB,yBAA0B,kCAAU,EAAV,CAAc,MAAd,CAAsB,QAAtB,CAAgC,IAAhC,CAAsC,CAC5D,MAAO,CACH,KAAM,OAAO,kBADV,CAEH,GAAI,EAFD,CAGH,OAAQ,MAHL,CAIH,SAAU,QAJP,CAKH,KAAM,IALH,CAMH,KAAM,IANH,CAOH,UAAW,KAPR,CAQH,WAAY,KART,CAAP,CAUH,CAnPgB,CAqPjB,iBAAkB,0BAAU,IAAV,CAAgB,CAC9B,MAAO,CACH,KAAM,OAAO,UADV,CAEH,KAAM,IAFH,CAAP,CAIH,CA1PgB,CA4PjB,kBAAmB,2BAAU,IAAV,CAAgB,UAAhB,CAA4B,SAA5B,CAAuC,CACtD,MAAO,CACH,KAAM,OAAO,WADV,CAEH,KAAM,IAFH,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAAP,CAMH,CAnQgB,CAqQjB,uBAAwB,gCAAU,KAAV,CAAiB,IAAjB,CAAuB,CAC3C,MAAO,CACH,KAAM,OAAO,gBADV,CAEH,MAAO,KAFJ,CAGH,KAAM,IAHH,CAAP,CAKH,CA3QgB,CA6QjB,cAAe,uBAAU,KAAV,CAAiB,CAC5B,MAAO,CACH,KAAM,OAAO,OADV,CAEH,MAAO,MAAM,KAFV,CAGH,IAAK,OAAO,KAAP,CAAa,MAAM,KAAN,CAAY,CAAZ,CAAb,CAA6B,MAAM,KAAN,CAAY,CAAZ,CAA7B,CAHF,CAAP,CAKH,CAnRgB,CAqRjB,uBAAwB,gCAAU,QAAV,CAAoB,MAApB,CAA4B,QAA5B,CAAsC,CAC1D,MAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,WAAa,GAFpB,CAGH,OAAQ,MAHL,CAIH,SAAU,QAJP,CAAP,CAMH,CA5RgB,CA8RjB,oBAAqB,6BAAU,MAAV,CAAkB,IAAlB,CAAwB,CACzC,MAAO,CACH,KAAM,OAAO,aADV,CAEH,OAAQ,MAFL,CAGH,YAAa,IAHV,CAAP,CAKH,CApSgB,CAsSjB,uBAAwB,gCAAU,UAAV,CAAsB,CAC1C,MAAO,CACH,KAAM,OAAO,gBADV,CAEH,WAAY,UAFT,CAAP,CAIH,CA3SgB,CA6SjB,wBAAyB,iCAAU,QAAV,CAAoB,QAApB,CAA8B,CACnD,MAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,QAFP,CAGH,SAAU,QAHP,CAIH,OAAQ,KAJL,CAAP,CAMH,CApTgB,CAsTjB,cAAe,uBAAU,IAAV,CAAgB,CAC3B,MAAO,CACH,KAAM,OAAO,OADV,CAEH,KAAM,IAFH,CAAP,CAIH,CA3TgB,CA6TjB,eAAgB,wBAAU,IAAV,CAAgB,GAAhB,CAAqB,KAArB,CAA4B,CACxC,MAAO,CACH,KAAM,OAAO,QADV,CAEH,IAAK,GAFF,CAGH,MAAO,KAHJ,CAIH,KAAM,IAJH,CAAP,CAMH,CApUgB,CAsUjB,sBAAuB,+BAAU,QAAV,CAAoB,CACvC,MAAO,CACH,KAAM,OAAO,eADV,CAEH,SAAU,QAFP,CAAP,CAIH,CA3UgB,CA6UjB,yBAA0B,kCAAU,WAAV,CAAuB,CAC7C,MAAO,CACH,KAAM,OAAO,kBADV,CAEH,YAAa,WAFV,CAAP,CAIH,CAlVgB,CAoVjB,iBAAkB,0BAAU,IAAV,CAAgB,UAAhB,CAA4B,CAC1C,MAAO,CACH,KAAM,OAAO,UADV,CAEH,KAAM,IAFH,CAGH,WAAY,UAHT,CAAP,CAKH,CA1VgB,CA4VjB,sBAAuB,+BAAU,YAAV,CAAwB,KAAxB,CAA+B,CAClD,MAAO,CACH,KAAM,OAAO,eADV,CAEH,aAAc,YAFX,CAGH,MAAO,KAHJ,CAAP,CAKH,CAlWgB,CAoWjB,qBAAsB,+BAAY,CAC9B,MAAO,CACH,KAAM,OAAO,cADV,CAAP,CAGH,CAxWgB,CA0WjB,qBAAsB,8BAAU,QAAV,CAAoB,CACtC,MAAO,CACH,KAAM,OAAO,cADV,CAEH,SAAU,QAFP,CAAP,CAIH,CA/WgB,CAiXjB,mBAAoB,4BAAU,KAAV,CAAiB,eAAjB,CAAkC,QAAlC,CAA4C,SAA5C,CAAuD,CACvE,MAAO,CACH,KAAM,OAAO,YADV,CAEH,MAAO,KAFJ,CAGH,gBAAiB,eAHd,CAIH,SAAU,QAJP,CAKH,UAAW,SALR,CAAP,CAOH,CAzXgB,CA2XjB,sBAAuB,+BAAU,QAAV,CAAoB,QAApB,CAA8B,CACjD,GAAI,WAAa,IAAb,EAAqB,WAAa,IAAtC,CAA4C,CACxC,MAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,QAFP,CAGH,SAAU,QAHP,CAIH,OAAQ,IAJL,CAAP,CAMH,CACD,MAAO,CACH,KAAM,OAAO,eADV,CAEH,SAAU,QAFP,CAGH,SAAU,QAHP,CAIH,OAAQ,IAJL,CAAP,CAMH,CA1YgB,CA4YjB,0BAA2B,mCAAU,YAAV,CAAwB,IAAxB,CAA8B,CACrD,MAAO,CACH,KAAM,OAAO,mBADV,CAEH,aAAc,YAFX,CAGH,KAAM,IAHH,CAAP,CAKH,CAlZgB,CAoZjB,yBAA0B,kCAAU,EAAV,CAAc,IAAd,CAAoB,CAC1C,MAAO,CACH,KAAM,OAAO,kBADV,CAEH,GAAI,EAFD,CAGH,KAAM,IAHH,CAAP,CAKH,CA1ZgB,CA4ZjB,qBAAsB,8BAAU,IAAV,CAAgB,IAAhB,CAAsB,CACxC,MAAO,CACH,KAAM,OAAO,cADV,CAEH,KAAM,IAFH,CAGH,KAAM,IAHH,CAAP,CAKH,CAlagB,CAoajB,oBAAqB,6BAAU,MAAV,CAAkB,IAAlB,CAAwB,CACzC,MAAO,CACH,KAAM,OAAO,aADV,CAEH,OAAQ,MAFL,CAGH,KAAM,IAHH,CAAP,CAKH,CA1agB,CAArB,C;AA+aA,QAAS,mBAAT,EAA8B,CAC1B,GAAI,IAAJ,CAAS,IAAT,CAAe,KAAf,CAAsB,KAAtB,CAEA,IAAM,KAAN,CACA,KAAO,UAAP,CACA,MAAQ,SAAR,CACA,cACA,MAAQ,aAAe,IAAvB,CACA,MAAQ,GAAR,CACA,WAAa,IAAb,CACA,UAAY,KAAZ,CAEA,MAAO,MAAP,CACH,C;AAID,QAAS,WAAT,CAAoB,KAApB,CAA2B,aAA3B,CAA0C,CACtC,GAAI,MAAJ,CACI,KAAO,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,CAAsC,CAAtC,CADX,CAEI,IAAM,cAAc,OAAd,CACF,QADE,CAEF,SAAU,KAAV,CAAiB,KAAjB,CAAwB,CACpB,OAAO,MAAQ,KAAK,MAApB,CAA4B,oCAA5B,EACA,MAAO,MAAK,KAAL,CAAP,CACH,CALC,CAFV,CAUA,GAAI,MAAO,OAAM,UAAb,GAA4B,QAAhC,CAA0C,CACtC,MAAQ,GAAI,MAAJ,CAAU,QAAU,MAAM,UAAhB,CAA6B,IAA7B,CAAoC,GAA9C,CAAR,CACA,MAAM,KAAN,CAAc,MAAM,KAAN,CAAY,CAAZ,CAAd,CACA,MAAM,UAAN,CAAmB,MAAM,UAAzB,CACA,MAAM,MAAN,CAAe,MAAM,KAAN,CAAY,CAAZ,EAAiB,SAAjB,CAA6B,CAA5C,CACH,CALD,IAKO,CACH,MAAQ,GAAI,MAAJ,CAAU,QAAU,UAAV,CAAuB,IAAvB,CAA8B,GAAxC,CAAR,CACA,MAAM,KAAN,CAAc,KAAd,CACA,MAAM,UAAN,CAAmB,UAAnB,CACA,MAAM,MAAN,CAAe,MAAQ,SAAR,CAAoB,CAAnC,CACH,CAED,MAAM,WAAN,CAAoB,GAApB,CACA,KAAM,MAAN,CACH,CAED,QAAS,mBAAT,EAA8B,CAC1B,GAAI,CACA,WAAW,KAAX,CAAiB,IAAjB,CAAuB,SAAvB,EACH,CAAC,MAAO,CAAP,CAAU,CACR,GAAI,MAAM,MAAV,CAAkB,CACd,MAAM,MAAN,CAAa,IAAb,CAAkB,CAAlB,EACH,CAFD,IAEO,CACH,KAAM,EAAN,CACH,CACJ,CACJ,C;AAKD,QAAS,gBAAT,CAAyB,KAAzB,CAAgC,CAC5B,GAAI,MAAM,IAAN,GAAe,MAAM,GAAzB,CAA8B,CAC1B,WAAW,KAAX,CAAkB,SAAS,aAA3B,EACH,CAED,GAAI,MAAM,IAAN,GAAe,MAAM,cAAzB,CAAyC,CACrC,WAAW,KAAX,CAAkB,SAAS,gBAA3B,EACH,CAED,GAAI,MAAM,IAAN,GAAe,MAAM,aAAzB,CAAwC,CACpC,WAAW,KAAX,CAAkB,SAAS,gBAA3B,EACH,CAED,GAAI,MAAM,IAAN,GAAe,MAAM,UAAzB,CAAqC,CACjC,WAAW,KAAX,CAAkB,SAAS,oBAA3B,EACH,CAED,GAAI,MAAM,IAAN,GAAe,MAAM,OAAzB,CAAkC,CAC9B,GAAI,qBAAqB,MAAM,KAA3B,CAAJ,CAAuC,CACnC,WAAW,KAAX,CAAkB,SAAS,kBAA3B,EACH,CAFD,IAEO,IAAI,QAAU,yBAAyB,MAAM,KAA/B,CAAd,CAAqD,CACxD,mBAAmB,KAAnB,CAA0B,SAAS,kBAAnC,EACA,OACH,CACD,WAAW,KAAX,CAAkB,SAAS,eAA3B,CAA4C,MAAM,KAAlD,EACH,C;AAGD,WAAW,KAAX,CAAkB,SAAS,eAA3B,CAA4C,MAAM,KAAlD,EACH,C;;AAKD,QAAS,OAAT,CAAgB,KAAhB,CAAuB,CACnB,GAAI,OAAQ,KAAZ,CACA,GAAI,MAAM,IAAN,GAAe,MAAM,UAArB,EAAmC,MAAM,KAAN,GAAgB,KAAvD,CAA8D,CAC1D,gBAAgB,KAAhB,EACH,CACJ,C;;AAKD,QAAS,cAAT,CAAuB,OAAvB,CAAgC,CAC5B,GAAI,OAAQ,KAAZ,CACA,GAAI,MAAM,IAAN,GAAe,MAAM,OAArB,EAAgC,MAAM,KAAN,GAAgB,OAApD,CAA6D,CACzD,gBAAgB,KAAhB,EACH,CACJ,C;AAID,QAAS,MAAT,CAAe,KAAf,CAAsB,CAClB,MAAO,WAAU,IAAV,GAAmB,MAAM,UAAzB,EAAuC,UAAU,KAAV,GAAoB,KAAlE,CACH,C;AAID,QAAS,aAAT,CAAsB,OAAtB,CAA+B,CAC3B,MAAO,WAAU,IAAV,GAAmB,MAAM,OAAzB,EAAoC,UAAU,KAAV,GAAoB,OAA/D,CACH,C;AAID,QAAS,YAAT,EAAuB,CACnB,GAAI,GAAJ,CAEA,GAAI,UAAU,IAAV,GAAmB,MAAM,UAA7B,CAAyC,CACrC,MAAO,MAAP,CACH,CACD,GAAK,UAAU,KAAf,CACA,MAAO,MAAO,GAAP,EACH,KAAO,IADJ,EAEH,KAAO,IAFJ,EAGH,KAAO,IAHJ,EAIH,KAAO,IAJJ,EAKH,KAAO,IALJ,EAMH,KAAO,KANJ,EAOH,KAAO,KAPJ,EAQH,KAAO,MARJ,EASH,KAAO,IATJ,EAUH,KAAO,IAVJ,EAWH,KAAO,IAXX,CAYH,CAED,QAAS,iBAAT,EAA4B,CACxB,GAAI,KAAJ,C;AAGA,GAAI,OAAO,UAAP,CAAkB,KAAlB,IAA6B,IAAjC,CAAuC,CACnC,MACA,OACH,CAED,KAAO,UAAP,CACA,cACA,GAAI,aAAe,IAAnB,CAAyB,CACrB,OACH,CAED,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACA,OACH,CAED,GAAI,UAAU,IAAV,GAAmB,MAAM,GAAzB,EAAgC,CAAC,MAAM,GAAN,CAArC,CAAiD,CAC7C,gBAAgB,SAAhB,EACH,CACJ,C;AAID,QAAS,eAAT,CAAwB,IAAxB,CAA8B,CAC1B,MAAO,MAAK,IAAL,GAAc,OAAO,UAArB,EAAmC,KAAK,IAAL,GAAc,OAAO,gBAA/D,CACH,C;AAID,QAAS,sBAAT,EAAiC,CAC7B,GAAI,UAAW,EAAf,CAEA,OAAO,GAAP,EAEA,MAAO,CAAC,MAAM,GAAN,CAAR,CAAoB,CAChB,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACA,SAAS,IAAT,CAAc,IAAd,EACH,CAHD,IAGO,CACH,SAAS,IAAT,CAAc,2BAAd,EAEA,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,OAAO,GAAP,EACH,CACJ,CACJ,CAED,OAAO,GAAP,EAEA,MAAO,UAAS,qBAAT,CAA+B,QAA/B,CAAP,CACH,C;AAID,QAAS,sBAAT,CAA+B,KAA/B,CAAsC,KAAtC,CAA6C,CACzC,GAAI,eAAJ,CAAoB,IAApB,CAEA,eAAiB,MAAjB,CACA,SAAS,SAAT,GACA,KAAO,6BAAP,CACA,GAAI,OAAS,MAAT,EAAmB,iBAAiB,MAAM,CAAN,EAAS,IAA1B,CAAvB,CAAwD,CACpD,mBAAmB,KAAnB,CAA0B,SAAS,eAAnC,EACH,CACD,OAAS,cAAT,CACA,MAAO,UAAS,OAAT,CAAiB,SAAS,wBAAT,CAAkC,IAAlC,CAAwC,KAAxC,CAA+C,EAA/C,CAAmD,IAAnD,CAAjB,CAAP,CACH,CAED,QAAS,uBAAT,EAAkC,CAC9B,GAAI,MAAJ,CAEA,SAAS,SAAT,GACA,MAAQ,KAAR,C;;AAKA,GAAI,MAAM,IAAN,GAAe,MAAM,aAArB,EAAsC,MAAM,IAAN,GAAe,MAAM,cAA/D,CAA+E,CAC3E,GAAI,QAAU,MAAM,KAApB,CAA2B,CACvB,mBAAmB,KAAnB,CAA0B,SAAS,kBAAnC,EACH,CACD,MAAO,UAAS,OAAT,CAAiB,SAAS,aAAT,CAAuB,KAAvB,CAAjB,CAAP,CACH,CAED,MAAO,UAAS,OAAT,CAAiB,SAAS,gBAAT,CAA0B,MAAM,KAAhC,CAAjB,CAAP,CACH,CAED,QAAS,oBAAT,EAA+B,CAC3B,GAAI,MAAJ,CAAW,GAAX,CAAgB,EAAhB,CAAoB,KAApB,CAA2B,KAA3B,CAEA,MAAQ,SAAR,CACA,SAAS,SAAT,GAEA,GAAI,MAAM,IAAN,GAAe,MAAM,UAAzB,CAAqC,CAEjC,GAAK,wBAAL,C;AAIA,GAAI,MAAM,KAAN,GAAgB,KAAhB,EAAyB,CAAC,MAAM,GAAN,CAA9B,CAA0C,CACtC,IAAM,wBAAN,CACA,OAAO,GAAP,EACA,OAAO,GAAP,EACA,MAAQ,sBAAsB,EAAtB,CAAR,CACA,MAAO,UAAS,OAAT,CAAiB,SAAS,cAAT,CAAwB,KAAxB,CAA+B,GAA/B,CAAoC,KAApC,CAAjB,CAAP,CACH,CACD,GAAI,MAAM,KAAN,GAAgB,KAAhB,EAAyB,CAAC,MAAM,GAAN,CAA9B,CAA0C,CACtC,IAAM,wBAAN,CACA,OAAO,GAAP,EACA,MAAQ,SAAR,CACA,GAAI,MAAM,IAAN,GAAe,MAAM,UAAzB,CAAqC,CACjC,OAAO,GAAP,EACA,mBAAmB,KAAnB,CAA0B,SAAS,eAAnC,CAAoD,MAAM,KAA1D,EACA,MAAQ,sBAAsB,EAAtB,CAAR,CACH,CAJD,IAIO,CACH,MAAQ,CAAE,yBAAF,CAAR,CACA,OAAO,GAAP,EACA,MAAQ,sBAAsB,KAAtB,CAA6B,KAA7B,CAAR,CACH,CACD,MAAO,UAAS,OAAT,CAAiB,SAAS,cAAT,CAAwB,KAAxB,CAA+B,GAA/B,CAAoC,KAApC,CAAjB,CAAP,CACH,CACD,OAAO,GAAP,EACA,MAAQ,2BAAR,CACA,MAAO,UAAS,OAAT,CAAiB,SAAS,cAAT,CAAwB,MAAxB,CAAgC,EAAhC,CAAoC,KAApC,CAAjB,CAAP,CACH,CACD,GAAI,MAAM,IAAN,GAAe,MAAM,GAArB,EAA4B,MAAM,IAAN,GAAe,MAAM,UAArD,CAAiE,CAC7D,gBAAgB,KAAhB,EACH,CAFD,IAEO,CACH,IAAM,wBAAN,CACA,OAAO,GAAP,EACA,MAAQ,2BAAR,CACA,MAAO,UAAS,OAAT,CAAiB,SAAS,cAAT,CAAwB,MAAxB,CAAgC,GAAhC,CAAqC,KAArC,CAAjB,CAAP,CACH,CACJ,CAED,QAAS,uBAAT,EAAkC,CAC9B,GAAI,YAAa,EAAjB,CAAqB,QAArB,CAA+B,IAA/B,CAAqC,GAArC,CAA0C,IAA1C,CAAgD,IAAM,EAAtD,CAA0D,SAAW,MAArE,CAEA,OAAO,GAAP,EAEA,MAAO,CAAC,MAAM,GAAN,CAAR,CAAoB,CAChB,SAAW,qBAAX,CAEA,GAAI,SAAS,GAAT,CAAa,IAAb,GAAsB,OAAO,UAAjC,CAA6C,CACzC,KAAO,SAAS,GAAT,CAAa,IAApB,CACH,CAFD,IAEO,CACH,KAAO,SAAS,SAAS,GAAT,CAAa,KAAtB,CAAP,CACH,CACD,KAAQ,SAAS,IAAT,GAAkB,MAAnB,CAA6B,aAAa,IAA1C,CAAkD,SAAS,IAAT,GAAkB,KAAnB,CAA4B,aAAa,GAAzC,CAA+C,aAAa,GAApH,CAEA,IAAM,IAAM,IAAZ,CACA,GAAI,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,GAArC,CAA0C,GAA1C,CAAJ,CAAoD,CAChD,GAAI,IAAI,GAAJ,IAAa,aAAa,IAA9B,CAAoC,CAChC,GAAI,QAAU,OAAS,aAAa,IAApC,CAA0C,CACtC,mBAAmB,EAAnB,CAAuB,SAAS,uBAAhC,EACH,CAFD,IAEO,IAAI,OAAS,aAAa,IAA1B,CAAgC,CACnC,mBAAmB,EAAnB,CAAuB,SAAS,oBAAhC,EACH,CACJ,CAND,IAMO,CACH,GAAI,OAAS,aAAa,IAA1B,CAAgC,CAC5B,mBAAmB,EAAnB,CAAuB,SAAS,oBAAhC,EACH,CAFD,IAEO,IAAI,IAAI,GAAJ,EAAW,IAAf,CAAqB,CACxB,mBAAmB,EAAnB,CAAuB,SAAS,cAAhC,EACH,CACJ,CACD,IAAI,GAAJ,GAAY,IAAZ,CACH,CAfD,IAeO,CACH,IAAI,GAAJ,EAAW,IAAX,CACH,CAED,WAAW,IAAX,CAAgB,QAAhB,EAEA,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,OAAO,GAAP,EACH,CACJ,CAED,OAAO,GAAP,EAEA,MAAO,UAAS,sBAAT,CAAgC,UAAhC,CAAP,CACH,C;AAID,QAAS,qBAAT,EAAgC,CAC5B,GAAI,KAAJ,CAEA,OAAO,GAAP,EAEA,KAAO,iBAAP,CAEA,OAAO,GAAP,EAEA,MAAO,KAAP,CACH,C;AAKD,QAAS,uBAAT,EAAkC,CAC9B,GAAI,KAAJ,CAAU,KAAV,CAAiB,IAAjB,CAEA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MAAO,uBAAP,CACH,CAED,KAAO,UAAU,IAAjB,CACA,SAAS,SAAT,GAEA,GAAI,OAAS,MAAM,UAAnB,CAA+B,CAC3B,KAAQ,SAAS,gBAAT,CAA0B,MAAM,KAAhC,CAAR,CACH,CAFD,IAEO,IAAI,OAAS,MAAM,aAAf,EAAgC,OAAS,MAAM,cAAnD,CAAmE,CACtE,GAAI,QAAU,UAAU,KAAxB,CAA+B,CAC3B,mBAAmB,SAAnB,CAA8B,SAAS,kBAAvC,EACH,CACD,KAAO,SAAS,aAAT,CAAuB,KAAvB,CAAP,CACH,CALM,IAKA,IAAI,OAAS,MAAM,OAAnB,CAA4B,CAC/B,GAAI,aAAa,MAAb,CAAJ,CAA0B,CACtB,MACA,KAAO,SAAS,oBAAT,EAAP,CACH,CAHD,IAGO,IAAI,aAAa,UAAb,CAAJ,CAA8B,CACjC,KAAO,yBAAP,CACH,CACJ,CAPM,IAOA,IAAI,OAAS,MAAM,cAAnB,CAAmC,CACtC,MAAQ,KAAR,CACA,MAAM,KAAN,CAAe,MAAM,KAAN,GAAgB,MAA/B,CACA,KAAO,SAAS,aAAT,CAAuB,KAAvB,CAAP,CACH,CAJM,IAIA,IAAI,OAAS,MAAM,WAAnB,CAAgC,CACnC,MAAQ,KAAR,CACA,MAAM,KAAN,CAAc,IAAd,CACA,KAAO,SAAS,aAAT,CAAuB,KAAvB,CAAP,CACH,CAJM,IAIA,IAAI,MAAM,GAAN,CAAJ,CAAgB,CACnB,KAAO,uBAAP,CACH,CAFM,IAEA,IAAI,MAAM,GAAN,CAAJ,CAAgB,CACnB,KAAO,wBAAP,CACH,CAFM,IAEA,IAAI,MAAM,GAAN,GAAc,MAAM,IAAN,CAAlB,CAA+B,CAClC,GAAI,MAAO,OAAM,MAAb,GAAwB,WAA5B,CAAyC,CACrC,KAAO,SAAS,aAAT,CAAuB,cAAvB,CAAP,CACH,CAFD,IAEO,CACH,KAAO,SAAS,aAAT,CAAuB,YAAvB,CAAP,CACH,CACD,OACH,CAED,GAAI,IAAJ,CAAU,CACN,MAAO,UAAS,OAAT,CAAiB,IAAjB,CAAP,CACH,CAED,gBAAgB,KAAhB,EACH,C;AAID,QAAS,eAAT,EAA0B,CACtB,GAAI,MAAO,EAAX,CAEA,OAAO,GAAP,EAEA,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,MAAO,MAAQ,MAAf,CAAuB,CACnB,KAAK,IAAL,CAAU,2BAAV,EACA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACH,CACD,OAAO,GAAP,EACH,CACJ,CAED,OAAO,GAAP,EAEA,MAAO,KAAP,CACH,CAED,QAAS,yBAAT,EAAoC,CAChC,GAAI,MAAJ,CAEA,SAAS,SAAT,GACA,MAAQ,KAAR,CAEA,GAAI,CAAC,iBAAiB,KAAjB,CAAL,CAA8B,CAC1B,gBAAgB,KAAhB,EACH,CAED,MAAO,UAAS,OAAT,CAAiB,SAAS,gBAAT,CAA0B,MAAM,KAAhC,CAAjB,CAAP,CACH,CAED,QAAS,uBAAT,EAAkC,CAC9B,OAAO,GAAP,EAEA,MAAO,2BAAP,CACH,CAED,QAAS,oBAAT,EAA+B,CAC3B,GAAI,KAAJ,CAEA,OAAO,GAAP,EAEA,KAAO,iBAAP,CAEA,OAAO,GAAP,EAEA,MAAO,KAAP,CACH,CAED,QAAS,mBAAT,EAA8B,CAC1B,GAAI,OAAJ,CAAY,IAAZ,CAEA,SAAS,SAAT,GACA,cAAc,KAAd,EACA,OAAS,6BAAT,CACA,KAAO,MAAM,GAAN,EAAa,gBAAb,CAAgC,EAAvC,CAEA,MAAO,UAAS,OAAT,CAAiB,SAAS,mBAAT,CAA6B,MAA7B,CAAqC,IAArC,CAAjB,CAAP,CACH,CAED,QAAS,qCAAT,EAAgD,CAC5C,GAAI,OAAJ,CAAY,eAAZ,CAA6B,IAA7B,CAAmC,IAAnC,CAAyC,QAAzC,CAEA,OAAS,sBAAT,CAEA,gBAAkB,MAAM,OAAxB,CACA,MAAM,OAAN,CAAgB,IAAhB,CACA,KAAO,aAAa,KAAb,EAAsB,oBAAtB,CAA6C,wBAApD,CACA,MAAM,OAAN,CAAgB,eAAhB,CAEA,MAAO,MAAM,GAAN,GAAc,MAAM,GAAN,CAAd,EAA4B,MAAM,GAAN,CAAnC,CAA+C,CAC3C,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,KAAO,gBAAP,CACA,KAAO,SAAS,oBAAT,CAA8B,IAA9B,CAAoC,IAApC,CAAP,CACH,CAHD,IAGO,IAAI,MAAM,GAAN,CAAJ,CAAgB,CACnB,SAAW,qBAAX,CACA,KAAO,SAAS,sBAAT,CAAgC,GAAhC,CAAqC,IAArC,CAA2C,QAA3C,CAAP,CACH,CAHM,IAGA,CACH,SAAW,wBAAX,CACA,KAAO,SAAS,sBAAT,CAAgC,GAAhC,CAAqC,IAArC,CAA2C,QAA3C,CAAP,CACH,CACD,GAAI,MAAJ,CAAY,CACR,OAAO,KAAP,CAAa,IAAb,EACH,CACJ,CAED,MAAO,KAAP,CACH,CAED,QAAS,4BAAT,EAAuC,CACnC,GAAI,OAAJ,CAAY,eAAZ,CAA6B,IAA7B,CAAmC,QAAnC,CAEA,OAAS,sBAAT,CAEA,gBAAkB,MAAM,OAAxB,CACA,KAAO,aAAa,KAAb,EAAsB,oBAAtB,CAA6C,wBAApD,CACA,MAAM,OAAN,CAAgB,eAAhB,CAEA,MAAO,MAAM,GAAN,GAAc,MAAM,GAAN,CAArB,CAAiC,CAC7B,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,SAAW,qBAAX,CACA,KAAO,SAAS,sBAAT,CAAgC,GAAhC,CAAqC,IAArC,CAA2C,QAA3C,CAAP,CACH,CAHD,IAGO,CACH,SAAW,wBAAX,CACA,KAAO,SAAS,sBAAT,CAAgC,GAAhC,CAAqC,IAArC,CAA2C,QAA3C,CAAP,CACH,CACD,GAAI,MAAJ,CAAY,CACR,OAAO,KAAP,CAAa,IAAb,EACH,CACJ,CAED,MAAO,KAAP,CACH,C;AAID,QAAS,uBAAT,EAAkC,CAC9B,GAAI,KAAJ,CAAU,KAAV,CAEA,SAAS,SAAT,GACA,KAAO,sCAAP,CAEA,GAAI,UAAU,IAAV,GAAmB,MAAM,UAA7B,CAAyC,CACrC,GAAI,CAAC,MAAM,IAAN,GAAe,MAAM,IAAN,CAAhB,GAAgC,CAAC,oBAArC,CAA2D,C;AAEvD,GAAI,QAAU,KAAK,IAAL,GAAc,OAAO,UAA/B,EAA6C,iBAAiB,KAAK,IAAtB,CAAjD,CAA8E,CAC1E,mBAAmB,EAAnB,CAAuB,SAAS,gBAAhC,EACH,CAED,GAAI,CAAC,eAAe,IAAf,CAAL,CAA2B,CACvB,mBAAmB,EAAnB,CAAuB,SAAS,sBAAhC,EACH,CAED,MAAQ,KAAR,CACA,KAAO,SAAS,uBAAT,CAAiC,MAAM,KAAvC,CAA8C,IAA9C,CAAP,CACH,CACJ,CAED,MAAO,UAAS,SAAT,CAAmB,IAAnB,CAAP,CACH,C;AAID,QAAS,qBAAT,EAAgC,CAC5B,GAAI,MAAJ,CAAW,IAAX,CAEA,SAAS,SAAT,GAEA,GAAI,UAAU,IAAV,GAAmB,MAAM,UAAzB,EAAuC,UAAU,IAAV,GAAmB,MAAM,OAApE,CAA6E,CACzE,KAAO,wBAAP,CACH,CAFD,IAEO,IAAI,MAAM,IAAN,GAAe,MAAM,IAAN,CAAnB,CAAgC,CACnC,MAAQ,KAAR,CACA,KAAO,sBAAP,C;AAEA,GAAI,QAAU,KAAK,IAAL,GAAc,OAAO,UAA/B,EAA6C,iBAAiB,KAAK,IAAtB,CAAjD,CAA8E,CAC1E,mBAAmB,EAAnB,CAAuB,SAAS,eAAhC,EACH,CAED,GAAI,CAAC,eAAe,IAAf,CAAL,CAA2B,CACvB,mBAAmB,EAAnB,CAAuB,SAAS,sBAAhC,EACH,CAED,KAAO,SAAS,qBAAT,CAA+B,MAAM,KAArC,CAA4C,IAA5C,CAAP,CACH,CAbM,IAaA,IAAI,MAAM,GAAN,GAAc,MAAM,GAAN,CAAd,EAA4B,MAAM,GAAN,CAA5B,EAA0C,MAAM,GAAN,CAA9C,CAA0D,CAC7D,MAAQ,KAAR,CACA,KAAO,sBAAP,CACA,KAAO,SAAS,qBAAT,CAA+B,MAAM,KAArC,CAA4C,IAA5C,CAAP,CACH,CAJM,IAIA,IAAI,aAAa,QAAb,GAA0B,aAAa,MAAb,CAA1B,EAAkD,aAAa,QAAb,CAAtD,CAA8E,CACjF,MAAQ,KAAR,CACA,KAAO,sBAAP,CACA,KAAO,SAAS,qBAAT,CAA+B,MAAM,KAArC,CAA4C,IAA5C,CAAP,CACA,GAAI,QAAU,KAAK,QAAL,GAAkB,QAA5B,EAAwC,KAAK,QAAL,CAAc,IAAd,GAAuB,OAAO,UAA1E,CAAsF,CAClF,mBAAmB,EAAnB,CAAuB,SAAS,YAAhC,EACH,CACJ,CAPM,IAOA,CACH,KAAO,wBAAP,CACH,CAED,MAAO,UAAS,SAAT,CAAmB,IAAnB,CAAP,CACH,CAED,QAAS,iBAAT,CAA0B,KAA1B,CAAiC,OAAjC,CAA0C,CACtC,GAAI,MAAO,CAAX,CAEA,GAAI,MAAM,IAAN,GAAe,MAAM,UAArB,EAAmC,MAAM,IAAN,GAAe,MAAM,OAA5D,CAAqE,CACjE,MAAO,EAAP,CACH,CAED,OAAQ,MAAM,KAAd,EACA,IAAK,IAAL,CACI,KAAO,CAAP,CACA,MAEJ,IAAK,IAAL,CACI,KAAO,CAAP,CACA,MAEJ,IAAK,GAAL,CACI,KAAO,CAAP,CACA,MAEJ,IAAK,GAAL,CACI,KAAO,CAAP,CACA,MAEJ,IAAK,GAAL,CACI,KAAO,CAAP,CACA,MAEJ,IAAK,IAAL,CACA,IAAK,IAAL,CACA,IAAK,KAAL,CACA,IAAK,KAAL,CACI,KAAO,CAAP,CACA,MAEJ,IAAK,GAAL,CACA,IAAK,GAAL,CACA,IAAK,IAAL,CACA,IAAK,IAAL,CACA,IAAK,YAAL,CACI,KAAO,CAAP,CACA,MAEJ,IAAK,IAAL,CACI,KAAO,QAAU,CAAV,CAAc,CAArB,CACA,MAEJ,IAAK,IAAL,CACA,IAAK,IAAL,CACA,IAAK,KAAL,CACI,KAAO,CAAP,CACA,MAEJ,IAAK,GAAL,CACA,IAAK,GAAL,CACI,KAAO,CAAP,CACA,MAEJ,IAAK,GAAL,CACA,IAAK,GAAL,CACA,IAAK,GAAL,CACI,KAAO,EAAP,CACA,MAEJ,QACI,MA1DJ,CA6DA,MAAO,KAAP,CACH,C;;;;;;;AAUD,QAAS,sBAAT,EAAiC,CAC7B,GAAI,OAAJ,CAAY,OAAZ,CAAqB,IAArB,CAA2B,KAA3B,CAAkC,IAAlC,CAAwC,KAAxC,CAA+C,KAA/C,CAAsD,QAAtD,CAAgE,IAAhE,CAAsE,CAAtE,CAEA,OAAS,sBAAT,CACA,KAAO,sBAAP,CAEA,MAAQ,SAAR,CACA,KAAO,iBAAiB,KAAjB,CAAwB,MAAM,OAA9B,CAAP,CACA,GAAI,OAAS,CAAb,CAAgB,CACZ,MAAO,KAAP,CACH,CACD,MAAM,IAAN,CAAa,IAAb,CACA,MAEA,QAAU,CAAC,MAAD,CAAS,sBAAT,CAAV,CACA,MAAQ,sBAAR,CAEA,MAAQ,CAAC,IAAD,CAAO,KAAP,CAAc,KAAd,CAAR,CAEA,MAAO,CAAC,KAAO,iBAAiB,SAAjB,CAA4B,MAAM,OAAlC,CAAR,EAAsD,CAA7D,CAAgE,C;AAG5D,MAAQ,MAAM,MAAN,CAAe,CAAhB,EAAuB,MAAQ,MAAM,MAAM,MAAN,CAAe,CAArB,EAAwB,IAA9D,CAAqE,CACjE,MAAQ,MAAM,GAAN,EAAR,CACA,SAAW,MAAM,GAAN,GAAY,KAAvB,CACA,KAAO,MAAM,GAAN,EAAP,CACA,KAAO,SAAS,sBAAT,CAAgC,QAAhC,CAA0C,IAA1C,CAAgD,KAAhD,CAAP,CACA,QAAQ,GAAR,GACA,OAAS,QAAQ,GAAR,EAAT,CACA,GAAI,MAAJ,CAAY,CACR,OAAO,KAAP,CAAa,IAAb,EACH,CACD,MAAM,IAAN,CAAW,IAAX,EACA,QAAQ,IAAR,CAAa,MAAb,EACH,C;AAGD,MAAQ,KAAR,CACA,MAAM,IAAN,CAAa,IAAb,CACA,MAAM,IAAN,CAAW,KAAX,EACA,QAAQ,IAAR,CAAa,sBAAb,EACA,KAAO,sBAAP,CACA,MAAM,IAAN,CAAW,IAAX,EACH,C;AAGD,EAAI,MAAM,MAAN,CAAe,CAAnB,CACA,KAAO,MAAM,CAAN,CAAP,CACA,QAAQ,GAAR,GACA,MAAO,EAAI,CAAX,CAAc,CACV,KAAO,SAAS,sBAAT,CAAgC,MAAM,EAAI,CAAV,EAAa,KAA7C,CAAoD,MAAM,EAAI,CAAV,CAApD,CAAkE,IAAlE,CAAP,CACA,GAAK,CAAL,CACA,OAAS,QAAQ,GAAR,EAAT,CACA,GAAI,MAAJ,CAAY,CACR,OAAO,KAAP,CAAa,IAAb,EACH,CACJ,CAED,MAAO,KAAP,CACH,C;AAKD,QAAS,2BAAT,EAAsC,CAClC,GAAI,KAAJ,CAAU,eAAV,CAA2B,UAA3B,CAAuC,SAAvC,CAEA,SAAS,SAAT,GACA,KAAO,uBAAP,CAEA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACA,gBAAkB,MAAM,OAAxB,CACA,MAAM,OAAN,CAAgB,IAAhB,CACA,WAAa,2BAAb,CACA,MAAM,OAAN,CAAgB,eAAhB,CACA,OAAO,GAAP,EACA,UAAY,2BAAZ,CAEA,KAAO,SAAS,OAAT,CAAiB,SAAS,2BAAT,CAAqC,IAArC,CAA2C,UAA3C,CAAuD,SAAvD,CAAjB,CAAP,CACH,CAVD,IAUO,CACH,SAAS,OAAT,CAAiB,EAAjB,EACH,CAED,MAAO,KAAP,CACH,C;AAID,QAAS,0BAAT,EAAqC,CACjC,GAAI,MAAJ,CAAW,IAAX,CAAiB,KAAjB,CAAwB,IAAxB,CAEA,MAAQ,SAAR,CACA,SAAS,SAAT,GACA,KAAO,KAAO,4BAAd,CAEA,GAAI,aAAJ,CAAmB,C;AAEf,GAAI,CAAC,eAAe,IAAf,CAAL,CAA2B,CACvB,mBAAmB,EAAnB,CAAuB,SAAS,sBAAhC,EACH,C;AAGD,GAAI,QAAU,KAAK,IAAL,GAAc,OAAO,UAA/B,EAA6C,iBAAiB,KAAK,IAAtB,CAAjD,CAA8E,CAC1E,mBAAmB,KAAnB,CAA0B,SAAS,mBAAnC,EACH,CAED,MAAQ,KAAR,CACA,MAAQ,2BAAR,CACA,KAAO,SAAS,0BAAT,CAAoC,MAAM,KAA1C,CAAiD,IAAjD,CAAuD,KAAvD,CAAP,CACH,CAED,MAAO,UAAS,SAAT,CAAmB,IAAnB,CAAP,CACH,C;AAID,QAAS,gBAAT,EAA2B,CACvB,GAAI,KAAJ,CAEA,SAAS,SAAT,GACA,KAAO,2BAAP,CAEA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,KAAO,SAAS,wBAAT,CAAkC,CAAE,IAAF,CAAlC,CAAP,CAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,MACH,CACD,MACA,KAAK,WAAL,CAAiB,IAAjB,CAAsB,2BAAtB,EACH,CACJ,CAED,MAAO,UAAS,SAAT,CAAmB,IAAnB,CAAP,CACH,C;AAID,QAAS,mBAAT,EAA8B,CAC1B,GAAI,MAAO,EAAX,CACI,SADJ,CAGA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACH,CACD,UAAY,oBAAZ,CACA,GAAI,MAAO,UAAP,GAAqB,WAAzB,CAAsC,CAClC,MACH,CACD,KAAK,IAAL,CAAU,SAAV,EACH,CAED,MAAO,KAAP,CACH,CAED,QAAS,WAAT,EAAsB,CAClB,GAAI,MAAJ,CAEA,SAAS,SAAT,GACA,OAAO,GAAP,EAEA,MAAQ,oBAAR,CAEA,OAAO,GAAP,EAEA,MAAO,UAAS,OAAT,CAAiB,SAAS,oBAAT,CAA8B,KAA9B,CAAjB,CAAP,CACH,C;AAID,QAAS,wBAAT,EAAmC,CAC/B,GAAI,MAAJ,CAEA,SAAS,SAAT,GACA,MAAQ,KAAR,CAEA,GAAI,MAAM,IAAN,GAAe,MAAM,UAAzB,CAAqC,CACjC,gBAAgB,KAAhB,EACH,CAED,MAAO,UAAS,OAAT,CAAiB,SAAS,gBAAT,CAA0B,MAAM,KAAhC,CAAjB,CAAP,CACH,CAED,QAAS,yBAAT,CAAkC,IAAlC,CAAwC,CACpC,GAAI,MAAO,IAAX,CAAiB,EAAjB,CAEA,SAAS,SAAT,GACA,GAAK,yBAAL,C;AAGA,GAAI,QAAU,iBAAiB,GAAG,IAApB,CAAd,CAAyC,CACrC,mBAAmB,EAAnB,CAAuB,SAAS,aAAhC,EACH,CAED,GAAI,OAAS,OAAb,CAAsB,CAClB,OAAO,GAAP,EACA,KAAO,2BAAP,CACH,CAHD,IAGO,IAAI,MAAM,GAAN,CAAJ,CAAgB,CACnB,MACA,KAAO,2BAAP,CACH,CAED,MAAO,UAAS,OAAT,CAAiB,SAAS,wBAAT,CAAkC,EAAlC,CAAsC,IAAtC,CAAjB,CAAP,CACH,CAED,QAAS,6BAAT,CAAsC,IAAtC,CAA4C,CACxC,GAAI,MAAO,EAAX,CAEA,EAAG,CACC,KAAK,IAAL,CAAU,yBAAyB,IAAzB,CAAV,EACA,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,MACH,CACD,MACH,CAND,MAMS,MAAQ,MANjB,EAQA,MAAO,KAAP,CACH,CAED,QAAS,uBAAT,EAAkC,CAC9B,GAAI,aAAJ,CAEA,cAAc,KAAd,EAEA,aAAe,8BAAf,CAEA,mBAEA,MAAO,UAAS,yBAAT,CAAmC,YAAnC,CAAiD,KAAjD,CAAP,CACH,C;;;;AAMD,QAAS,yBAAT,CAAkC,IAAlC,CAAwC,CACpC,GAAI,aAAJ,CAEA,SAAS,SAAT,GAEA,cAAc,IAAd,EAEA,aAAe,6BAA6B,IAA7B,CAAf,CAEA,mBAEA,MAAO,UAAS,OAAT,CAAiB,SAAS,yBAAT,CAAmC,YAAnC,CAAiD,IAAjD,CAAjB,CAAP,CACH,C;AAID,QAAS,oBAAT,EAA+B,CAC3B,OAAO,GAAP,EACA,MAAO,UAAS,oBAAT,EAAP,CACH,C;AAID,QAAS,yBAAT,EAAoC,CAChC,GAAI,MAAO,iBAAX,CACA,mBACA,MAAO,UAAS,yBAAT,CAAmC,IAAnC,CAAP,CACH,C;AAID,QAAS,iBAAT,EAA4B,CACxB,GAAI,KAAJ,CAAU,UAAV,CAAsB,SAAtB,CAEA,cAAc,IAAd,EAEA,OAAO,GAAP,EAEA,KAAO,iBAAP,CAEA,OAAO,GAAP,EAEA,WAAa,gBAAb,CAEA,GAAI,aAAa,MAAb,CAAJ,CAA0B,CACtB,MACA,UAAY,gBAAZ,CACH,CAHD,IAGO,CACH,UAAY,IAAZ,CACH,CAED,MAAO,UAAS,iBAAT,CAA2B,IAA3B,CAAiC,UAAjC,CAA6C,SAA7C,CAAP,CACH,C;AAID,QAAS,sBAAT,EAAiC,CAC7B,GAAI,KAAJ,CAAU,IAAV,CAAgB,cAAhB,CAEA,cAAc,IAAd,EAEA,eAAiB,MAAM,WAAvB,CACA,MAAM,WAAN,CAAoB,IAApB,CAEA,KAAO,gBAAP,CAEA,MAAM,WAAN,CAAoB,cAApB,CAEA,cAAc,OAAd,EAEA,OAAO,GAAP,EAEA,KAAO,iBAAP,CAEA,OAAO,GAAP,EAEA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACH,CAED,MAAO,UAAS,sBAAT,CAAgC,IAAhC,CAAsC,IAAtC,CAAP,CACH,CAED,QAAS,oBAAT,EAA+B,CAC3B,GAAI,KAAJ,CAAU,IAAV,CAAgB,cAAhB,CAEA,cAAc,OAAd,EAEA,OAAO,GAAP,EAEA,KAAO,iBAAP,CAEA,OAAO,GAAP,EAEA,eAAiB,MAAM,WAAvB,CACA,MAAM,WAAN,CAAoB,IAApB,CAEA,KAAO,gBAAP,CAEA,MAAM,WAAN,CAAoB,cAApB,CAEA,MAAO,UAAS,oBAAT,CAA8B,IAA9B,CAAoC,IAApC,CAAP,CACH,CAED,QAAS,4BAAT,EAAuC,CACnC,GAAI,MAAJ,CAAW,YAAX,CAEA,SAAS,SAAT,GACA,MAAQ,KAAR,CACA,aAAe,8BAAf,CAEA,MAAO,UAAS,OAAT,CAAiB,SAAS,yBAAT,CAAmC,YAAnC,CAAiD,MAAM,KAAvD,CAAjB,CAAP,CACH,CAED,QAAS,kBAAT,EAA6B,CACzB,GAAI,KAAJ,CAAU,IAAV,CAAgB,MAAhB,CAAwB,IAAxB,CAA8B,KAA9B,CAAqC,IAArC,CAA2C,cAA3C,CAEA,KAAO,KAAO,OAAS,IAAvB,CAEA,cAAc,KAAd,EAEA,OAAO,GAAP,EAEA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACH,CAFD,IAEO,CACH,GAAI,aAAa,KAAb,GAAuB,aAAa,KAAb,CAA3B,CAAgD,CAC5C,MAAM,OAAN,CAAgB,KAAhB,CACA,KAAO,6BAAP,CACA,MAAM,OAAN,CAAgB,IAAhB,CAEA,GAAI,KAAK,YAAL,CAAkB,MAAlB,GAA6B,CAA7B,EAAkC,aAAa,IAAb,CAAtC,CAA0D,CACtD,MACA,KAAO,IAAP,CACA,MAAQ,iBAAR,CACA,KAAO,IAAP,CACH,CACJ,CAXD,IAWO,CACH,MAAM,OAAN,CAAgB,KAAhB,CACA,KAAO,iBAAP,CACA,MAAM,OAAN,CAAgB,IAAhB,CAEA,GAAI,aAAa,IAAb,CAAJ,CAAwB,C;AAEpB,GAAI,CAAC,eAAe,IAAf,CAAL,CAA2B,CACvB,mBAAmB,EAAnB,CAAuB,SAAS,iBAAhC,EACH,CAED,MACA,KAAO,IAAP,CACA,MAAQ,iBAAR,CACA,KAAO,IAAP,CACH,CACJ,CAED,GAAI,MAAO,KAAP,GAAgB,WAApB,CAAiC,CAC7B,OAAO,GAAP,EACH,CACJ,CAED,GAAI,MAAO,KAAP,GAAgB,WAApB,CAAiC,CAE7B,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,KAAO,iBAAP,CACH,CACD,OAAO,GAAP,EAEA,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,OAAS,iBAAT,CACH,CACJ,CAED,OAAO,GAAP,EAEA,eAAiB,MAAM,WAAvB,CACA,MAAM,WAAN,CAAoB,IAApB,CAEA,KAAO,gBAAP,CAEA,MAAM,WAAN,CAAoB,cAApB,CAEA,MAAQ,OAAO,KAAP,GAAgB,WAAjB,CACC,SAAS,kBAAT,CAA4B,IAA5B,CAAkC,IAAlC,CAAwC,MAAxC,CAAgD,IAAhD,CADD,CAEC,SAAS,oBAAT,CAA8B,IAA9B,CAAoC,KAApC,CAA2C,IAA3C,CAFR,CAGH,C;AAID,QAAS,uBAAT,EAAkC,CAC9B,GAAI,OAAQ,IAAZ,CAAkB,GAAlB,CAEA,cAAc,UAAd,E;AAGA,GAAI,OAAO,UAAP,CAAkB,KAAlB,IAA6B,IAAjC,CAAuC,CACnC,MAEA,GAAI,CAAC,MAAM,WAAX,CAAwB,CACpB,WAAW,EAAX,CAAe,SAAS,eAAxB,EACH,CAED,MAAO,UAAS,uBAAT,CAAiC,IAAjC,CAAP,CACH,CAED,GAAI,oBAAJ,CAA0B,CACtB,GAAI,CAAC,MAAM,WAAX,CAAwB,CACpB,WAAW,EAAX,CAAe,SAAS,eAAxB,EACH,CAED,MAAO,UAAS,uBAAT,CAAiC,IAAjC,CAAP,CACH,CAED,GAAI,UAAU,IAAV,GAAmB,MAAM,UAA7B,CAAyC,CACrC,MAAQ,yBAAR,CAEA,IAAM,IAAM,MAAM,IAAlB,CACA,GAAI,CAAC,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,MAAM,QAA3C,CAAqD,GAArD,CAAL,CAAgE,CAC5D,WAAW,EAAX,CAAe,SAAS,YAAxB,CAAsC,MAAM,IAA5C,EACH,CACJ,CAED,mBAEA,GAAI,QAAU,IAAV,EAAkB,CAAC,MAAM,WAA7B,CAA0C,CACtC,WAAW,EAAX,CAAe,SAAS,eAAxB,EACH,CAED,MAAO,UAAS,uBAAT,CAAiC,KAAjC,CAAP,CACH,C;AAID,QAAS,oBAAT,EAA+B,CAC3B,GAAI,OAAQ,IAAZ,CAAkB,GAAlB,CAEA,cAAc,OAAd,E;AAGA,GAAI,OAAO,UAAP,CAAkB,KAAlB,IAA6B,IAAjC,CAAuC,CACnC,MAEA,GAAI,EAAE,MAAM,WAAN,EAAqB,MAAM,QAA7B,CAAJ,CAA4C,CACxC,WAAW,EAAX,CAAe,SAAS,YAAxB,EACH,CAED,MAAO,UAAS,oBAAT,CAA8B,IAA9B,CAAP,CACH,CAED,GAAI,oBAAJ,CAA0B,CACtB,GAAI,EAAE,MAAM,WAAN,EAAqB,MAAM,QAA7B,CAAJ,CAA4C,CACxC,WAAW,EAAX,CAAe,SAAS,YAAxB,EACH,CAED,MAAO,UAAS,oBAAT,CAA8B,IAA9B,CAAP,CACH,CAED,GAAI,UAAU,IAAV,GAAmB,MAAM,UAA7B,CAAyC,CACrC,MAAQ,yBAAR,CAEA,IAAM,IAAM,MAAM,IAAlB,CACA,GAAI,CAAC,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,MAAM,QAA3C,CAAqD,GAArD,CAAL,CAAgE,CAC5D,WAAW,EAAX,CAAe,SAAS,YAAxB,CAAsC,MAAM,IAA5C,EACH,CACJ,CAED,mBAEA,GAAI,QAAU,IAAV,EAAkB,EAAE,MAAM,WAAN,EAAqB,MAAM,QAA7B,CAAtB,CAA8D,CAC1D,WAAW,EAAX,CAAe,SAAS,YAAxB,EACH,CAED,MAAO,UAAS,oBAAT,CAA8B,KAA9B,CAAP,CACH,C;AAID,QAAS,qBAAT,EAAgC,CAC5B,GAAI,UAAW,IAAf,CAEA,cAAc,QAAd,EAEA,GAAI,CAAC,MAAM,cAAX,CAA2B,CACvB,mBAAmB,EAAnB,CAAuB,SAAS,aAAhC,EACH,C;AAGD,GAAI,OAAO,UAAP,CAAkB,KAAlB,IAA6B,IAAjC,CAAuC,CACnC,GAAI,kBAAkB,OAAO,UAAP,CAAkB,MAAQ,CAA1B,CAAlB,CAAJ,CAAqD,CACjD,SAAW,iBAAX,CACA,mBACA,MAAO,UAAS,qBAAT,CAA+B,QAA/B,CAAP,CACH,CACJ,CAED,GAAI,oBAAJ,CAA0B,CACtB,MAAO,UAAS,qBAAT,CAA+B,IAA/B,CAAP,CACH,CAED,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,GAAI,CAAC,MAAM,GAAN,CAAD,EAAe,UAAU,IAAV,GAAmB,MAAM,GAA5C,CAAiD,CAC7C,SAAW,iBAAX,CACH,CACJ,CAED,mBAEA,MAAO,UAAS,qBAAT,CAA+B,QAA/B,CAAP,CACH,C;AAID,QAAS,mBAAT,EAA8B,CAC1B,GAAI,OAAJ,CAAY,IAAZ,CAEA,GAAI,MAAJ,CAAY,CACR,mBAAmB,EAAnB,CAAuB,SAAS,cAAhC,EACH,CAED,cAAc,MAAd,EAEA,OAAO,GAAP,EAEA,OAAS,iBAAT,CAEA,OAAO,GAAP,EAEA,KAAO,gBAAP,CAEA,MAAO,UAAS,mBAAT,CAA6B,MAA7B,CAAqC,IAArC,CAAP,CACH,C;AAID,QAAS,gBAAT,EAA2B,CACvB,GAAI,KAAJ,CACI,WAAa,EADjB,CAEI,SAFJ,CAIA,SAAS,SAAT,GACA,GAAI,aAAa,SAAb,CAAJ,CAA6B,CACzB,MACA,KAAO,IAAP,CACH,CAHD,IAGO,CACH,cAAc,MAAd,EACA,KAAO,iBAAP,CACH,CACD,OAAO,GAAP,EAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAI,MAAM,GAAN,GAAc,aAAa,SAAb,CAAd,EAAyC,aAAa,MAAb,CAA7C,CAAmE,CAC/D,MACH,CACD,UAAY,gBAAZ,CACA,WAAW,IAAX,CAAgB,SAAhB,EACH,CAED,MAAO,UAAS,OAAT,CAAiB,SAAS,gBAAT,CAA0B,IAA1B,CAAgC,UAAhC,CAAjB,CAAP,CACH,CAED,QAAS,qBAAT,EAAgC,CAC5B,GAAI,aAAJ,CAAkB,KAAlB,CAAyB,MAAzB,CAAiC,WAAjC,CAA8C,YAA9C,CAEA,cAAc,QAAd,EAEA,OAAO,GAAP,EAEA,aAAe,iBAAf,CAEA,OAAO,GAAP,EAEA,OAAO,GAAP,EAEA,MAAQ,EAAR,CAEA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACA,MAAO,UAAS,qBAAT,CAA+B,YAA/B,CAA6C,KAA7C,CAAP,CACH,CAED,YAAc,MAAM,QAApB,CACA,MAAM,QAAN,CAAiB,IAAjB,CACA,aAAe,KAAf,CAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACH,CACD,OAAS,iBAAT,CACA,GAAI,OAAO,IAAP,GAAgB,IAApB,CAA0B,CACtB,GAAI,YAAJ,CAAkB,CACd,WAAW,EAAX,CAAe,SAAS,wBAAxB,EACH,CACD,aAAe,IAAf,CACH,CACD,MAAM,IAAN,CAAW,MAAX,EACH,CAED,MAAM,QAAN,CAAiB,WAAjB,CAEA,OAAO,GAAP,EAEA,MAAO,UAAS,qBAAT,CAA+B,YAA/B,CAA6C,KAA7C,CAAP,CACH,C;AAID,QAAS,oBAAT,EAA+B,CAC3B,GAAI,SAAJ,CAEA,cAAc,OAAd,EAEA,GAAI,oBAAJ,CAA0B,CACtB,WAAW,EAAX,CAAe,SAAS,iBAAxB,EACH,CAED,SAAW,iBAAX,CAEA,mBAEA,MAAO,UAAS,oBAAT,CAA8B,QAA9B,CAAP,CACH,C;AAID,QAAS,iBAAT,EAA4B,CACxB,GAAI,MAAJ,CAAW,IAAX,CAEA,SAAS,SAAT,GACA,cAAc,OAAd,EAEA,OAAO,GAAP,EACA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,gBAAgB,SAAhB,EACH,CAED,MAAQ,yBAAR,C;AAEA,GAAI,QAAU,iBAAiB,MAAM,IAAvB,CAAd,CAA4C,CACxC,mBAAmB,EAAnB,CAAuB,SAAS,mBAAhC,EACH,CAED,OAAO,GAAP,EACA,KAAO,YAAP,CACA,MAAO,UAAS,OAAT,CAAiB,SAAS,iBAAT,CAA2B,KAA3B,CAAkC,IAAlC,CAAjB,CAAP,CACH,CAED,QAAS,kBAAT,EAA6B,CACzB,GAAI,MAAJ,CAAW,SAAW,EAAtB,CAA0B,UAAY,IAAtC,CAEA,cAAc,KAAd,EAEA,MAAQ,YAAR,CAEA,GAAI,aAAa,OAAb,CAAJ,CAA2B,CACvB,SAAS,IAAT,CAAc,kBAAd,EACH,CAED,GAAI,aAAa,SAAb,CAAJ,CAA6B,CACzB,MACA,UAAY,YAAZ,CACH,CAED,GAAI,SAAS,MAAT,GAAoB,CAApB,EAAyB,CAAC,SAA9B,CAAyC,CACrC,WAAW,EAAX,CAAe,SAAS,gBAAxB,EACH,CAED,MAAO,UAAS,kBAAT,CAA4B,KAA5B,CAAmC,EAAnC,CAAuC,QAAvC,CAAiD,SAAjD,CAAP,CACH,C;AAID,QAAS,uBAAT,EAAkC,CAC9B,cAAc,UAAd,EAEA,mBAEA,MAAO,UAAS,uBAAT,EAAP,CACH,C;AAID,QAAS,eAAT,EAA0B,CACtB,GAAI,MAAO,UAAU,IAArB,CACI,IADJ,CAEI,WAFJ,CAGI,GAHJ,CAKA,GAAI,OAAS,MAAM,GAAnB,CAAwB,CACpB,gBAAgB,SAAhB,EACH,CAED,SAAS,SAAT,GAEA,GAAI,OAAS,MAAM,UAAnB,CAA+B,CAC3B,OAAQ,UAAU,KAAlB,EACA,IAAK,GAAL,CACI,MAAO,UAAS,OAAT,CAAiB,qBAAjB,CAAP,CACJ,IAAK,GAAL,CACI,MAAO,UAAS,OAAT,CAAiB,YAAjB,CAAP,CACJ,IAAK,GAAL,CACI,MAAO,UAAS,OAAT,CAAiB,0BAAjB,CAAP,CACJ,QACI,MARJ,CAUH,CAED,GAAI,OAAS,MAAM,OAAnB,CAA4B,CACxB,OAAQ,UAAU,KAAlB,EACA,IAAK,OAAL,CACI,MAAO,UAAS,OAAT,CAAiB,qBAAjB,CAAP,CACJ,IAAK,UAAL,CACI,MAAO,UAAS,OAAT,CAAiB,wBAAjB,CAAP,CACJ,IAAK,UAAL,CACI,MAAO,UAAS,OAAT,CAAiB,wBAAjB,CAAP,CACJ,IAAK,IAAL,CACI,MAAO,UAAS,OAAT,CAAiB,uBAAjB,CAAP,CACJ,IAAK,KAAL,CACI,MAAO,UAAS,OAAT,CAAiB,mBAAjB,CAAP,CACJ,IAAK,UAAL,CACI,MAAO,UAAS,OAAT,CAAiB,0BAAjB,CAAP,CACJ,IAAK,IAAL,CACI,MAAO,UAAS,OAAT,CAAiB,kBAAjB,CAAP,CACJ,IAAK,QAAL,CACI,MAAO,UAAS,OAAT,CAAiB,sBAAjB,CAAP,CACJ,IAAK,QAAL,CACI,MAAO,UAAS,OAAT,CAAiB,sBAAjB,CAAP,CACJ,IAAK,OAAL,CACI,MAAO,UAAS,OAAT,CAAiB,qBAAjB,CAAP,CACJ,IAAK,KAAL,CACI,MAAO,UAAS,OAAT,CAAiB,mBAAjB,CAAP,CACJ,IAAK,KAAL,CACI,MAAO,UAAS,OAAT,CAAiB,wBAAjB,CAAP,CACJ,IAAK,OAAL,CACI,MAAO,UAAS,OAAT,CAAiB,qBAAjB,CAAP,CACJ,IAAK,MAAL,CACI,MAAO,UAAS,OAAT,CAAiB,oBAAjB,CAAP,CACJ,QACI,MA9BJ,CAgCH,CAED,KAAO,iBAAP,C;AAGA,GAAK,KAAK,IAAL,GAAc,OAAO,UAAtB,EAAqC,MAAM,GAAN,CAAzC,CAAqD,CACjD,MAEA,IAAM,IAAM,KAAK,IAAjB,CACA,GAAI,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,MAAM,QAA3C,CAAqD,GAArD,CAAJ,CAA+D,CAC3D,WAAW,EAAX,CAAe,SAAS,aAAxB,CAAuC,OAAvC,CAAgD,KAAK,IAArD,EACH,CAED,MAAM,QAAN,CAAe,GAAf,EAAsB,IAAtB,CACA,YAAc,gBAAd,CACA,MAAO,OAAM,QAAN,CAAe,GAAf,CAAP,CACA,MAAO,UAAS,OAAT,CAAiB,SAAS,sBAAT,CAAgC,IAAhC,CAAsC,WAAtC,CAAjB,CAAP,CACH,CAED,mBAEA,MAAO,UAAS,OAAT,CAAiB,SAAS,yBAAT,CAAmC,IAAnC,CAAjB,CAAP,CACH,C;AAID,QAAS,4BAAT,EAAuC,CACnC,GAAI,cAAJ,CAAmB,eAAiB,EAApC,CAAwC,KAAxC,CAA+C,SAA/C,CAA0D,eAA1D,CACI,WADJ,CACiB,cADjB,CACiC,WADjC,CAC8C,iBAD9C,CAGA,SAAS,SAAT,GACA,OAAO,GAAP,EAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAI,UAAU,IAAV,GAAmB,MAAM,aAA7B,CAA4C,CACxC,MACH,CACD,MAAQ,SAAR,CAEA,cAAgB,oBAAhB,CACA,eAAe,IAAf,CAAoB,aAApB,EACA,GAAI,cAAc,UAAd,CAAyB,IAAzB,GAAkC,OAAO,OAA7C,CAAsD,C;AAElD,MACH,CACD,UAAY,OAAO,KAAP,CAAa,MAAM,KAAN,CAAY,CAAZ,EAAiB,CAA9B,CAAiC,MAAM,KAAN,CAAY,CAAZ,EAAiB,CAAlD,CAAZ,CACA,GAAI,YAAc,YAAlB,CAAgC,CAC5B,OAAS,IAAT,CACA,GAAI,eAAJ,CAAqB,CACjB,mBAAmB,eAAnB,CAAoC,SAAS,kBAA7C,EACH,CACJ,CALD,IAKO,CACH,GAAI,CAAC,eAAD,EAAoB,MAAM,KAA9B,CAAqC,CACjC,gBAAkB,KAAlB,CACH,CACJ,CACJ,CAED,YAAc,MAAM,QAApB,CACA,eAAiB,MAAM,WAAvB,CACA,YAAc,MAAM,QAApB,CACA,kBAAoB,MAAM,cAA1B,CAEA,MAAM,QAAN,CAAiB,EAAjB,CACA,MAAM,WAAN,CAAoB,KAApB,CACA,MAAM,QAAN,CAAiB,KAAjB,CACA,MAAM,cAAN,CAAuB,IAAvB,CAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACH,CACD,cAAgB,oBAAhB,CACA,GAAI,MAAO,cAAP,GAAyB,WAA7B,CAA0C,CACtC,MACH,CACD,eAAe,IAAf,CAAoB,aAApB,EACH,CAED,OAAO,GAAP,EAEA,MAAM,QAAN,CAAiB,WAAjB,CACA,MAAM,WAAN,CAAoB,cAApB,CACA,MAAM,QAAN,CAAiB,WAAjB,CACA,MAAM,cAAN,CAAuB,iBAAvB,CAEA,MAAO,UAAS,OAAT,CAAiB,SAAS,oBAAT,CAA8B,cAA9B,CAAjB,CAAP,CACH,CAED,QAAS,YAAT,CAAqB,eAArB,CAAsC,CAClC,GAAI,MAAJ,CAAW,OAAS,EAApB,CAAwB,KAAxB,CAA+B,QAA/B,CAAyC,QAAzC,CAAmD,GAAnD,CAAwD,OAAxD,CACA,OAAO,GAAP,EAEA,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,SAAW,EAAX,CACA,MAAO,MAAQ,MAAf,CAAuB,CACnB,MAAQ,SAAR,CACA,MAAQ,yBAAR,CACA,IAAM,IAAM,MAAM,KAAlB,CACA,GAAI,MAAJ,CAAY,CACR,GAAI,iBAAiB,MAAM,KAAvB,CAAJ,CAAmC,CAC/B,SAAW,KAAX,CACA,QAAU,SAAS,eAAnB,CACH,CACD,GAAI,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,QAArC,CAA+C,GAA/C,CAAJ,CAAyD,CACrD,SAAW,KAAX,CACA,QAAU,SAAS,eAAnB,CACH,CACJ,CATD,IASO,IAAI,CAAC,eAAL,CAAsB,CACzB,GAAI,iBAAiB,MAAM,KAAvB,CAAJ,CAAmC,CAC/B,gBAAkB,KAAlB,CACA,QAAU,SAAS,eAAnB,CACH,CAHD,IAGO,IAAI,yBAAyB,MAAM,KAA/B,CAAJ,CAA2C,CAC9C,gBAAkB,KAAlB,CACA,QAAU,SAAS,kBAAnB,CACH,CAHM,IAGA,IAAI,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,QAArC,CAA+C,GAA/C,CAAJ,CAAyD,CAC5D,gBAAkB,KAAlB,CACA,QAAU,SAAS,eAAnB,CACH,CACJ,CACD,OAAO,IAAP,CAAY,KAAZ,EACA,SAAS,GAAT,EAAgB,IAAhB,CACA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACH,CACD,OAAO,GAAP,EACH,CACJ,CAED,OAAO,GAAP,EAEA,MAAO,CACH,OAAQ,MADL,CAEH,SAAU,QAFP,CAGH,gBAAiB,eAHd,CAIH,QAAS,OAJN,CAAP,CAMH,CAED,QAAS,yBAAT,EAAoC,CAChC,GAAI,GAAJ,CAAQ,OAAS,EAAjB,CAAqB,IAArB,CAA2B,KAA3B,CAAkC,QAAlC,CAA4C,GAA5C,CAAiD,eAAjD,CAAkE,OAAlE,CAA2E,cAA3E,CAEA,SAAS,SAAT,GAEA,cAAc,UAAd,EACA,MAAQ,SAAR,CACA,GAAK,yBAAL,CACA,GAAI,MAAJ,CAAY,CACR,GAAI,iBAAiB,MAAM,KAAvB,CAAJ,CAAmC,CAC/B,mBAAmB,KAAnB,CAA0B,SAAS,kBAAnC,EACH,CACJ,CAJD,IAIO,CACH,GAAI,iBAAiB,MAAM,KAAvB,CAAJ,CAAmC,CAC/B,gBAAkB,KAAlB,CACA,QAAU,SAAS,kBAAnB,CACH,CAHD,IAGO,IAAI,yBAAyB,MAAM,KAA/B,CAAJ,CAA2C,CAC9C,gBAAkB,KAAlB,CACA,QAAU,SAAS,kBAAnB,CACH,CACJ,CAED,IAAM,YAAY,eAAZ,CAAN,CACA,OAAS,IAAI,MAAb,CACA,SAAW,IAAI,QAAf,CACA,gBAAkB,IAAI,eAAtB,CACA,GAAI,IAAI,OAAR,CAAiB,CACb,QAAU,IAAI,OAAd,CACH,CAED,eAAiB,MAAjB,CACA,KAAO,6BAAP,CACA,GAAI,QAAU,eAAd,CAA+B,CAC3B,WAAW,eAAX,CAA4B,OAA5B,EACH,CACD,GAAI,QAAU,QAAd,CAAwB,CACpB,mBAAmB,QAAnB,CAA6B,OAA7B,EACH,CACD,OAAS,cAAT,CAEA,MAAO,UAAS,OAAT,CAAiB,SAAS,yBAAT,CAAmC,EAAnC,CAAuC,MAAvC,CAA+C,EAA/C,CAAmD,IAAnD,CAAjB,CAAP,CACH,CAED,QAAS,wBAAT,EAAmC,CAC/B,GAAI,MAAJ,CAAW,GAAK,IAAhB,CAAsB,QAAtB,CAAgC,eAAhC,CAAiD,OAAjD,CAA0D,GAA1D,CAA+D,OAAS,EAAxE,CAA4E,IAA5E,CAAkF,cAAlF,CAEA,SAAS,SAAT,GACA,cAAc,UAAd,EAEA,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,MAAQ,SAAR,CACA,GAAK,yBAAL,CACA,GAAI,MAAJ,CAAY,CACR,GAAI,iBAAiB,MAAM,KAAvB,CAAJ,CAAmC,CAC/B,mBAAmB,KAAnB,CAA0B,SAAS,kBAAnC,EACH,CACJ,CAJD,IAIO,CACH,GAAI,iBAAiB,MAAM,KAAvB,CAAJ,CAAmC,CAC/B,gBAAkB,KAAlB,CACA,QAAU,SAAS,kBAAnB,CACH,CAHD,IAGO,IAAI,yBAAyB,MAAM,KAA/B,CAAJ,CAA2C,CAC9C,gBAAkB,KAAlB,CACA,QAAU,SAAS,kBAAnB,CACH,CACJ,CACJ,CAED,IAAM,YAAY,eAAZ,CAAN,CACA,OAAS,IAAI,MAAb,CACA,SAAW,IAAI,QAAf,CACA,gBAAkB,IAAI,eAAtB,CACA,GAAI,IAAI,OAAR,CAAiB,CACb,QAAU,IAAI,OAAd,CACH,CAED,eAAiB,MAAjB,CACA,KAAO,6BAAP,CACA,GAAI,QAAU,eAAd,CAA+B,CAC3B,WAAW,eAAX,CAA4B,OAA5B,EACH,CACD,GAAI,QAAU,QAAd,CAAwB,CACpB,mBAAmB,QAAnB,CAA6B,OAA7B,EACH,CACD,OAAS,cAAT,CAEA,MAAO,UAAS,OAAT,CAAiB,SAAS,wBAAT,CAAkC,EAAlC,CAAsC,MAAtC,CAA8C,EAA9C,CAAkD,IAAlD,CAAjB,CAAP,CACH,C;AAID,QAAS,mBAAT,EAA8B,CAC1B,GAAI,UAAU,IAAV,GAAmB,MAAM,OAA7B,CAAsC,CAClC,OAAQ,UAAU,KAAlB,EACA,IAAK,OAAL,CACA,IAAK,KAAL,CACI,MAAO,0BAAyB,UAAU,KAAnC,CAAP,CACJ,IAAK,UAAL,CACI,MAAO,2BAAP,CACJ,QACI,MAAO,iBAAP,CAPJ,CASH,CAED,GAAI,UAAU,IAAV,GAAmB,MAAM,GAA7B,CAAkC,CAC9B,MAAO,iBAAP,CACH,CACJ,CAED,QAAS,oBAAT,EAA+B,CAC3B,GAAI,cAAJ,CAAmB,eAAiB,EAApC,CAAwC,KAAxC,CAA+C,SAA/C,CAA0D,eAA1D,CAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,MAAQ,SAAR,CACA,GAAI,MAAM,IAAN,GAAe,MAAM,aAAzB,CAAwC,CACpC,MACH,CAED,cAAgB,oBAAhB,CACA,eAAe,IAAf,CAAoB,aAApB,EACA,GAAI,cAAc,UAAd,CAAyB,IAAzB,GAAkC,OAAO,OAA7C,CAAsD,C;AAElD,MACH,CACD,UAAY,OAAO,KAAP,CAAa,MAAM,KAAN,CAAY,CAAZ,EAAiB,CAA9B,CAAiC,MAAM,KAAN,CAAY,CAAZ,EAAiB,CAAlD,CAAZ,CACA,GAAI,YAAc,YAAlB,CAAgC,CAC5B,OAAS,IAAT,CACA,GAAI,eAAJ,CAAqB,CACjB,mBAAmB,eAAnB,CAAoC,SAAS,kBAA7C,EACH,CACJ,CALD,IAKO,CACH,GAAI,CAAC,eAAD,EAAoB,MAAM,KAA9B,CAAqC,CACjC,gBAAkB,KAAlB,CACH,CACJ,CACJ,CAED,MAAO,MAAQ,MAAf,CAAuB,CACnB,cAAgB,oBAAhB,CACA,GAAI,MAAO,cAAP,GAAyB,WAA7B,CAA0C,CACtC,MACH,CACD,eAAe,IAAf,CAAoB,aAApB,EACH,CACD,MAAO,eAAP,CACH,CAED,QAAS,aAAT,EAAwB,CACpB,GAAI,KAAJ,CAEA,SAAS,SAAT,GACA,OAAS,KAAT,CACA,OACA,KAAO,qBAAP,CACA,MAAO,UAAS,OAAT,CAAiB,SAAS,aAAT,CAAuB,IAAvB,CAAjB,CAAP,CACH,CAED,QAAS,eAAT,EAA0B,CACtB,GAAI,EAAJ,CAAO,QAAP,CAAiB,OAAjB,CAA0B,OAA1B,CAAmC,QAAnC,CAEA,IAAK,EAAI,CAAT,CAAY,EAAI,MAAM,eAAN,CAAsB,MAAtC,CAA8C,EAAE,CAAhD,CAAmD,CAC/C,SAAW,MAAM,eAAN,CAAsB,CAAtB,CAAX,CACA,QAAU,SAAS,OAAnB,CACA,QAAU,SAAS,OAAnB,CACA,GAAI,OAAJ,CAAa,CACT,GAAI,MAAO,SAAQ,eAAf,GAAmC,WAAvC,CAAoD,CAChD,QAAQ,eAAR,CAA0B,EAA1B,CACH,CACD,QAAQ,eAAR,CAAwB,IAAxB,CAA6B,SAAS,OAAtC,EACH,CACD,SAAW,SAAS,QAApB,CACA,GAAI,QAAJ,CAAc,CACV,GAAI,MAAO,UAAS,gBAAhB,GAAqC,WAAzC,CAAsD,CAClD,SAAS,gBAAT,CAA4B,EAA5B,CACH,CACD,SAAS,gBAAT,CAA0B,IAA1B,CAA+B,SAAS,OAAxC,EACH,CACJ,CACD,MAAM,eAAN,CAAwB,EAAxB,CACH,CAED,QAAS,oBAAT,EAA+B,CAC3B,GAAI,EAAJ,CAAO,KAAP,CAAc,KAAd,CAAqB,OAAS,EAA9B,CAEA,IAAK,EAAI,CAAT,CAAY,EAAI,MAAM,MAAN,CAAa,MAA7B,CAAqC,EAAE,CAAvC,CAA0C,CACtC,MAAQ,MAAM,MAAN,CAAa,CAAb,CAAR,CACA,MAAQ,CACJ,KAAM,MAAM,IADR,CAEJ,MAAO,MAAM,KAFT,CAAR,CAIA,GAAI,MAAM,KAAV,CAAiB,CACb,MAAM,KAAN,CAAc,MAAM,KAApB,CACH,CACD,GAAI,MAAM,GAAV,CAAe,CACX,MAAM,GAAN,CAAY,MAAM,GAAlB,CACH,CACD,OAAO,IAAP,CAAY,KAAZ,EACH,CAED,MAAM,MAAN,CAAe,MAAf,CACH,CAED,QAAS,eAAT,EAA0B,CACtB,KAAK,UAAL,CAAkB,KAAlB,CACA,KAAK,SAAL,CAAiB,UAAjB,CACA,KAAK,WAAL,CAAmB,MAAQ,SAA3B,CACH,CAED,eAAe,SAAf,CAA2B,CACvB,YAAa,cADU,CAGvB,MAAO,eAAU,IAAV,CAAgB,CACnB,GAAI,MAAM,KAAV,CAAiB,CACb,KAAK,KAAL,CAAa,CAAC,KAAK,UAAN,CAAkB,KAAlB,CAAb,CACH,CACD,GAAI,MAAM,GAAV,CAAe,CACX,KAAK,GAAL,CAAW,CACP,MAAO,CACH,KAAM,KAAK,SADR,CAEH,OAAQ,KAAK,WAFV,CADA,CAKP,IAAK,CACD,KAAM,UADL,CAED,OAAQ,MAAQ,SAFf,CALE,CAAX,CAUA,KAAO,SAAS,WAAT,CAAqB,IAArB,CAAP,CACH,CACD,GAAI,MAAM,aAAV,CAAyB,CACrB,SAAS,cAAT,CAAwB,IAAxB,EACH,CACJ,CAvBsB,CAA3B,CA0BA,QAAS,qBAAT,EAAgC,CAC5B,GAAI,CAAC,MAAM,GAAP,EAAc,CAAC,MAAM,KAAzB,CAAgC,CAC5B,MAAO,KAAP,CACH,CAED,cAEA,MAAO,IAAI,eAAJ,EAAP,CACH,CAED,QAAS,SAAT,CAAkB,IAAlB,CAAwB,OAAxB,CAAiC,CAC7B,GAAI,SAAJ,CACI,KADJ,CAEI,MAFJ,CAIA,SAAW,MAAX,CACA,GAAI,MAAO,KAAP,GAAgB,QAAhB,EAA4B,EAAE,eAAgB,OAAlB,CAAhC,CAA2D,CACvD,KAAO,SAAS,IAAT,CAAP,CACH,CAED,SAAW,kBAAX,CACA,OAAS,IAAT,CACA,MAAQ,CAAR,CACA,WAAc,OAAO,MAAP,CAAgB,CAAjB,CAAsB,CAAtB,CAA0B,CAAvC,CACA,UAAY,CAAZ,CACA,OAAS,OAAO,MAAhB,CACA,UAAY,IAAZ,CACA,MAAQ,CACJ,QAAS,IADL,CAEJ,SAAU,EAFN,CAGJ,eAAgB,KAHZ,CAIJ,YAAa,KAJT,CAKJ,SAAU,KALN,CAMJ,iBAAkB,CAAC,CANf,CAAR,CASA,MAAQ,EAAR,C;AAGA,QAAU,SAAW,EAArB,C;AAGA,QAAQ,MAAR,CAAiB,IAAjB,CACA,MAAM,MAAN,CAAe,EAAf,CACA,MAAM,QAAN,CAAiB,IAAjB,C;AAEA,MAAM,cAAN,CAAuB,CAAC,CAAxB,CACA,MAAM,cAAN,CAAuB,CAAC,CAAxB,CAEA,MAAM,KAAN,CAAe,MAAO,SAAQ,KAAf,GAAyB,SAA1B,EAAwC,QAAQ,KAA9D,CACA,MAAM,GAAN,CAAa,MAAO,SAAQ,GAAf,GAAuB,SAAxB,EAAsC,QAAQ,GAA1D,CAEA,GAAI,MAAO,SAAQ,OAAf,GAA2B,SAA3B,EAAwC,QAAQ,OAApD,CAA6D,CACzD,MAAM,QAAN,CAAiB,EAAjB,CACH,CACD,GAAI,MAAO,SAAQ,QAAf,GAA4B,SAA5B,EAAyC,QAAQ,QAArD,CAA+D,CAC3D,MAAM,MAAN,CAAe,EAAf,CACH,CAED,GAAI,OAAS,CAAb,CAAgB,CACZ,GAAI,MAAO,QAAO,CAAP,CAAP,GAAqB,WAAzB,CAAsC,C;;;AAIlC,GAAI,eAAgB,OAApB,CAA4B,CACxB,OAAS,KAAK,OAAL,EAAT,CACH,CACJ,CACJ,CAED,GAAI,CACA,OACA,GAAI,UAAU,IAAV,GAAmB,MAAM,GAA7B,CAAkC,CAC9B,MAAO,OAAM,MAAb,CACH,CAED,MAAQ,KAAR,CACA,MAAO,UAAU,IAAV,GAAmB,MAAM,GAAhC,CAAqC,CACjC,GAAI,CACA,MAAQ,KAAR,CACH,CAAC,MAAO,QAAP,CAAiB,CACf,MAAQ,SAAR,CACA,GAAI,MAAM,MAAV,CAAkB,CACd,MAAM,MAAN,CAAa,IAAb,CAAkB,QAAlB,E;;AAGA,MACH,CALD,IAKO,CACH,KAAM,SAAN,CACH,CACJ,CACJ,CAED,sBACA,OAAS,MAAM,MAAf,CACA,GAAI,MAAO,OAAM,QAAb,GAA0B,WAA9B,CAA2C,CACvC,OAAO,QAAP,CAAkB,MAAM,QAAxB,CACH,CACD,GAAI,MAAO,OAAM,MAAb,GAAwB,WAA5B,CAAyC,CACrC,OAAO,MAAP,CAAgB,MAAM,MAAtB,CACH,CACJ,CAAC,MAAO,CAAP,CAAU,CACR,KAAM,EAAN,CACH,CAjCD,OAiCU,CACN,MAAQ,EAAR,CACH,CACD,MAAO,OAAP,CACH,CAED,QAAS,MAAT,CAAe,IAAf,CAAqB,OAArB,CAA8B,CAC1B,GAAI,QAAJ,CAAa,QAAb,CAEA,SAAW,MAAX,CACA,GAAI,MAAO,KAAP,GAAgB,QAAhB,EAA4B,EAAE,eAAgB,OAAlB,CAAhC,CAA2D,CACvD,KAAO,SAAS,IAAT,CAAP,CACH,CAED,SAAW,kBAAX,CACA,OAAS,IAAT,CACA,MAAQ,CAAR,CACA,WAAc,OAAO,MAAP,CAAgB,CAAjB,CAAsB,CAAtB,CAA0B,CAAvC,CACA,UAAY,CAAZ,CACA,OAAS,OAAO,MAAhB,CACA,UAAY,IAAZ,CACA,MAAQ,CACJ,QAAS,IADL,CAEJ,SAAU,EAFN,CAGJ,eAAgB,KAHZ,CAIJ,YAAa,KAJT,CAKJ,SAAU,KALN,CAMJ,iBAAkB,CAAC,CANf,CAOJ,YAAa,EAPT,CAAR,CAUA,MAAQ,EAAR,CACA,GAAI,MAAO,QAAP,GAAmB,WAAvB,CAAoC,CAChC,MAAM,KAAN,CAAe,MAAO,SAAQ,KAAf,GAAyB,SAA1B,EAAwC,QAAQ,KAA9D,CACA,MAAM,GAAN,CAAa,MAAO,SAAQ,GAAf,GAAuB,SAAxB,EAAsC,QAAQ,GAA1D,CACA,MAAM,aAAN,CAAuB,MAAO,SAAQ,aAAf,GAAiC,SAAlC,EAAgD,QAAQ,aAA9E,CAEA,GAAI,MAAM,GAAN,EAAa,QAAQ,MAAR,GAAmB,IAAhC,EAAwC,QAAQ,MAAR,GAAmB,SAA/D,CAA0E,CACtE,MAAM,MAAN,CAAe,SAAS,QAAQ,MAAjB,CAAf,CACH,CAED,GAAI,MAAO,SAAQ,MAAf,GAA0B,SAA1B,EAAuC,QAAQ,MAAnD,CAA2D,CACvD,MAAM,MAAN,CAAe,EAAf,CACH,CACD,GAAI,MAAO,SAAQ,OAAf,GAA2B,SAA3B,EAAwC,QAAQ,OAApD,CAA6D,CACzD,MAAM,QAAN,CAAiB,EAAjB,CACH,CACD,GAAI,MAAO,SAAQ,QAAf,GAA4B,SAA5B,EAAyC,QAAQ,QAArD,CAA+D,CAC3D,MAAM,MAAN,CAAe,EAAf,CACH,CACD,GAAI,MAAM,aAAV,CAAyB,CACrB,MAAM,KAAN,CAAc,IAAd,CACA,MAAM,eAAN,CAAwB,EAAxB,CACA,MAAM,QAAN,CAAiB,EAAjB,CACH,CACJ,CAED,GAAI,OAAS,CAAb,CAAgB,CACZ,GAAI,MAAO,QAAO,CAAP,CAAP,GAAqB,WAAzB,CAAsC,C;;;AAIlC,GAAI,eAAgB,OAApB,CAA4B,CACxB,OAAS,KAAK,OAAL,EAAT,CACH,CACJ,CACJ,CAED,GAAI,CACA,QAAU,cAAV,CACA,GAAI,MAAO,OAAM,QAAb,GAA0B,WAA9B,CAA2C,CACvC,QAAQ,QAAR,CAAmB,MAAM,QAAzB,CACH,CACD,GAAI,MAAO,OAAM,MAAb,GAAwB,WAA5B,CAAyC,CACrC,sBACA,QAAQ,MAAR,CAAiB,MAAM,MAAvB,CACH,CACD,GAAI,MAAO,OAAM,MAAb,GAAwB,WAA5B,CAAyC,CACrC,QAAQ,MAAR,CAAiB,MAAM,MAAvB,CACH,CACD,GAAI,MAAM,aAAV,CAAyB,CACrB,iBACH,CACJ,CAAC,MAAO,CAAP,CAAU,CACR,KAAM,EAAN,CACH,CAjBD,OAiBU,CACN,MAAQ,EAAR,CACH,CAED,MAAO,QAAP,CACH,C;AAGD,QAAQ,OAAR,CAAkB,OAAlB,CAEA,QAAQ,QAAR,CAAmB,QAAnB,CAEA,QAAQ,KAAR,CAAgB,KAAhB,C;AAGA,QAAQ,MAAR,CAAkB,UAAY,CAC1B,GAAI,KAAJ,CAAU,MAAQ,EAAlB,CAEA,GAAI,MAAO,QAAO,MAAd,GAAyB,UAA7B,CAAyC,CACrC,MAAQ,OAAO,MAAP,CAAc,IAAd,CAAR,CACH,CAED,IAAK,IAAL,GAAa,OAAb,CAAqB,CACjB,GAAI,OAAO,cAAP,CAAsB,IAAtB,CAAJ,CAAiC,CAC7B,MAAM,IAAN,EAAc,OAAO,IAAP,CAAd,CACH,CACJ,CAED,GAAI,MAAO,QAAO,MAAd,GAAyB,UAA7B,CAAyC,CACrC,OAAO,MAAP,CAAc,KAAd,EACH,CAED,MAAO,MAAP,CACH,CAlBiB,EAAlB,CAoBH,CAxsHA,CAAD,C","file":"esprima-compiled.js","sourcesContent":["/*\n  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\n  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint bitwise:true plusplus:true */\n/*global esprima:true, define:true, exports:true, window: true,\ncreateLocationMarker: true,\nthrowError: true, generateStatement: true, peek: true,\nparseAssignmentExpression: true, parseBlock: true, parseExpression: true,\nparseFunctionDeclaration: true, parseFunctionExpression: true,\nparseFunctionSourceElements: true, parseVariableIdentifier: true,\nparseLeftHandSideExpression: true,\nparseUnaryExpression: true,\nparseStatement: true, parseSourceElement: true */\n\n(function (root, factory) {\n    'use strict';\n\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\n    // Rhino, and plain browser loading.\n    if (typeof define === 'function' && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== 'undefined') {\n        factory(exports);\n    } else {\n        factory((root.esprima = {}));\n    }\n}(this, function (exports) {\n    'use strict';\n\n    var Token,\n        TokenName,\n        FnExprTokens,\n        Syntax,\n        PropertyKind,\n        Messages,\n        Regex,\n        SyntaxTreeDelegate,\n        source,\n        strict,\n        index,\n        lineNumber,\n        lineStart,\n        length,\n        delegate,\n        lookahead,\n        state,\n        extra;\n\n    Token = {\n        BooleanLiteral: 1,\n        EOF: 2,\n        Identifier: 3,\n        Keyword: 4,\n        NullLiteral: 5,\n        NumericLiteral: 6,\n        Punctuator: 7,\n        StringLiteral: 8,\n        RegularExpression: 9\n    };\n\n    TokenName = {};\n    TokenName[Token.BooleanLiteral] = 'Boolean';\n    TokenName[Token.EOF] = '<end>';\n    TokenName[Token.Identifier] = 'Identifier';\n    TokenName[Token.Keyword] = 'Keyword';\n    TokenName[Token.NullLiteral] = 'Null';\n    TokenName[Token.NumericLiteral] = 'Numeric';\n    TokenName[Token.Punctuator] = 'Punctuator';\n    TokenName[Token.StringLiteral] = 'String';\n    TokenName[Token.RegularExpression] = 'RegularExpression';\n\n    // A function following one of those tokens is an expression.\n    FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\n                    'return', 'case', 'delete', 'throw', 'void',\n                    // assignment operators\n                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',\n                    '&=', '|=', '^=', ',',\n                    // binary/unary operators\n                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\n                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\n                    '<=', '<', '>', '!=', '!=='];\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement'\n    };\n\n    PropertyKind = {\n        Data: 1,\n        Get: 2,\n        Set: 4\n    };\n\n    // Error messages should be identical to V8.\n    Messages = {\n        UnexpectedToken:  'Unexpected token %0',\n        UnexpectedNumber:  'Unexpected number',\n        UnexpectedString:  'Unexpected string',\n        UnexpectedIdentifier:  'Unexpected identifier',\n        UnexpectedReserved:  'Unexpected reserved word',\n        UnexpectedEOS:  'Unexpected end of input',\n        NewlineAfterThrow:  'Illegal newline after throw',\n        InvalidRegExp: 'Invalid regular expression',\n        UnterminatedRegExp:  'Invalid regular expression: missing /',\n        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',\n        InvalidLHSInForIn:  'Invalid left-hand side in for-in',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NoCatchOrFinally:  'Missing catch or finally after try',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalBreak: 'Illegal break statement',\n        IllegalReturn: 'Illegal return statement',\n        StrictModeWith:  'Strict mode code may not include a with statement',\n        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',\n        StrictVarName:  'Variable name may not be eval or arguments in strict mode',\n        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',\n        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',\n        StrictDelete:  'Delete of an unqualified identifier in strict mode.',\n        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',\n        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',\n        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',\n        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictReservedWord:  'Use of future reserved word in strict mode'\n    };\n\n    // See also tools/generate-unicode-regex.py.\n    Regex = {\n        NonAsciiIdentifierStart: new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]'),\n        NonAsciiIdentifierPart: new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0\\u08A2-\\u08AC\\u08E4-\\u08FE\\u0900-\\u0963\\u0966-\\u096F\\u0971-\\u0977\\u0979-\\u097F\\u0981-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C01-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C82\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D02\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1D00-\\u1DE6\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA697\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7B\\uAA80-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE26\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]')\n    };\n\n    // Ensure the condition is true, otherwise throw an error.\n    // This is only to have a better contract semantic, i.e. another safety net\n    // to catch a logic error. The condition shall be fulfilled in normal case.\n    // Do NOT use this to enforce a certain condition on any user input.\n\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error('ASSERT: ' + message);\n        }\n    }\n\n    function isDecimalDigit(ch) {\n        return (ch >= 48 && ch <= 57);   // 0..9\n    }\n\n    function isHexDigit(ch) {\n        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n    }\n\n    function isOctalDigit(ch) {\n        return '01234567'.indexOf(ch) >= 0;\n    }\n\n\n    // 7.2 White Space\n\n    function isWhiteSpace(ch) {\n        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\n            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\n    }\n\n    // 7.3 Line Terminators\n\n    function isLineTerminator(ch) {\n        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\n    }\n\n    // 7.6 Identifier Names and Identifiers\n\n    function isIdentifierStart(ch) {\n        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)\n            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z\n            (ch >= 0x61 && ch <= 0x7A) ||         // a..z\n            (ch === 0x5C) ||                      // \\ (backslash)\n            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)\n            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z\n            (ch >= 0x61 && ch <= 0x7A) ||         // a..z\n            (ch >= 0x30 && ch <= 0x39) ||         // 0..9\n            (ch === 0x5C) ||                      // \\ (backslash)\n            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));\n    }\n\n    // 7.6.1.2 Future Reserved Words\n\n    function isFutureReservedWord(id) {\n        switch (id) {\n        case 'class':\n        case 'enum':\n        case 'export':\n        case 'extends':\n        case 'import':\n        case 'super':\n            return true;\n        default:\n            return false;\n        }\n    }\n\n    function isStrictModeReservedWord(id) {\n        switch (id) {\n        case 'implements':\n        case 'interface':\n        case 'package':\n        case 'private':\n        case 'protected':\n        case 'public':\n        case 'static':\n        case 'yield':\n        case 'let':\n            return true;\n        default:\n            return false;\n        }\n    }\n\n    function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n    }\n\n    // 7.6.1.1 Keywords\n\n    function isKeyword(id) {\n        if (strict && isStrictModeReservedWord(id)) {\n            return true;\n        }\n\n        // 'const' is specialized as Keyword in V8.\n        // 'yield' and 'let' are for compatiblity with SpiderMonkey and ES.next.\n        // Some others are from future reserved words.\n\n        switch (id.length) {\n        case 2:\n            return (id === 'if') || (id === 'in') || (id === 'do');\n        case 3:\n            return (id === 'var') || (id === 'for') || (id === 'new') ||\n                (id === 'try') || (id === 'let');\n        case 4:\n            return (id === 'this') || (id === 'else') || (id === 'case') ||\n                (id === 'void') || (id === 'with') || (id === 'enum');\n        case 5:\n            return (id === 'while') || (id === 'break') || (id === 'catch') ||\n                (id === 'throw') || (id === 'const') || (id === 'yield') ||\n                (id === 'class') || (id === 'super');\n        case 6:\n            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\n                (id === 'switch') || (id === 'export') || (id === 'import');\n        case 7:\n            return (id === 'default') || (id === 'finally') || (id === 'extends');\n        case 8:\n            return (id === 'function') || (id === 'continue') || (id === 'debugger');\n        case 10:\n            return (id === 'instanceof');\n        default:\n            return false;\n        }\n    }\n\n    // 7.4 Comments\n\n    function addComment(type, value, start, end, loc) {\n        var comment, attacher;\n\n        assert(typeof start === 'number', 'Comment must have valid position');\n\n        // Because the way the actual token is scanned, often the comments\n        // (if any) are skipped twice during the lexical analysis.\n        // Thus, we need to skip adding a comment if the comment array already\n        // handled it.\n        if (state.lastCommentStart >= start) {\n            return;\n        }\n        state.lastCommentStart = start;\n\n        comment = {\n            type: type,\n            value: value\n        };\n        if (extra.range) {\n            comment.range = [start, end];\n        }\n        if (extra.loc) {\n            comment.loc = loc;\n        }\n        extra.comments.push(comment);\n\n        if (extra.attachComment) {\n            attacher = {\n                comment: comment,\n                leading: null,\n                trailing: null,\n                range: [start, end]\n            };\n            extra.pendingComments.push(attacher);\n        }\n    }\n\n    function skipSingleLineComment(offset) {\n        var start, loc, ch, comment;\n\n        start = index - offset;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart - offset\n            }\n        };\n\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            ++index;\n            if (isLineTerminator(ch)) {\n                if (extra.comments) {\n                    comment = source.slice(start + offset, index - 1);\n                    loc.end = {\n                        line: lineNumber,\n                        column: index - lineStart - 1\n                    };\n                    addComment('Line', comment, start, index - 1, loc);\n                }\n                if (ch === 13 && source.charCodeAt(index) === 10) {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n                return;\n            }\n        }\n\n        if (extra.comments) {\n            comment = source.slice(start + offset, index);\n            loc.end = {\n                line: lineNumber,\n                column: index - lineStart\n            };\n            addComment('Line', comment, start, index, loc);\n        }\n    }\n\n    function skipMultiLineComment() {\n        var start, loc, ch, comment;\n\n        if (extra.comments) {\n            start = index - 2;\n            loc = {\n                start: {\n                    line: lineNumber,\n                    column: index - lineStart - 2\n                }\n            };\n        }\n\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            if (isLineTerminator(ch)) {\n                if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {\n                    ++index;\n                }\n                ++lineNumber;\n                ++index;\n                lineStart = index;\n                if (index >= length) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            } else if (ch === 0x2A) {\n                // Block comment ends with '*/'.\n                if (source.charCodeAt(index + 1) === 0x2F) {\n                    ++index;\n                    ++index;\n                    if (extra.comments) {\n                        comment = source.slice(start + 2, index - 2);\n                        loc.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        addComment('Block', comment, start, index, loc);\n                    }\n                    return;\n                }\n                ++index;\n            } else {\n                ++index;\n            }\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    function skipComment() {\n        var ch, start;\n\n        start = (index === 0);\n        while (index < length) {\n            ch = source.charCodeAt(index);\n\n            if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n                start = true;\n            } else if (ch === 0x2F) { // U+002F is '/'\n                ch = source.charCodeAt(index + 1);\n                if (ch === 0x2F) {\n                    ++index;\n                    ++index;\n                    skipSingleLineComment(2);\n                    start = true;\n                } else if (ch === 0x2A) {  // U+002A is '*'\n                    ++index;\n                    ++index;\n                    skipMultiLineComment();\n                } else {\n                    break;\n                }\n            } else if (start && ch === 0x2D) { // U+002D is '-'\n                // U+003E is '>'\n                if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {\n                    // '-->' is a single-line comment\n                    index += 3;\n                    skipSingleLineComment(3);\n                } else {\n                    break;\n                }\n            } else if (ch === 0x3C) { // U+003C is '<'\n                if (source.slice(index + 1, index + 4) === '!--') {\n                    ++index; // `<`\n                    ++index; // `!`\n                    ++index; // `-`\n                    ++index; // `-`\n                    skipSingleLineComment(4);\n                } else {\n                    break;\n                }\n            } else {\n                break;\n            }\n        }\n    }\n\n    function scanHexEscape(prefix) {\n        var i, len, ch, code = 0;\n\n        len = (prefix === 'u') ? 4 : 2;\n        for (i = 0; i < len; ++i) {\n            if (index < length && isHexDigit(source[index])) {\n                ch = source[index++];\n                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n            } else {\n                return '';\n            }\n        }\n        return String.fromCharCode(code);\n    }\n\n    function getEscapedIdentifier() {\n        var ch, id;\n\n        ch = source.charCodeAt(index++);\n        id = String.fromCharCode(ch);\n\n        // '\\u' (U+005C, U+0075) denotes an escaped character.\n        if (ch === 0x5C) {\n            if (source.charCodeAt(index) !== 0x75) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n            ++index;\n            ch = scanHexEscape('u');\n            if (!ch || ch === '\\\\' || !isIdentifierStart(ch.charCodeAt(0))) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n            id = ch;\n        }\n\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n            ++index;\n            id += String.fromCharCode(ch);\n\n            // '\\u' (U+005C, U+0075) denotes an escaped character.\n            if (ch === 0x5C) {\n                id = id.substr(0, id.length - 1);\n                if (source.charCodeAt(index) !== 0x75) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n                ++index;\n                ch = scanHexEscape('u');\n                if (!ch || ch === '\\\\' || !isIdentifierPart(ch.charCodeAt(0))) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n                id += ch;\n            }\n        }\n\n        return id;\n    }\n\n    function getIdentifier() {\n        var start, ch;\n\n        start = index++;\n        while (index < length) {\n            ch = source.charCodeAt(index);\n            if (ch === 0x5C) {\n                // Blackslash (U+005C) marks Unicode escape sequence.\n                index = start;\n                return getEscapedIdentifier();\n            }\n            if (isIdentifierPart(ch)) {\n                ++index;\n            } else {\n                break;\n            }\n        }\n\n        return source.slice(start, index);\n    }\n\n    function scanIdentifier() {\n        var start, id, type;\n\n        start = index;\n\n        // Backslash (U+005C) starts an escaped character.\n        id = (source.charCodeAt(index) === 0x5C) ? getEscapedIdentifier() : getIdentifier();\n\n        // There is no keyword or literal with only one character.\n        // Thus, it must be an identifier.\n        if (id.length === 1) {\n            type = Token.Identifier;\n        } else if (isKeyword(id)) {\n            type = Token.Keyword;\n        } else if (id === 'null') {\n            type = Token.NullLiteral;\n        } else if (id === 'true' || id === 'false') {\n            type = Token.BooleanLiteral;\n        } else {\n            type = Token.Identifier;\n        }\n\n        return {\n            type: type,\n            value: id,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n\n    // 7.7 Punctuators\n\n    function scanPunctuator() {\n        var start = index,\n            code = source.charCodeAt(index),\n            code2,\n            ch1 = source[index],\n            ch2,\n            ch3,\n            ch4;\n\n        switch (code) {\n\n        // Check for most common single-character punctuators.\n        case 0x2E:  // . dot\n        case 0x28:  // ( open bracket\n        case 0x29:  // ) close bracket\n        case 0x3B:  // ; semicolon\n        case 0x2C:  // , comma\n        case 0x7B:  // { open curly brace\n        case 0x7D:  // } close curly brace\n        case 0x5B:  // [\n        case 0x5D:  // ]\n        case 0x3A:  // :\n        case 0x3F:  // ?\n        case 0x7E:  // ~\n            ++index;\n            if (extra.tokenize) {\n                if (code === 0x28) {\n                    extra.openParenToken = extra.tokens.length;\n                } else if (code === 0x7B) {\n                    extra.openCurlyToken = extra.tokens.length;\n                }\n            }\n            return {\n                type: Token.Punctuator,\n                value: String.fromCharCode(code),\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n\n        default:\n            code2 = source.charCodeAt(index + 1);\n\n            // '=' (U+003D) marks an assignment or comparison operator.\n            if (code2 === 0x3D) {\n                switch (code) {\n                case 0x25:  // %\n                case 0x26:  // &\n                case 0x2A:  // *:\n                case 0x2B:  // +\n                case 0x2D:  // -\n                case 0x2F:  // /\n                case 0x3C:  // <\n                case 0x3E:  // >\n                case 0x5E:  // ^\n                case 0x7C:  // |\n                    index += 2;\n                    return {\n                        type: Token.Punctuator,\n                        value: String.fromCharCode(code) + String.fromCharCode(code2),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n\n                case 0x21: // !\n                case 0x3D: // =\n                    index += 2;\n\n                    // !== and ===\n                    if (source.charCodeAt(index) === 0x3D) {\n                        ++index;\n                    }\n                    return {\n                        type: Token.Punctuator,\n                        value: source.slice(start, index),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                default:\n                    break;\n                }\n            }\n            break;\n        }\n\n        // Peek more characters.\n\n        ch2 = source[index + 1];\n        ch3 = source[index + 2];\n        ch4 = source[index + 3];\n\n        // 4-character punctuator: >>>=\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            if (ch4 === '=') {\n                index += 4;\n                return {\n                    type: Token.Punctuator,\n                    value: '>>>=',\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // 3-character punctuators: === !== >>> <<= >>=\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>>',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '<' && ch2 === '<' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '<<=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Other 2-character punctuators: ++ -- << >> && ||\n\n        if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {\n            index += 2;\n            return {\n                type: Token.Punctuator,\n                value: ch1 + ch2,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    // 7.8.3 Numeric Literals\n\n    function scanHexLiteral(start) {\n        var number = '';\n\n        while (index < length) {\n            if (!isHexDigit(source[index])) {\n                break;\n            }\n            number += source[index++];\n        }\n\n        if (number.length === 0) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        if (isIdentifierStart(source.charCodeAt(index))) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseInt('0x' + number, 16),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    function scanOctalLiteral(start) {\n        var number = '0' + source[index++];\n        while (index < length) {\n            if (!isOctalDigit(source[index])) {\n                break;\n            }\n            number += source[index++];\n        }\n\n        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseInt(number, 8),\n            octal: true,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    function scanNumericLiteral() {\n        var number, start, ch;\n\n        ch = source[index];\n        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),\n            'Numeric literal must start with a decimal digit or a decimal point');\n\n        start = index;\n        number = '';\n        if (ch !== '.') {\n            number = source[index++];\n            ch = source[index];\n\n            // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            if (number === '0') {\n                if (ch === 'x' || ch === 'X') {\n                    ++index;\n                    return scanHexLiteral(start);\n                }\n                if (isOctalDigit(ch)) {\n                    return scanOctalLiteral(start);\n                }\n\n                // decimal number starts with '0' such as '09' is illegal.\n                if (ch && isDecimalDigit(ch.charCodeAt(0))) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            }\n\n            while (isDecimalDigit(source.charCodeAt(index))) {\n                number += source[index++];\n            }\n            ch = source[index];\n        }\n\n        if (ch === '.') {\n            number += source[index++];\n            while (isDecimalDigit(source.charCodeAt(index))) {\n                number += source[index++];\n            }\n            ch = source[index];\n        }\n\n        if (ch === 'e' || ch === 'E') {\n            number += source[index++];\n\n            ch = source[index];\n            if (ch === '+' || ch === '-') {\n                number += source[index++];\n            }\n            if (isDecimalDigit(source.charCodeAt(index))) {\n                while (isDecimalDigit(source.charCodeAt(index))) {\n                    number += source[index++];\n                }\n            } else {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        if (isIdentifierStart(source.charCodeAt(index))) {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseFloat(number),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.8.4 String Literals\n\n    function scanStringLiteral() {\n        var str = '', quote, start, ch, code, unescaped, restore, octal = false;\n\n        quote = source[index];\n        assert((quote === '\\'' || quote === '\"'),\n            'String literal must starts with a quote');\n\n        start = index;\n        ++index;\n\n        while (index < length) {\n            ch = source[index++];\n\n            if (ch === quote) {\n                quote = '';\n                break;\n            } else if (ch === '\\\\') {\n                ch = source[index++];\n                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {\n                    switch (ch) {\n                    case 'n':\n                        str += '\\n';\n                        break;\n                    case 'r':\n                        str += '\\r';\n                        break;\n                    case 't':\n                        str += '\\t';\n                        break;\n                    case 'u':\n                    case 'x':\n                        restore = index;\n                        unescaped = scanHexEscape(ch);\n                        if (unescaped) {\n                            str += unescaped;\n                        } else {\n                            index = restore;\n                            str += ch;\n                        }\n                        break;\n                    case 'b':\n                        str += '\\b';\n                        break;\n                    case 'f':\n                        str += '\\f';\n                        break;\n                    case 'v':\n                        str += '\\x0B';\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            code = '01234567'.indexOf(ch);\n\n                            // \\0 is not octal escape sequence\n                            if (code !== 0) {\n                                octal = true;\n                            }\n\n                            if (index < length && isOctalDigit(source[index])) {\n                                octal = true;\n                                code = code * 8 + '01234567'.indexOf(source[index++]);\n\n                                // 3 digits are only allowed when string starts\n                                // with 0, 1, 2, 3\n                                if ('0123'.indexOf(ch) >= 0 &&\n                                        index < length &&\n                                        isOctalDigit(source[index])) {\n                                    code = code * 8 + '01234567'.indexOf(source[index++]);\n                                }\n                            }\n                            str += String.fromCharCode(code);\n                        } else {\n                            str += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch ===  '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    lineStart = index;\n                }\n            } else if (isLineTerminator(ch.charCodeAt(0))) {\n                break;\n            } else {\n                str += ch;\n            }\n        }\n\n        if (quote !== '') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.StringLiteral,\n            value: str,\n            octal: octal,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    function scanRegExp() {\n        var str, ch, start, pattern, flags, value, classMarker = false, restore, terminated = false;\n\n        lookahead = null;\n        skipComment();\n\n        start = index;\n        ch = source[index];\n        assert(ch === '/', 'Regular expression literal must start with a slash');\n        str = source[index++];\n\n        while (index < length) {\n            ch = source[index++];\n            str += ch;\n            if (ch === '\\\\') {\n                ch = source[index++];\n                // ECMA-262 7.8.5\n                if (isLineTerminator(ch.charCodeAt(0))) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n                str += ch;\n            } else if (isLineTerminator(ch.charCodeAt(0))) {\n                throwError({}, Messages.UnterminatedRegExp);\n            } else if (classMarker) {\n                if (ch === ']') {\n                    classMarker = false;\n                }\n            } else {\n                if (ch === '/') {\n                    terminated = true;\n                    break;\n                } else if (ch === '[') {\n                    classMarker = true;\n                }\n            }\n        }\n\n        if (!terminated) {\n            throwError({}, Messages.UnterminatedRegExp);\n        }\n\n        // Exclude leading and trailing slash.\n        pattern = str.substr(1, str.length - 2);\n\n        flags = '';\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch.charCodeAt(0))) {\n                break;\n            }\n\n            ++index;\n            if (ch === '\\\\' && index < length) {\n                ch = source[index];\n                if (ch === 'u') {\n                    ++index;\n                    restore = index;\n                    ch = scanHexEscape('u');\n                    if (ch) {\n                        flags += ch;\n                        for (str += '\\\\u'; restore < index; ++restore) {\n                            str += source[restore];\n                        }\n                    } else {\n                        index = restore;\n                        flags += 'u';\n                        str += '\\\\u';\n                    }\n                } else {\n                    str += '\\\\';\n                }\n            } else {\n                flags += ch;\n                str += ch;\n            }\n        }\n\n        try {\n            value = new RegExp(pattern, flags);\n        } catch (e) {\n            throwError({}, Messages.InvalidRegExp);\n        }\n\n\n\n        if (extra.tokenize) {\n            return {\n                type: Token.RegularExpression,\n                value: value,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n        return {\n            literal: str,\n            value: value,\n            range: [start, index]\n        };\n    }\n\n    function collectRegex() {\n        var pos, loc, regex, token;\n\n        skipComment();\n\n        pos = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        regex = scanRegExp();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        if (!extra.tokenize) {\n            // Pop the previous token, which is likely '/' or '/='\n            if (extra.tokens.length > 0) {\n                token = extra.tokens[extra.tokens.length - 1];\n                if (token.range[0] === pos && token.type === 'Punctuator') {\n                    if (token.value === '/' || token.value === '/=') {\n                        extra.tokens.pop();\n                    }\n                }\n            }\n\n            extra.tokens.push({\n                type: 'RegularExpression',\n                value: regex.literal,\n                range: [pos, index],\n                loc: loc\n            });\n        }\n\n        return regex;\n    }\n\n    function isIdentifierName(token) {\n        return token.type === Token.Identifier ||\n            token.type === Token.Keyword ||\n            token.type === Token.BooleanLiteral ||\n            token.type === Token.NullLiteral;\n    }\n\n    function advanceSlash() {\n        var prevToken,\n            checkToken;\n        // Using the following algorithm:\n        // https://github.com/mozilla/sweet.js/wiki/design\n        prevToken = extra.tokens[extra.tokens.length - 1];\n        if (!prevToken) {\n            // Nothing before that: it cannot be a division.\n            return collectRegex();\n        }\n        if (prevToken.type === 'Punctuator') {\n            if (prevToken.value === ']') {\n                return scanPunctuator();\n            }\n            if (prevToken.value === ')') {\n                checkToken = extra.tokens[extra.openParenToken - 1];\n                if (checkToken &&\n                        checkToken.type === 'Keyword' &&\n                        (checkToken.value === 'if' ||\n                         checkToken.value === 'while' ||\n                         checkToken.value === 'for' ||\n                         checkToken.value === 'with')) {\n                    return collectRegex();\n                }\n                return scanPunctuator();\n            }\n            if (prevToken.value === '}') {\n                // Dividing a function by anything makes little sense,\n                // but we have to check for that.\n                if (extra.tokens[extra.openCurlyToken - 3] &&\n                        extra.tokens[extra.openCurlyToken - 3].type === 'Keyword') {\n                    // Anonymous function.\n                    checkToken = extra.tokens[extra.openCurlyToken - 4];\n                    if (!checkToken) {\n                        return scanPunctuator();\n                    }\n                } else if (extra.tokens[extra.openCurlyToken - 4] &&\n                        extra.tokens[extra.openCurlyToken - 4].type === 'Keyword') {\n                    // Named function.\n                    checkToken = extra.tokens[extra.openCurlyToken - 5];\n                    if (!checkToken) {\n                        return collectRegex();\n                    }\n                } else {\n                    return scanPunctuator();\n                }\n                // checkToken determines whether the function is\n                // a declaration or an expression.\n                if (FnExprTokens.indexOf(checkToken.value) >= 0) {\n                    // It is an expression.\n                    return scanPunctuator();\n                }\n                // It is a declaration.\n                return collectRegex();\n            }\n            return collectRegex();\n        }\n        if (prevToken.type === 'Keyword') {\n            return collectRegex();\n        }\n        return scanPunctuator();\n    }\n\n    function advance() {\n        var ch;\n\n        skipComment();\n\n        if (index >= length) {\n            return {\n                type: Token.EOF,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [index, index]\n            };\n        }\n\n        ch = source.charCodeAt(index);\n\n        // Very common: ( and ) and ;\n        if (ch === 0x28 || ch === 0x29 || ch === 0x3A) {\n            return scanPunctuator();\n        }\n\n        // String literal starts with single quote (U+0027) or double quote (U+0022).\n        if (ch === 0x27 || ch === 0x22) {\n            return scanStringLiteral();\n        }\n\n        if (isIdentifierStart(ch)) {\n            return scanIdentifier();\n        }\n\n        // Dot (.) U+002E can also start a floating-point number, hence the need\n        // to check the next character.\n        if (ch === 0x2E) {\n            if (isDecimalDigit(source.charCodeAt(index + 1))) {\n                return scanNumericLiteral();\n            }\n            return scanPunctuator();\n        }\n\n        if (isDecimalDigit(ch)) {\n            return scanNumericLiteral();\n        }\n\n        // Slash (/) U+002F can also start a regex.\n        if (extra.tokenize && ch === 0x2F) {\n            return advanceSlash();\n        }\n\n        return scanPunctuator();\n    }\n\n    function collectToken() {\n        var start, loc, token, range, value;\n\n        skipComment();\n        start = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        token = advance();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        if (token.type !== Token.EOF) {\n            range = [token.range[0], token.range[1]];\n            value = source.slice(token.range[0], token.range[1]);\n            extra.tokens.push({\n                type: TokenName[token.type],\n                value: value,\n                range: range,\n                loc: loc\n            });\n        }\n\n        return token;\n    }\n\n    function lex() {\n        var token;\n\n        token = lookahead;\n        index = token.range[1];\n        lineNumber = token.lineNumber;\n        lineStart = token.lineStart;\n\n        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();\n\n        index = token.range[1];\n        lineNumber = token.lineNumber;\n        lineStart = token.lineStart;\n\n        return token;\n    }\n\n    function peek() {\n        var pos, line, start;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n    }\n\n    SyntaxTreeDelegate = {\n\n        name: 'SyntaxTree',\n\n        markStart: function () {\n            skipComment();\n            if (extra.loc) {\n                state.markerStack.push(index - lineStart);\n                state.markerStack.push(lineNumber);\n            }\n            if (extra.range) {\n                state.markerStack.push(index);\n            }\n        },\n\n        processComment: function (node) {\n            var i, attacher, pos, len, candidate;\n\n            if (typeof node.type === 'undefined' || node.type === Syntax.Program) {\n                return;\n            }\n\n            // Check for possible additional trailing comments.\n            peek();\n\n            for (i = 0; i < extra.pendingComments.length; ++i) {\n                attacher = extra.pendingComments[i];\n                if (node.range[0] >= attacher.comment.range[1]) {\n                    candidate = attacher.leading;\n                    if (candidate) {\n                        pos = candidate.range[0];\n                        len = candidate.range[1] - pos;\n                        if (node.range[0] <= pos && (node.range[1] - node.range[0] >= len)) {\n                            attacher.leading = node;\n                        }\n                    } else {\n                        attacher.leading = node;\n                    }\n                }\n                if (node.range[1] <= attacher.comment.range[0]) {\n                    candidate = attacher.trailing;\n                    if (candidate) {\n                        pos = candidate.range[0];\n                        len = candidate.range[1] - pos;\n                        if (node.range[0] <= pos && (node.range[1] - node.range[0] >= len)) {\n                            attacher.trailing = node;\n                        }\n                    } else {\n                        attacher.trailing = node;\n                    }\n                }\n            }\n        },\n\n        markEnd: function (node) {\n            if (extra.range) {\n                node.range = [state.markerStack.pop(), index];\n            }\n            if (extra.loc) {\n                node.loc = {\n                    start: {\n                        line: state.markerStack.pop(),\n                        column: state.markerStack.pop()\n                    },\n                    end: {\n                        line: lineNumber,\n                        column: index - lineStart\n                    }\n                };\n                this.postProcess(node);\n            }\n            if (extra.attachComment) {\n                this.processComment(node);\n            }\n            return node;\n        },\n\n        markEndIf: function (node) {\n            if (node.range || node.loc) {\n                if (extra.loc) {\n                    state.markerStack.pop();\n                    state.markerStack.pop();\n                }\n                if (extra.range) {\n                    state.markerStack.pop();\n                }\n            } else {\n                this.markEnd(node);\n            }\n            return node;\n        },\n\n        postProcess: function (node) {\n            if (extra.source) {\n                node.loc.source = extra.source;\n            }\n            return node;\n        },\n\n        createArrayExpression: function (elements) {\n            return {\n                type: Syntax.ArrayExpression,\n                elements: elements\n            };\n        },\n\n        createAssignmentExpression: function (operator, left, right) {\n            return {\n                type: Syntax.AssignmentExpression,\n                operator: operator,\n                left: left,\n                right: right\n            };\n        },\n\n        createBinaryExpression: function (operator, left, right) {\n            var type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression :\n                        Syntax.BinaryExpression;\n            return {\n                type: type,\n                operator: operator,\n                left: left,\n                right: right\n            };\n        },\n\n        createBlockStatement: function (body) {\n            return {\n                type: Syntax.BlockStatement,\n                body: body\n            };\n        },\n\n        createBreakStatement: function (label) {\n            return {\n                type: Syntax.BreakStatement,\n                label: label\n            };\n        },\n\n        createCallExpression: function (callee, args) {\n            return {\n                type: Syntax.CallExpression,\n                callee: callee,\n                'arguments': args\n            };\n        },\n\n        createCatchClause: function (param, body) {\n            return {\n                type: Syntax.CatchClause,\n                param: param,\n                body: body\n            };\n        },\n\n        createConditionalExpression: function (test, consequent, alternate) {\n            return {\n                type: Syntax.ConditionalExpression,\n                test: test,\n                consequent: consequent,\n                alternate: alternate\n            };\n        },\n\n        createContinueStatement: function (label) {\n            return {\n                type: Syntax.ContinueStatement,\n                label: label\n            };\n        },\n\n        createDebuggerStatement: function () {\n            return {\n                type: Syntax.DebuggerStatement\n            };\n        },\n\n        createDoWhileStatement: function (body, test) {\n            return {\n                type: Syntax.DoWhileStatement,\n                body: body,\n                test: test\n            };\n        },\n\n        createEmptyStatement: function () {\n            return {\n                type: Syntax.EmptyStatement\n            };\n        },\n\n        createExpressionStatement: function (expression) {\n            return {\n                type: Syntax.ExpressionStatement,\n                expression: expression\n            };\n        },\n\n        createForStatement: function (init, test, update, body) {\n            return {\n                type: Syntax.ForStatement,\n                init: init,\n                test: test,\n                update: update,\n                body: body\n            };\n        },\n\n        createForInStatement: function (left, right, body) {\n            return {\n                type: Syntax.ForInStatement,\n                left: left,\n                right: right,\n                body: body,\n                each: false\n            };\n        },\n\n        createFunctionDeclaration: function (id, params, defaults, body) {\n            return {\n                type: Syntax.FunctionDeclaration,\n                id: id,\n                params: params,\n                defaults: defaults,\n                body: body,\n                rest: null,\n                generator: false,\n                expression: false\n            };\n        },\n\n        createFunctionExpression: function (id, params, defaults, body) {\n            return {\n                type: Syntax.FunctionExpression,\n                id: id,\n                params: params,\n                defaults: defaults,\n                body: body,\n                rest: null,\n                generator: false,\n                expression: false\n            };\n        },\n\n        createIdentifier: function (name) {\n            return {\n                type: Syntax.Identifier,\n                name: name\n            };\n        },\n\n        createIfStatement: function (test, consequent, alternate) {\n            return {\n                type: Syntax.IfStatement,\n                test: test,\n                consequent: consequent,\n                alternate: alternate\n            };\n        },\n\n        createLabeledStatement: function (label, body) {\n            return {\n                type: Syntax.LabeledStatement,\n                label: label,\n                body: body\n            };\n        },\n\n        createLiteral: function (token) {\n            return {\n                type: Syntax.Literal,\n                value: token.value,\n                raw: source.slice(token.range[0], token.range[1])\n            };\n        },\n\n        createMemberExpression: function (accessor, object, property) {\n            return {\n                type: Syntax.MemberExpression,\n                computed: accessor === '[',\n                object: object,\n                property: property\n            };\n        },\n\n        createNewExpression: function (callee, args) {\n            return {\n                type: Syntax.NewExpression,\n                callee: callee,\n                'arguments': args\n            };\n        },\n\n        createObjectExpression: function (properties) {\n            return {\n                type: Syntax.ObjectExpression,\n                properties: properties\n            };\n        },\n\n        createPostfixExpression: function (operator, argument) {\n            return {\n                type: Syntax.UpdateExpression,\n                operator: operator,\n                argument: argument,\n                prefix: false\n            };\n        },\n\n        createProgram: function (body) {\n            return {\n                type: Syntax.Program,\n                body: body\n            };\n        },\n\n        createProperty: function (kind, key, value) {\n            return {\n                type: Syntax.Property,\n                key: key,\n                value: value,\n                kind: kind\n            };\n        },\n\n        createReturnStatement: function (argument) {\n            return {\n                type: Syntax.ReturnStatement,\n                argument: argument\n            };\n        },\n\n        createSequenceExpression: function (expressions) {\n            return {\n                type: Syntax.SequenceExpression,\n                expressions: expressions\n            };\n        },\n\n        createSwitchCase: function (test, consequent) {\n            return {\n                type: Syntax.SwitchCase,\n                test: test,\n                consequent: consequent\n            };\n        },\n\n        createSwitchStatement: function (discriminant, cases) {\n            return {\n                type: Syntax.SwitchStatement,\n                discriminant: discriminant,\n                cases: cases\n            };\n        },\n\n        createThisExpression: function () {\n            return {\n                type: Syntax.ThisExpression\n            };\n        },\n\n        createThrowStatement: function (argument) {\n            return {\n                type: Syntax.ThrowStatement,\n                argument: argument\n            };\n        },\n\n        createTryStatement: function (block, guardedHandlers, handlers, finalizer) {\n            return {\n                type: Syntax.TryStatement,\n                block: block,\n                guardedHandlers: guardedHandlers,\n                handlers: handlers,\n                finalizer: finalizer\n            };\n        },\n\n        createUnaryExpression: function (operator, argument) {\n            if (operator === '++' || operator === '--') {\n                return {\n                    type: Syntax.UpdateExpression,\n                    operator: operator,\n                    argument: argument,\n                    prefix: true\n                };\n            }\n            return {\n                type: Syntax.UnaryExpression,\n                operator: operator,\n                argument: argument,\n                prefix: true\n            };\n        },\n\n        createVariableDeclaration: function (declarations, kind) {\n            return {\n                type: Syntax.VariableDeclaration,\n                declarations: declarations,\n                kind: kind\n            };\n        },\n\n        createVariableDeclarator: function (id, init) {\n            return {\n                type: Syntax.VariableDeclarator,\n                id: id,\n                init: init\n            };\n        },\n\n        createWhileStatement: function (test, body) {\n            return {\n                type: Syntax.WhileStatement,\n                test: test,\n                body: body\n            };\n        },\n\n        createWithStatement: function (object, body) {\n            return {\n                type: Syntax.WithStatement,\n                object: object,\n                body: body\n            };\n        }\n    };\n\n    // Return true if there is a line terminator before the next token.\n\n    function peekLineTerminator() {\n        var pos, line, start, found;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        skipComment();\n        found = lineNumber !== line;\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return found;\n    }\n\n    // Throw an exception\n\n    function throwError(token, messageFormat) {\n        var error,\n            args = Array.prototype.slice.call(arguments, 2),\n            msg = messageFormat.replace(\n                /%(\\d)/g,\n                function (whole, index) {\n                    assert(index < args.length, 'Message reference must be in range');\n                    return args[index];\n                }\n            );\n\n        if (typeof token.lineNumber === 'number') {\n            error = new Error('Line ' + token.lineNumber + ': ' + msg);\n            error.index = token.range[0];\n            error.lineNumber = token.lineNumber;\n            error.column = token.range[0] - lineStart + 1;\n        } else {\n            error = new Error('Line ' + lineNumber + ': ' + msg);\n            error.index = index;\n            error.lineNumber = lineNumber;\n            error.column = index - lineStart + 1;\n        }\n\n        error.description = msg;\n        throw error;\n    }\n\n    function throwErrorTolerant() {\n        try {\n            throwError.apply(null, arguments);\n        } catch (e) {\n            if (extra.errors) {\n                extra.errors.push(e);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n\n    // Throw an exception because of the token.\n\n    function throwUnexpected(token) {\n        if (token.type === Token.EOF) {\n            throwError(token, Messages.UnexpectedEOS);\n        }\n\n        if (token.type === Token.NumericLiteral) {\n            throwError(token, Messages.UnexpectedNumber);\n        }\n\n        if (token.type === Token.StringLiteral) {\n            throwError(token, Messages.UnexpectedString);\n        }\n\n        if (token.type === Token.Identifier) {\n            throwError(token, Messages.UnexpectedIdentifier);\n        }\n\n        if (token.type === Token.Keyword) {\n            if (isFutureReservedWord(token.value)) {\n                throwError(token, Messages.UnexpectedReserved);\n            } else if (strict && isStrictModeReservedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictReservedWord);\n                return;\n            }\n            throwError(token, Messages.UnexpectedToken, token.value);\n        }\n\n        // BooleanLiteral, NullLiteral, or Punctuator.\n        throwError(token, Messages.UnexpectedToken, token.value);\n    }\n\n    // Expect the next token to match the specified punctuator.\n    // If not, an exception will be thrown.\n\n    function expect(value) {\n        var token = lex();\n        if (token.type !== Token.Punctuator || token.value !== value) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Expect the next token to match the specified keyword.\n    // If not, an exception will be thrown.\n\n    function expectKeyword(keyword) {\n        var token = lex();\n        if (token.type !== Token.Keyword || token.value !== keyword) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if the next token matches the specified punctuator.\n\n    function match(value) {\n        return lookahead.type === Token.Punctuator && lookahead.value === value;\n    }\n\n    // Return true if the next token matches the specified keyword\n\n    function matchKeyword(keyword) {\n        return lookahead.type === Token.Keyword && lookahead.value === keyword;\n    }\n\n    // Return true if the next token is an assignment operator\n\n    function matchAssign() {\n        var op;\n\n        if (lookahead.type !== Token.Punctuator) {\n            return false;\n        }\n        op = lookahead.value;\n        return op === '=' ||\n            op === '*=' ||\n            op === '/=' ||\n            op === '%=' ||\n            op === '+=' ||\n            op === '-=' ||\n            op === '<<=' ||\n            op === '>>=' ||\n            op === '>>>=' ||\n            op === '&=' ||\n            op === '^=' ||\n            op === '|=';\n    }\n\n    function consumeSemicolon() {\n        var line;\n\n        // Catch the very common case first: immediately a semicolon (U+003B).\n        if (source.charCodeAt(index) === 0x3B) {\n            lex();\n            return;\n        }\n\n        line = lineNumber;\n        skipComment();\n        if (lineNumber !== line) {\n            return;\n        }\n\n        if (match(';')) {\n            lex();\n            return;\n        }\n\n        if (lookahead.type !== Token.EOF && !match('}')) {\n            throwUnexpected(lookahead);\n        }\n    }\n\n    // Return true if provided expression is LeftHandSideExpression\n\n    function isLeftHandSide(expr) {\n        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;\n    }\n\n    // 11.1.4 Array Initialiser\n\n    function parseArrayInitialiser() {\n        var elements = [];\n\n        expect('[');\n\n        while (!match(']')) {\n            if (match(',')) {\n                lex();\n                elements.push(null);\n            } else {\n                elements.push(parseAssignmentExpression());\n\n                if (!match(']')) {\n                    expect(',');\n                }\n            }\n        }\n\n        expect(']');\n\n        return delegate.createArrayExpression(elements);\n    }\n\n    // 11.1.5 Object Initialiser\n\n    function parsePropertyFunction(param, first) {\n        var previousStrict, body;\n\n        previousStrict = strict;\n        delegate.markStart();\n        body = parseFunctionSourceElements();\n        if (first && strict && isRestrictedWord(param[0].name)) {\n            throwErrorTolerant(first, Messages.StrictParamName);\n        }\n        strict = previousStrict;\n        return delegate.markEnd(delegate.createFunctionExpression(null, param, [], body));\n    }\n\n    function parseObjectPropertyKey() {\n        var token;\n\n        delegate.markStart();\n        token = lex();\n\n        // Note: This function is called only from parseObjectProperty(), where\n        // EOF and Punctuator tokens are already filtered out.\n\n        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return delegate.markEnd(delegate.createLiteral(token));\n        }\n\n        return delegate.markEnd(delegate.createIdentifier(token.value));\n    }\n\n    function parseObjectProperty() {\n        var token, key, id, value, param;\n\n        token = lookahead;\n        delegate.markStart();\n\n        if (token.type === Token.Identifier) {\n\n            id = parseObjectPropertyKey();\n\n            // Property Assignment: Getter and Setter.\n\n            if (token.value === 'get' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                expect(')');\n                value = parsePropertyFunction([]);\n                return delegate.markEnd(delegate.createProperty('get', key, value));\n            }\n            if (token.value === 'set' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                token = lookahead;\n                if (token.type !== Token.Identifier) {\n                    expect(')');\n                    throwErrorTolerant(token, Messages.UnexpectedToken, token.value);\n                    value = parsePropertyFunction([]);\n                } else {\n                    param = [ parseVariableIdentifier() ];\n                    expect(')');\n                    value = parsePropertyFunction(param, token);\n                }\n                return delegate.markEnd(delegate.createProperty('set', key, value));\n            }\n            expect(':');\n            value = parseAssignmentExpression();\n            return delegate.markEnd(delegate.createProperty('init', id, value));\n        }\n        if (token.type === Token.EOF || token.type === Token.Punctuator) {\n            throwUnexpected(token);\n        } else {\n            key = parseObjectPropertyKey();\n            expect(':');\n            value = parseAssignmentExpression();\n            return delegate.markEnd(delegate.createProperty('init', key, value));\n        }\n    }\n\n    function parseObjectInitialiser() {\n        var properties = [], property, name, key, kind, map = {}, toString = String;\n\n        expect('{');\n\n        while (!match('}')) {\n            property = parseObjectProperty();\n\n            if (property.key.type === Syntax.Identifier) {\n                name = property.key.name;\n            } else {\n                name = toString(property.key.value);\n            }\n            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;\n\n            key = '$' + name;\n            if (Object.prototype.hasOwnProperty.call(map, key)) {\n                if (map[key] === PropertyKind.Data) {\n                    if (strict && kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);\n                    } else if (kind !== PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    }\n                } else {\n                    if (kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    } else if (map[key] & kind) {\n                        throwErrorTolerant({}, Messages.AccessorGetSet);\n                    }\n                }\n                map[key] |= kind;\n            } else {\n                map[key] = kind;\n            }\n\n            properties.push(property);\n\n            if (!match('}')) {\n                expect(',');\n            }\n        }\n\n        expect('}');\n\n        return delegate.createObjectExpression(properties);\n    }\n\n    // 11.1.6 The Grouping Operator\n\n    function parseGroupExpression() {\n        var expr;\n\n        expect('(');\n\n        expr = parseExpression();\n\n        expect(')');\n\n        return expr;\n    }\n\n\n    // 11.1 Primary Expressions\n\n    function parsePrimaryExpression() {\n        var type, token, expr;\n\n        if (match('(')) {\n            return parseGroupExpression();\n        }\n\n        type = lookahead.type;\n        delegate.markStart();\n\n        if (type === Token.Identifier) {\n            expr =  delegate.createIdentifier(lex().value);\n        } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {\n            if (strict && lookahead.octal) {\n                throwErrorTolerant(lookahead, Messages.StrictOctalLiteral);\n            }\n            expr = delegate.createLiteral(lex());\n        } else if (type === Token.Keyword) {\n            if (matchKeyword('this')) {\n                lex();\n                expr = delegate.createThisExpression();\n            } else if (matchKeyword('function')) {\n                expr = parseFunctionExpression();\n            }\n        } else if (type === Token.BooleanLiteral) {\n            token = lex();\n            token.value = (token.value === 'true');\n            expr = delegate.createLiteral(token);\n        } else if (type === Token.NullLiteral) {\n            token = lex();\n            token.value = null;\n            expr = delegate.createLiteral(token);\n        } else if (match('[')) {\n            expr = parseArrayInitialiser();\n        } else if (match('{')) {\n            expr = parseObjectInitialiser();\n        } else if (match('/') || match('/=')) {\n            if (typeof extra.tokens !== 'undefined') {\n                expr = delegate.createLiteral(collectRegex());\n            } else {\n                expr = delegate.createLiteral(scanRegExp());\n            }\n            peek();\n        }\n\n        if (expr) {\n            return delegate.markEnd(expr);\n        }\n\n        throwUnexpected(lex());\n    }\n\n    // 11.2 Left-Hand-Side Expressions\n\n    function parseArguments() {\n        var args = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            while (index < length) {\n                args.push(parseAssignmentExpression());\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return args;\n    }\n\n    function parseNonComputedProperty() {\n        var token;\n\n        delegate.markStart();\n        token = lex();\n\n        if (!isIdentifierName(token)) {\n            throwUnexpected(token);\n        }\n\n        return delegate.markEnd(delegate.createIdentifier(token.value));\n    }\n\n    function parseNonComputedMember() {\n        expect('.');\n\n        return parseNonComputedProperty();\n    }\n\n    function parseComputedMember() {\n        var expr;\n\n        expect('[');\n\n        expr = parseExpression();\n\n        expect(']');\n\n        return expr;\n    }\n\n    function parseNewExpression() {\n        var callee, args;\n\n        delegate.markStart();\n        expectKeyword('new');\n        callee = parseLeftHandSideExpression();\n        args = match('(') ? parseArguments() : [];\n\n        return delegate.markEnd(delegate.createNewExpression(callee, args));\n    }\n\n    function parseLeftHandSideExpressionAllowCall() {\n        var marker, previousAllowIn, expr, args, property;\n\n        marker = createLocationMarker();\n\n        previousAllowIn = state.allowIn;\n        state.allowIn = true;\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n        state.allowIn = previousAllowIn;\n\n        while (match('.') || match('[') || match('(')) {\n            if (match('(')) {\n                args = parseArguments();\n                expr = delegate.createCallExpression(expr, args);\n            } else if (match('[')) {\n                property = parseComputedMember();\n                expr = delegate.createMemberExpression('[', expr, property);\n            } else {\n                property = parseNonComputedMember();\n                expr = delegate.createMemberExpression('.', expr, property);\n            }\n            if (marker) {\n                marker.apply(expr);\n            }\n        }\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpression() {\n        var marker, previousAllowIn, expr, property;\n\n        marker = createLocationMarker();\n\n        previousAllowIn = state.allowIn;\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n        state.allowIn = previousAllowIn;\n\n        while (match('.') || match('[')) {\n            if (match('[')) {\n                property = parseComputedMember();\n                expr = delegate.createMemberExpression('[', expr, property);\n            } else {\n                property = parseNonComputedMember();\n                expr = delegate.createMemberExpression('.', expr, property);\n            }\n            if (marker) {\n                marker.apply(expr);\n            }\n        }\n\n        return expr;\n    }\n\n    // 11.3 Postfix Expressions\n\n    function parsePostfixExpression() {\n        var expr, token;\n\n        delegate.markStart();\n        expr = parseLeftHandSideExpressionAllowCall();\n\n        if (lookahead.type === Token.Punctuator) {\n            if ((match('++') || match('--')) && !peekLineTerminator()) {\n                // 11.3.1, 11.3.2\n                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                    throwErrorTolerant({}, Messages.StrictLHSPostfix);\n                }\n\n                if (!isLeftHandSide(expr)) {\n                    throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n                }\n\n                token = lex();\n                expr = delegate.createPostfixExpression(token.value, expr);\n            }\n        }\n\n        return delegate.markEndIf(expr);\n    }\n\n    // 11.4 Unary Operators\n\n    function parseUnaryExpression() {\n        var token, expr;\n\n        delegate.markStart();\n\n        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {\n            expr = parsePostfixExpression();\n        } else if (match('++') || match('--')) {\n            token = lex();\n            expr = parseUnaryExpression();\n            // 11.4.4, 11.4.5\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant({}, Messages.StrictLHSPrefix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = delegate.createUnaryExpression(token.value, expr);\n        } else if (match('+') || match('-') || match('~') || match('!')) {\n            token = lex();\n            expr = parseUnaryExpression();\n            expr = delegate.createUnaryExpression(token.value, expr);\n        } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n            token = lex();\n            expr = parseUnaryExpression();\n            expr = delegate.createUnaryExpression(token.value, expr);\n            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\n                throwErrorTolerant({}, Messages.StrictDelete);\n            }\n        } else {\n            expr = parsePostfixExpression();\n        }\n\n        return delegate.markEndIf(expr);\n    }\n\n    function binaryPrecedence(token, allowIn) {\n        var prec = 0;\n\n        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {\n            return 0;\n        }\n\n        switch (token.value) {\n        case '||':\n            prec = 1;\n            break;\n\n        case '&&':\n            prec = 2;\n            break;\n\n        case '|':\n            prec = 3;\n            break;\n\n        case '^':\n            prec = 4;\n            break;\n\n        case '&':\n            prec = 5;\n            break;\n\n        case '==':\n        case '!=':\n        case '===':\n        case '!==':\n            prec = 6;\n            break;\n\n        case '<':\n        case '>':\n        case '<=':\n        case '>=':\n        case 'instanceof':\n            prec = 7;\n            break;\n\n        case 'in':\n            prec = allowIn ? 7 : 0;\n            break;\n\n        case '<<':\n        case '>>':\n        case '>>>':\n            prec = 8;\n            break;\n\n        case '+':\n        case '-':\n            prec = 9;\n            break;\n\n        case '*':\n        case '/':\n        case '%':\n            prec = 11;\n            break;\n\n        default:\n            break;\n        }\n\n        return prec;\n    }\n\n    // 11.5 Multiplicative Operators\n    // 11.6 Additive Operators\n    // 11.7 Bitwise Shift Operators\n    // 11.8 Relational Operators\n    // 11.9 Equality Operators\n    // 11.10 Binary Bitwise Operators\n    // 11.11 Binary Logical Operators\n\n    function parseBinaryExpression() {\n        var marker, markers, expr, token, prec, stack, right, operator, left, i;\n\n        marker = createLocationMarker();\n        left = parseUnaryExpression();\n\n        token = lookahead;\n        prec = binaryPrecedence(token, state.allowIn);\n        if (prec === 0) {\n            return left;\n        }\n        token.prec = prec;\n        lex();\n\n        markers = [marker, createLocationMarker()];\n        right = parseUnaryExpression();\n\n        stack = [left, token, right];\n\n        while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {\n\n            // Reduce: make a binary expression from the three topmost entries.\n            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n                right = stack.pop();\n                operator = stack.pop().value;\n                left = stack.pop();\n                expr = delegate.createBinaryExpression(operator, left, right);\n                markers.pop();\n                marker = markers.pop();\n                if (marker) {\n                    marker.apply(expr);\n                }\n                stack.push(expr);\n                markers.push(marker);\n            }\n\n            // Shift.\n            token = lex();\n            token.prec = prec;\n            stack.push(token);\n            markers.push(createLocationMarker());\n            expr = parseUnaryExpression();\n            stack.push(expr);\n        }\n\n        // Final reduce to clean-up the stack.\n        i = stack.length - 1;\n        expr = stack[i];\n        markers.pop();\n        while (i > 1) {\n            expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);\n            i -= 2;\n            marker = markers.pop();\n            if (marker) {\n                marker.apply(expr);\n            }\n        }\n\n        return expr;\n    }\n\n\n    // 11.12 Conditional Operator\n\n    function parseConditionalExpression() {\n        var expr, previousAllowIn, consequent, alternate;\n\n        delegate.markStart();\n        expr = parseBinaryExpression();\n\n        if (match('?')) {\n            lex();\n            previousAllowIn = state.allowIn;\n            state.allowIn = true;\n            consequent = parseAssignmentExpression();\n            state.allowIn = previousAllowIn;\n            expect(':');\n            alternate = parseAssignmentExpression();\n\n            expr = delegate.markEnd(delegate.createConditionalExpression(expr, consequent, alternate));\n        } else {\n            delegate.markEnd({});\n        }\n\n        return expr;\n    }\n\n    // 11.13 Assignment Operators\n\n    function parseAssignmentExpression() {\n        var token, left, right, node;\n\n        token = lookahead;\n        delegate.markStart();\n        node = left = parseConditionalExpression();\n\n        if (matchAssign()) {\n            // LeftHandSideExpression\n            if (!isLeftHandSide(left)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            // 11.13.1\n            if (strict && left.type === Syntax.Identifier && isRestrictedWord(left.name)) {\n                throwErrorTolerant(token, Messages.StrictLHSAssignment);\n            }\n\n            token = lex();\n            right = parseAssignmentExpression();\n            node = delegate.createAssignmentExpression(token.value, left, right);\n        }\n\n        return delegate.markEndIf(node);\n    }\n\n    // 11.14 Comma Operator\n\n    function parseExpression() {\n        var expr;\n\n        delegate.markStart();\n        expr = parseAssignmentExpression();\n\n        if (match(',')) {\n            expr = delegate.createSequenceExpression([ expr ]);\n\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expr.expressions.push(parseAssignmentExpression());\n            }\n        }\n\n        return delegate.markEndIf(expr);\n    }\n\n    // 12.1 Block\n\n    function parseStatementList() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseSourceElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseBlock() {\n        var block;\n\n        delegate.markStart();\n        expect('{');\n\n        block = parseStatementList();\n\n        expect('}');\n\n        return delegate.markEnd(delegate.createBlockStatement(block));\n    }\n\n    // 12.2 Variable Statement\n\n    function parseVariableIdentifier() {\n        var token;\n\n        delegate.markStart();\n        token = lex();\n\n        if (token.type !== Token.Identifier) {\n            throwUnexpected(token);\n        }\n\n        return delegate.markEnd(delegate.createIdentifier(token.value));\n    }\n\n    function parseVariableDeclaration(kind) {\n        var init = null, id;\n\n        delegate.markStart();\n        id = parseVariableIdentifier();\n\n        // 12.2.1\n        if (strict && isRestrictedWord(id.name)) {\n            throwErrorTolerant({}, Messages.StrictVarName);\n        }\n\n        if (kind === 'const') {\n            expect('=');\n            init = parseAssignmentExpression();\n        } else if (match('=')) {\n            lex();\n            init = parseAssignmentExpression();\n        }\n\n        return delegate.markEnd(delegate.createVariableDeclarator(id, init));\n    }\n\n    function parseVariableDeclarationList(kind) {\n        var list = [];\n\n        do {\n            list.push(parseVariableDeclaration(kind));\n            if (!match(',')) {\n                break;\n            }\n            lex();\n        } while (index < length);\n\n        return list;\n    }\n\n    function parseVariableStatement() {\n        var declarations;\n\n        expectKeyword('var');\n\n        declarations = parseVariableDeclarationList();\n\n        consumeSemicolon();\n\n        return delegate.createVariableDeclaration(declarations, 'var');\n    }\n\n    // kind may be `const` or `let`\n    // Both are experimental and not in the specification yet.\n    // see http://wiki.ecmascript.org/doku.php?id=harmony:const\n    // and http://wiki.ecmascript.org/doku.php?id=harmony:let\n    function parseConstLetDeclaration(kind) {\n        var declarations;\n\n        delegate.markStart();\n\n        expectKeyword(kind);\n\n        declarations = parseVariableDeclarationList(kind);\n\n        consumeSemicolon();\n\n        return delegate.markEnd(delegate.createVariableDeclaration(declarations, kind));\n    }\n\n    // 12.3 Empty Statement\n\n    function parseEmptyStatement() {\n        expect(';');\n        return delegate.createEmptyStatement();\n    }\n\n    // 12.4 Expression Statement\n\n    function parseExpressionStatement() {\n        var expr = parseExpression();\n        consumeSemicolon();\n        return delegate.createExpressionStatement(expr);\n    }\n\n    // 12.5 If statement\n\n    function parseIfStatement() {\n        var test, consequent, alternate;\n\n        expectKeyword('if');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        consequent = parseStatement();\n\n        if (matchKeyword('else')) {\n            lex();\n            alternate = parseStatement();\n        } else {\n            alternate = null;\n        }\n\n        return delegate.createIfStatement(test, consequent, alternate);\n    }\n\n    // 12.6 Iteration Statements\n\n    function parseDoWhileStatement() {\n        var body, test, oldInIteration;\n\n        expectKeyword('do');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        if (match(';')) {\n            lex();\n        }\n\n        return delegate.createDoWhileStatement(body, test);\n    }\n\n    function parseWhileStatement() {\n        var test, body, oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return delegate.createWhileStatement(test, body);\n    }\n\n    function parseForVariableDeclaration() {\n        var token, declarations;\n\n        delegate.markStart();\n        token = lex();\n        declarations = parseVariableDeclarationList();\n\n        return delegate.markEnd(delegate.createVariableDeclaration(declarations, token.value));\n    }\n\n    function parseForStatement() {\n        var init, test, update, left, right, body, oldInIteration;\n\n        init = test = update = null;\n\n        expectKeyword('for');\n\n        expect('(');\n\n        if (match(';')) {\n            lex();\n        } else {\n            if (matchKeyword('var') || matchKeyword('let')) {\n                state.allowIn = false;\n                init = parseForVariableDeclaration();\n                state.allowIn = true;\n\n                if (init.declarations.length === 1 && matchKeyword('in')) {\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            } else {\n                state.allowIn = false;\n                init = parseExpression();\n                state.allowIn = true;\n\n                if (matchKeyword('in')) {\n                    // LeftHandSideExpression\n                    if (!isLeftHandSide(init)) {\n                        throwErrorTolerant({}, Messages.InvalidLHSInForIn);\n                    }\n\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            }\n\n            if (typeof left === 'undefined') {\n                expect(';');\n            }\n        }\n\n        if (typeof left === 'undefined') {\n\n            if (!match(';')) {\n                test = parseExpression();\n            }\n            expect(';');\n\n            if (!match(')')) {\n                update = parseExpression();\n            }\n        }\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return (typeof left === 'undefined') ?\n                delegate.createForStatement(init, test, update, body) :\n                delegate.createForInStatement(left, right, body);\n    }\n\n    // 12.7 The continue statement\n\n    function parseContinueStatement() {\n        var label = null, key;\n\n        expectKeyword('continue');\n\n        // Optimize the most common form: 'continue;'.\n        if (source.charCodeAt(index) === 0x3B) {\n            lex();\n\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return delegate.createContinueStatement(null);\n        }\n\n        if (peekLineTerminator()) {\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return delegate.createContinueStatement(null);\n        }\n\n        if (lookahead.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            key = '$' + label.name;\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !state.inIteration) {\n            throwError({}, Messages.IllegalContinue);\n        }\n\n        return delegate.createContinueStatement(label);\n    }\n\n    // 12.8 The break statement\n\n    function parseBreakStatement() {\n        var label = null, key;\n\n        expectKeyword('break');\n\n        // Catch the very common case first: immediately a semicolon (U+003B).\n        if (source.charCodeAt(index) === 0x3B) {\n            lex();\n\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return delegate.createBreakStatement(null);\n        }\n\n        if (peekLineTerminator()) {\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return delegate.createBreakStatement(null);\n        }\n\n        if (lookahead.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            key = '$' + label.name;\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !(state.inIteration || state.inSwitch)) {\n            throwError({}, Messages.IllegalBreak);\n        }\n\n        return delegate.createBreakStatement(label);\n    }\n\n    // 12.9 The return statement\n\n    function parseReturnStatement() {\n        var argument = null;\n\n        expectKeyword('return');\n\n        if (!state.inFunctionBody) {\n            throwErrorTolerant({}, Messages.IllegalReturn);\n        }\n\n        // 'return' followed by a space and an identifier is very common.\n        if (source.charCodeAt(index) === 0x20) {\n            if (isIdentifierStart(source.charCodeAt(index + 1))) {\n                argument = parseExpression();\n                consumeSemicolon();\n                return delegate.createReturnStatement(argument);\n            }\n        }\n\n        if (peekLineTerminator()) {\n            return delegate.createReturnStatement(null);\n        }\n\n        if (!match(';')) {\n            if (!match('}') && lookahead.type !== Token.EOF) {\n                argument = parseExpression();\n            }\n        }\n\n        consumeSemicolon();\n\n        return delegate.createReturnStatement(argument);\n    }\n\n    // 12.10 The with statement\n\n    function parseWithStatement() {\n        var object, body;\n\n        if (strict) {\n            throwErrorTolerant({}, Messages.StrictModeWith);\n        }\n\n        expectKeyword('with');\n\n        expect('(');\n\n        object = parseExpression();\n\n        expect(')');\n\n        body = parseStatement();\n\n        return delegate.createWithStatement(object, body);\n    }\n\n    // 12.10 The swith statement\n\n    function parseSwitchCase() {\n        var test,\n            consequent = [],\n            statement;\n\n        delegate.markStart();\n        if (matchKeyword('default')) {\n            lex();\n            test = null;\n        } else {\n            expectKeyword('case');\n            test = parseExpression();\n        }\n        expect(':');\n\n        while (index < length) {\n            if (match('}') || matchKeyword('default') || matchKeyword('case')) {\n                break;\n            }\n            statement = parseStatement();\n            consequent.push(statement);\n        }\n\n        return delegate.markEnd(delegate.createSwitchCase(test, consequent));\n    }\n\n    function parseSwitchStatement() {\n        var discriminant, cases, clause, oldInSwitch, defaultFound;\n\n        expectKeyword('switch');\n\n        expect('(');\n\n        discriminant = parseExpression();\n\n        expect(')');\n\n        expect('{');\n\n        cases = [];\n\n        if (match('}')) {\n            lex();\n            return delegate.createSwitchStatement(discriminant, cases);\n        }\n\n        oldInSwitch = state.inSwitch;\n        state.inSwitch = true;\n        defaultFound = false;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            clause = parseSwitchCase();\n            if (clause.test === null) {\n                if (defaultFound) {\n                    throwError({}, Messages.MultipleDefaultsInSwitch);\n                }\n                defaultFound = true;\n            }\n            cases.push(clause);\n        }\n\n        state.inSwitch = oldInSwitch;\n\n        expect('}');\n\n        return delegate.createSwitchStatement(discriminant, cases);\n    }\n\n    // 12.13 The throw statement\n\n    function parseThrowStatement() {\n        var argument;\n\n        expectKeyword('throw');\n\n        if (peekLineTerminator()) {\n            throwError({}, Messages.NewlineAfterThrow);\n        }\n\n        argument = parseExpression();\n\n        consumeSemicolon();\n\n        return delegate.createThrowStatement(argument);\n    }\n\n    // 12.14 The try statement\n\n    function parseCatchClause() {\n        var param, body;\n\n        delegate.markStart();\n        expectKeyword('catch');\n\n        expect('(');\n        if (match(')')) {\n            throwUnexpected(lookahead);\n        }\n\n        param = parseVariableIdentifier();\n        // 12.14.1\n        if (strict && isRestrictedWord(param.name)) {\n            throwErrorTolerant({}, Messages.StrictCatchVariable);\n        }\n\n        expect(')');\n        body = parseBlock();\n        return delegate.markEnd(delegate.createCatchClause(param, body));\n    }\n\n    function parseTryStatement() {\n        var block, handlers = [], finalizer = null;\n\n        expectKeyword('try');\n\n        block = parseBlock();\n\n        if (matchKeyword('catch')) {\n            handlers.push(parseCatchClause());\n        }\n\n        if (matchKeyword('finally')) {\n            lex();\n            finalizer = parseBlock();\n        }\n\n        if (handlers.length === 0 && !finalizer) {\n            throwError({}, Messages.NoCatchOrFinally);\n        }\n\n        return delegate.createTryStatement(block, [], handlers, finalizer);\n    }\n\n    // 12.15 The debugger statement\n\n    function parseDebuggerStatement() {\n        expectKeyword('debugger');\n\n        consumeSemicolon();\n\n        return delegate.createDebuggerStatement();\n    }\n\n    // 12 Statements\n\n    function parseStatement() {\n        var type = lookahead.type,\n            expr,\n            labeledBody,\n            key;\n\n        if (type === Token.EOF) {\n            throwUnexpected(lookahead);\n        }\n\n        delegate.markStart();\n\n        if (type === Token.Punctuator) {\n            switch (lookahead.value) {\n            case ';':\n                return delegate.markEnd(parseEmptyStatement());\n            case '{':\n                return delegate.markEnd(parseBlock());\n            case '(':\n                return delegate.markEnd(parseExpressionStatement());\n            default:\n                break;\n            }\n        }\n\n        if (type === Token.Keyword) {\n            switch (lookahead.value) {\n            case 'break':\n                return delegate.markEnd(parseBreakStatement());\n            case 'continue':\n                return delegate.markEnd(parseContinueStatement());\n            case 'debugger':\n                return delegate.markEnd(parseDebuggerStatement());\n            case 'do':\n                return delegate.markEnd(parseDoWhileStatement());\n            case 'for':\n                return delegate.markEnd(parseForStatement());\n            case 'function':\n                return delegate.markEnd(parseFunctionDeclaration());\n            case 'if':\n                return delegate.markEnd(parseIfStatement());\n            case 'return':\n                return delegate.markEnd(parseReturnStatement());\n            case 'switch':\n                return delegate.markEnd(parseSwitchStatement());\n            case 'throw':\n                return delegate.markEnd(parseThrowStatement());\n            case 'try':\n                return delegate.markEnd(parseTryStatement());\n            case 'var':\n                return delegate.markEnd(parseVariableStatement());\n            case 'while':\n                return delegate.markEnd(parseWhileStatement());\n            case 'with':\n                return delegate.markEnd(parseWithStatement());\n            default:\n                break;\n            }\n        }\n\n        expr = parseExpression();\n\n        // 12.12 Labelled Statements\n        if ((expr.type === Syntax.Identifier) && match(':')) {\n            lex();\n\n            key = '$' + expr.name;\n            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {\n                throwError({}, Messages.Redeclaration, 'Label', expr.name);\n            }\n\n            state.labelSet[key] = true;\n            labeledBody = parseStatement();\n            delete state.labelSet[key];\n            return delegate.markEnd(delegate.createLabeledStatement(expr, labeledBody));\n        }\n\n        consumeSemicolon();\n\n        return delegate.markEnd(delegate.createExpressionStatement(expr));\n    }\n\n    // 13 Function Definition\n\n    function parseFunctionSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted,\n            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;\n\n        delegate.markStart();\n        expect('{');\n\n        while (index < length) {\n            if (lookahead.type !== Token.StringLiteral) {\n                break;\n            }\n            token = lookahead;\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = source.slice(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        oldLabelSet = state.labelSet;\n        oldInIteration = state.inIteration;\n        oldInSwitch = state.inSwitch;\n        oldInFunctionBody = state.inFunctionBody;\n\n        state.labelSet = {};\n        state.inIteration = false;\n        state.inSwitch = false;\n        state.inFunctionBody = true;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n\n        expect('}');\n\n        state.labelSet = oldLabelSet;\n        state.inIteration = oldInIteration;\n        state.inSwitch = oldInSwitch;\n        state.inFunctionBody = oldInFunctionBody;\n\n        return delegate.markEnd(delegate.createBlockStatement(sourceElements));\n    }\n\n    function parseParams(firstRestricted) {\n        var param, params = [], token, stricted, paramSet, key, message;\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead;\n                param = parseVariableIdentifier();\n                key = '$' + token.value;\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamName;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, key)) {\n                        stricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, key)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[key] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return {\n            params: params,\n            stricted: stricted,\n            firstRestricted: firstRestricted,\n            message: message\n        };\n    }\n\n    function parseFunctionDeclaration() {\n        var id, params = [], body, token, stricted, tmp, firstRestricted, message, previousStrict;\n\n        delegate.markStart();\n\n        expectKeyword('function');\n        token = lookahead;\n        id = parseVariableIdentifier();\n        if (strict) {\n            if (isRestrictedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictFunctionName);\n            }\n        } else {\n            if (isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictFunctionName;\n            } else if (isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictReservedWord;\n            }\n        }\n\n        tmp = parseParams(firstRestricted);\n        params = tmp.params;\n        stricted = tmp.stricted;\n        firstRestricted = tmp.firstRestricted;\n        if (tmp.message) {\n            message = tmp.message;\n        }\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return delegate.markEnd(delegate.createFunctionDeclaration(id, params, [], body));\n    }\n\n    function parseFunctionExpression() {\n        var token, id = null, stricted, firstRestricted, message, tmp, params = [], body, previousStrict;\n\n        delegate.markStart();\n        expectKeyword('function');\n\n        if (!match('(')) {\n            token = lookahead;\n            id = parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    throwErrorTolerant(token, Messages.StrictFunctionName);\n                }\n            } else {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictFunctionName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                }\n            }\n        }\n\n        tmp = parseParams(firstRestricted);\n        params = tmp.params;\n        stricted = tmp.stricted;\n        firstRestricted = tmp.firstRestricted;\n        if (tmp.message) {\n            message = tmp.message;\n        }\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return delegate.markEnd(delegate.createFunctionExpression(id, params, [], body));\n    }\n\n    // 14 Program\n\n    function parseSourceElement() {\n        if (lookahead.type === Token.Keyword) {\n            switch (lookahead.value) {\n            case 'const':\n            case 'let':\n                return parseConstLetDeclaration(lookahead.value);\n            case 'function':\n                return parseFunctionDeclaration();\n            default:\n                return parseStatement();\n            }\n        }\n\n        if (lookahead.type !== Token.EOF) {\n            return parseStatement();\n        }\n    }\n\n    function parseSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted;\n\n        while (index < length) {\n            token = lookahead;\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = source.slice(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        while (index < length) {\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n        return sourceElements;\n    }\n\n    function parseProgram() {\n        var body;\n\n        delegate.markStart();\n        strict = false;\n        peek();\n        body = parseSourceElements();\n        return delegate.markEnd(delegate.createProgram(body));\n    }\n\n    function attachComments() {\n        var i, attacher, comment, leading, trailing;\n\n        for (i = 0; i < extra.pendingComments.length; ++i) {\n            attacher = extra.pendingComments[i];\n            comment = attacher.comment;\n            leading = attacher.leading;\n            if (leading) {\n                if (typeof leading.leadingComments === 'undefined') {\n                    leading.leadingComments = [];\n                }\n                leading.leadingComments.push(attacher.comment);\n            }\n            trailing = attacher.trailing;\n            if (trailing) {\n                if (typeof trailing.trailingComments === 'undefined') {\n                    trailing.trailingComments = [];\n                }\n                trailing.trailingComments.push(attacher.comment);\n            }\n        }\n        extra.pendingComments = [];\n    }\n\n    function filterTokenLocation() {\n        var i, entry, token, tokens = [];\n\n        for (i = 0; i < extra.tokens.length; ++i) {\n            entry = extra.tokens[i];\n            token = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                token.range = entry.range;\n            }\n            if (extra.loc) {\n                token.loc = entry.loc;\n            }\n            tokens.push(token);\n        }\n\n        extra.tokens = tokens;\n    }\n\n    function LocationMarker() {\n        this.startIndex = index;\n        this.startLine = lineNumber;\n        this.startColumn = index - lineStart;\n    }\n\n    LocationMarker.prototype = {\n        constructor: LocationMarker,\n\n        apply: function (node) {\n            if (extra.range) {\n                node.range = [this.startIndex, index];\n            }\n            if (extra.loc) {\n                node.loc = {\n                    start: {\n                        line: this.startLine,\n                        column: this.startColumn\n                    },\n                    end: {\n                        line: lineNumber,\n                        column: index - lineStart\n                    }\n                };\n                node = delegate.postProcess(node);\n            }\n            if (extra.attachComment) {\n                delegate.processComment(node);\n            }\n        }\n    };\n\n    function createLocationMarker() {\n        if (!extra.loc && !extra.range) {\n            return null;\n        }\n\n        skipComment();\n\n        return new LocationMarker();\n    }\n\n    function tokenize(code, options) {\n        var toString,\n            token,\n            tokens;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        delegate = SyntaxTreeDelegate;\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        lookahead = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false,\n            lastCommentStart: -1\n        };\n\n        extra = {};\n\n        // Options matching.\n        options = options || {};\n\n        // Of course we collect tokens here.\n        options.tokens = true;\n        extra.tokens = [];\n        extra.tokenize = true;\n        // The following two fields are necessary to compute the Regex tokens.\n        extra.openParenToken = -1;\n        extra.openCurlyToken = -1;\n\n        extra.range = (typeof options.range === 'boolean') && options.range;\n        extra.loc = (typeof options.loc === 'boolean') && options.loc;\n\n        if (typeof options.comment === 'boolean' && options.comment) {\n            extra.comments = [];\n        }\n        if (typeof options.tolerant === 'boolean' && options.tolerant) {\n            extra.errors = [];\n        }\n\n        if (length > 0) {\n            if (typeof source[0] === 'undefined') {\n                // Try first to convert to a string. This is good as fast path\n                // for old IE which understands string indexing for string\n                // literals only and not for string object.\n                if (code instanceof String) {\n                    source = code.valueOf();\n                }\n            }\n        }\n\n        try {\n            peek();\n            if (lookahead.type === Token.EOF) {\n                return extra.tokens;\n            }\n\n            token = lex();\n            while (lookahead.type !== Token.EOF) {\n                try {\n                    token = lex();\n                } catch (lexError) {\n                    token = lookahead;\n                    if (extra.errors) {\n                        extra.errors.push(lexError);\n                        // We have to break on the first error\n                        // to avoid infinite loops.\n                        break;\n                    } else {\n                        throw lexError;\n                    }\n                }\n            }\n\n            filterTokenLocation();\n            tokens = extra.tokens;\n            if (typeof extra.comments !== 'undefined') {\n                tokens.comments = extra.comments;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                tokens.errors = extra.errors;\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            extra = {};\n        }\n        return tokens;\n    }\n\n    function parse(code, options) {\n        var program, toString;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        delegate = SyntaxTreeDelegate;\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        lookahead = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false,\n            lastCommentStart: -1,\n            markerStack: []\n        };\n\n        extra = {};\n        if (typeof options !== 'undefined') {\n            extra.range = (typeof options.range === 'boolean') && options.range;\n            extra.loc = (typeof options.loc === 'boolean') && options.loc;\n            extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;\n\n            if (extra.loc && options.source !== null && options.source !== undefined) {\n                extra.source = toString(options.source);\n            }\n\n            if (typeof options.tokens === 'boolean' && options.tokens) {\n                extra.tokens = [];\n            }\n            if (typeof options.comment === 'boolean' && options.comment) {\n                extra.comments = [];\n            }\n            if (typeof options.tolerant === 'boolean' && options.tolerant) {\n                extra.errors = [];\n            }\n            if (extra.attachComment) {\n                extra.range = true;\n                extra.pendingComments = [];\n                extra.comments = [];\n            }\n        }\n\n        if (length > 0) {\n            if (typeof source[0] === 'undefined') {\n                // Try first to convert to a string. This is good as fast path\n                // for old IE which understands string indexing for string\n                // literals only and not for string object.\n                if (code instanceof String) {\n                    source = code.valueOf();\n                }\n            }\n        }\n\n        try {\n            program = parseProgram();\n            if (typeof extra.comments !== 'undefined') {\n                program.comments = extra.comments;\n            }\n            if (typeof extra.tokens !== 'undefined') {\n                filterTokenLocation();\n                program.tokens = extra.tokens;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                program.errors = extra.errors;\n            }\n            if (extra.attachComment) {\n                attachComments();\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            extra = {};\n        }\n\n        return program;\n    }\n\n    // Sync with *.json manifests.\n    exports.version = '1.1.1';\n\n    exports.tokenize = tokenize;\n\n    exports.parse = parse;\n\n    // Deep copy.\n    exports.Syntax = (function () {\n        var name, types = {};\n\n        if (typeof Object.create === 'function') {\n            types = Object.create(null);\n        }\n\n        for (name in Syntax) {\n            if (Syntax.hasOwnProperty(name)) {\n                types[name] = Syntax[name];\n            }\n        }\n\n        if (typeof Object.freeze === 'function') {\n            Object.freeze(types);\n        }\n\n        return types;\n    }());\n\n}));\n/* vim: set sw=4 ts=4 et tw=80 : */\n"]}