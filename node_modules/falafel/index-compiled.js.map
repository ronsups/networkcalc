{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["var parse = require('acorn').parse;\nvar isArray = require('isarray');\nvar objectKeys = require('object-keys');\nvar forEach = require('foreach');\n\nmodule.exports = function (src, opts, fn) {\n    if (typeof opts === 'function') {\n        fn = opts;\n        opts = {};\n    }\n    if (src && typeof src === 'object' && src.constructor.name === 'Buffer') {\n        src = src.toString();\n    }\n    else if (src && typeof src === 'object') {\n        opts = src;\n        src = opts.source;\n        delete opts.source;\n    }\n    src = src === undefined ? opts.source : src;\n    if (typeof src !== 'string') src = String(src);\n    if (opts.parser) parse = opts.parser.parse;\n    var ast = parse(src, opts);\n    \n    var result = {\n        chunks : src.split(''),\n        toString : function () { return result.chunks.join('') },\n        inspect : function () { return result.toString() }\n    };\n    var index = 0;\n    \n    (function walk (node, parent) {\n        insertHelpers(node, parent, result.chunks);\n        \n        forEach(objectKeys(node), function (key) {\n            if (key === 'parent') return;\n            \n            var child = node[key];\n            if (isArray(child)) {\n                forEach(child, function (c) {\n                    if (c && typeof c.type === 'string') {\n                        walk(c, node);\n                    }\n                });\n            }\n            else if (child && typeof child.type === 'string') {\n                walk(child, node);\n            }\n        });\n        fn(node);\n    })(ast, undefined);\n    \n    return result;\n};\n \nfunction insertHelpers (node, parent, chunks) {\n    node.parent = parent;\n    \n    node.source = function () {\n        return chunks.slice(node.start, node.end).join('');\n    };\n    \n    if (node.update && typeof node.update === 'object') {\n        var prev = node.update;\n        forEach(objectKeys(prev), function (key) {\n            update[key] = prev[key];\n        });\n        node.update = update;\n    }\n    else {\n        node.update = update;\n    }\n    \n    function update (s) {\n        chunks[node.start] = s;\n        for (var i = node.start + 1; i < node.end; i++) {\n            chunks[i] = '';\n        }\n    }\n}\n"]}