{"version":3,"sources":["sync.js"],"names":[],"mappings":";;AAAA,IAAI,OAAO,QAAQ,QAAR,CAAX;AACA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,SAAS,QAAQ,aAAR,CAAb;AACA,IAAI,mBAAmB,QAAQ,yBAAR,CAAvB;;AAEA,OAAO,OAAP,GAAiB,UAAU,CAAV,EAAa,IAAb,EAAmB;AAChC,QAAI,CAAC,IAAL,EAAW,OAAO,EAAP;AACX,QAAI,SAAS,KAAK,MAAL,IAAe,UAAU,IAAV,EAAgB;AACxC,YAAI;AAAE,gBAAI,OAAO,GAAG,QAAH,CAAY,IAAZ,CAAX;AAA8B,SAApC,CACA,OAAO,GAAP,EAAY;AAAE,gBAAI,OAAO,IAAI,IAAJ,KAAa,QAAxB,EAAkC,OAAO,KAAP;AAAc;AAC9D,eAAO,KAAK,MAAL,MAAiB,KAAK,MAAL,EAAxB;AACH,KAJD;AAKA,QAAI,eAAe,KAAK,YAAL,IAAqB,GAAG,YAA3C;;AAEA,QAAI,aAAa,KAAK,UAAL,IAAmB,CAAE,KAAF,CAApC;AACA,QAAI,IAAI,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,QAAb,CAAxB;;AAEA,SAAK,KAAL,GAAa,KAAK,KAAL,IAAc,EAA3B;;AAEA,QAAI,2CAA2C,IAA3C,CAAgD,CAAhD,CAAJ,EAAwD;AACpD,YAAI,MAAM,KAAK,OAAL,CAAa,CAAb,EAAgB,CAAhB,CAAV;AACA,YAAI,MAAM,IAAV,EAAgB,OAAO,GAAP;AAChB,YAAI,IAAI,eAAe,GAAf,KAAuB,oBAAoB,GAApB,CAA/B;AACA,YAAI,CAAJ,EAAO,OAAO,CAAP;AACV,KALD,MAKO;AACH,YAAI,IAAI,oBAAoB,CAApB,EAAuB,CAAvB,CAAR;AACA,YAAI,CAAJ,EAAO,OAAO,CAAP;AACV;;AAED,QAAI,KAAK,CAAL,CAAJ,EAAa,OAAO,CAAP;;AAEb,UAAM,IAAI,KAAJ,CAAU,yBAAyB,CAAzB,GAA6B,UAA7B,GAA0C,CAA1C,GAA8C,GAAxD,CAAN;;AAEA,aAAS,cAAT,CAAyB,CAAzB,EAA4B;AACxB,YAAI,OAAO,CAAP,CAAJ,EAAe;AACX,mBAAO,CAAP;AACH;;AAED,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,WAAW,MAA/B,EAAuC,GAAvC,EAA4C;AACxC,gBAAI,OAAO,IAAI,WAAW,CAAX,CAAf;AACA,gBAAI,OAAO,IAAP,CAAJ,EAAkB;AACd,uBAAO,IAAP;AACH;AACJ;AACJ;;AAED,aAAS,mBAAT,CAA8B,CAA9B,EAAiC;AAC7B,YAAI,UAAU,KAAK,IAAL,CAAU,CAAV,EAAa,eAAb,CAAd;AACA,YAAI,OAAO,OAAP,CAAJ,EAAqB;AACjB,gBAAI,OAAO,aAAa,OAAb,EAAsB,MAAtB,CAAX;AACA,gBAAI;AACA,oBAAI,MAAM,KAAK,KAAL,CAAW,IAAX,CAAV;AACA,oBAAI,KAAK,aAAT,EAAwB;AACpB,0BAAM,KAAK,aAAL,CAAmB,GAAnB,EAAwB,CAAxB,CAAN;AACH;;AAED,oBAAI,IAAI,IAAR,EAAc;AACV,wBAAI,IAAI,eAAe,KAAK,OAAL,CAAa,CAAb,EAAgB,IAAI,IAApB,CAAf,CAAR;AACA,wBAAI,CAAJ,EAAO,OAAO,CAAP;AACP,wBAAI,IAAI,oBAAoB,KAAK,OAAL,CAAa,CAAb,EAAgB,IAAI,IAApB,CAApB,CAAR;AACA,wBAAI,CAAJ,EAAO,OAAO,CAAP;AACV;AACJ,aAZD,CAaA,OAAO,GAAP,EAAY,CAAE;AACjB;;AAED,eAAO,eAAe,KAAK,IAAL,CAAW,CAAX,EAAc,QAAd,CAAf,CAAP;AACH;;AAED,aAAS,mBAAT,CAA8B,CAA9B,EAAiC,KAAjC,EAAwC;AACpC,YAAI,OAAO,iBAAiB,KAAjB,EAAwB,IAAxB,CAAX;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AAClC,gBAAI,MAAM,KAAK,CAAL,CAAV;AACA,gBAAI,IAAI,eAAe,KAAK,IAAL,CAAW,GAAX,EAAgB,GAAhB,EAAqB,CAArB,CAAf,CAAR;AACA,gBAAI,CAAJ,EAAO,OAAO,CAAP;AACP,gBAAI,IAAI,oBAAoB,KAAK,IAAL,CAAW,GAAX,EAAgB,GAAhB,EAAqB,CAArB,CAApB,CAAR;AACA,gBAAI,CAAJ,EAAO,OAAO,CAAP;AACV;AACJ;AACJ,CA1ED","file":"sync-compiled.js","sourcesContent":["var core = require('./core');\nvar fs = require('fs');\nvar path = require('path');\nvar caller = require('./caller.js');\nvar nodeModulesPaths = require('./node-modules-paths.js');\n\nmodule.exports = function (x, opts) {\n    if (!opts) opts = {};\n    var isFile = opts.isFile || function (file) {\n        try { var stat = fs.statSync(file) }\n        catch (err) { if (err && err.code === 'ENOENT') return false }\n        return stat.isFile() || stat.isFIFO();\n    };\n    var readFileSync = opts.readFileSync || fs.readFileSync;\n    \n    var extensions = opts.extensions || [ '.js' ];\n    var y = opts.basedir || path.dirname(caller());\n\n    opts.paths = opts.paths || [];\n\n    if (/^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[\\\\\\/])/.test(x)) {\n        var res = path.resolve(y, x);\n        if (x === '..') res += '/';\n        var m = loadAsFileSync(res) || loadAsDirectorySync(res);\n        if (m) return m;\n    } else {\n        var n = loadNodeModulesSync(x, y);\n        if (n) return n;\n    }\n    \n    if (core[x]) return x;\n    \n    throw new Error(\"Cannot find module '\" + x + \"' from '\" + y + \"'\");\n    \n    function loadAsFileSync (x) {\n        if (isFile(x)) {\n            return x;\n        }\n        \n        for (var i = 0; i < extensions.length; i++) {\n            var file = x + extensions[i];\n            if (isFile(file)) {\n                return file;\n            }\n        }\n    }\n    \n    function loadAsDirectorySync (x) {\n        var pkgfile = path.join(x, '/package.json');\n        if (isFile(pkgfile)) {\n            var body = readFileSync(pkgfile, 'utf8');\n            try {\n                var pkg = JSON.parse(body);\n                if (opts.packageFilter) {\n                    pkg = opts.packageFilter(pkg, x);\n                }\n                \n                if (pkg.main) {\n                    var m = loadAsFileSync(path.resolve(x, pkg.main));\n                    if (m) return m;\n                    var n = loadAsDirectorySync(path.resolve(x, pkg.main));\n                    if (n) return n;\n                }\n            }\n            catch (err) {}\n        }\n        \n        return loadAsFileSync(path.join( x, '/index'));\n    }\n    \n    function loadNodeModulesSync (x, start) {\n        var dirs = nodeModulesPaths(start, opts);\n        for (var i = 0; i < dirs.length; i++) {\n            var dir = dirs[i];\n            var m = loadAsFileSync(path.join( dir, '/', x));\n            if (m) return m;\n            var n = loadAsDirectorySync(path.join( dir, '/', x ));\n            if (n) return n;\n        }\n    }\n};\n"]}