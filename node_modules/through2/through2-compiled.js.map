{"version":3,"sources":["through2.js"],"names":[],"mappings":";;AAAA,IAAI,YAAY,QAAQ,2BAAR,CAAhB;AAAA,IACI,WAAY,QAAQ,MAAR,EAAgB,QADhC;AAAA,IAEI,QAAY,QAAQ,OAAR,CAFhB;;AAIA,SAAS,oBAAT,CAA8B,IAA9B,EAAoC;AAClC,YAAU,IAAV,CAAe,IAAf,EAAqB,IAArB;AACA,OAAK,UAAL,GAAkB,KAAlB;AACD;;AAED,SAAS,oBAAT,EAA+B,SAA/B;;AAEA,qBAAqB,SAArB,CAA+B,OAA/B,GAAyC,UAAS,GAAT,EAAc;AACrD,MAAI,KAAK,UAAT,EAAqB;AACrB,OAAK,UAAL,GAAkB,IAAlB;;AAEA,MAAI,OAAO,IAAX;AACA,UAAQ,QAAR,CAAiB,YAAW;AAC1B,QAAI,GAAJ,EACE,KAAK,IAAL,CAAU,OAAV,EAAmB,GAAnB;AACF,SAAK,IAAL,CAAU,OAAV;AACD,GAJD;AAKD,CAVD;;;AAaA,SAAS,IAAT,CAAe,KAAf,EAAsB,GAAtB,EAA2B,QAA3B,EAAqC;AACnC,WAAS,IAAT,EAAe,KAAf;AACD;;;;AAKD,SAAS,QAAT,CAAmB,SAAnB,EAA8B;AAC5B,SAAO,UAAU,OAAV,EAAmB,SAAnB,EAA8B,KAA9B,EAAqC;AAC1C,QAAI,OAAO,OAAP,IAAkB,UAAtB,EAAkC;AAChC,cAAY,SAAZ;AACA,kBAAY,OAAZ;AACA,gBAAY,EAAZ;AACD;;AAED,QAAI,OAAO,SAAP,IAAoB,UAAxB,EACE,YAAY,IAAZ;;AAEF,QAAI,OAAO,KAAP,IAAgB,UAApB,EACE,QAAQ,IAAR;;AAEF,WAAO,UAAU,OAAV,EAAmB,SAAnB,EAA8B,KAA9B,CAAP;AACD,GAdD;AAeD;;;AAID,OAAO,OAAP,GAAiB,SAAS,UAAU,OAAV,EAAmB,SAAnB,EAA8B,KAA9B,EAAqC;AAC7D,MAAI,KAAK,IAAI,oBAAJ,CAAyB,OAAzB,CAAT;;AAEA,KAAG,UAAH,GAAgB,SAAhB;;AAEA,MAAI,KAAJ,EACE,GAAG,MAAH,GAAY,KAAZ;;AAEF,SAAO,EAAP;AACD,CATgB,CAAjB;;;;AAcA,OAAO,OAAP,CAAe,IAAf,GAAsB,SAAS,UAAU,OAAV,EAAmB,SAAnB,EAA8B,KAA9B,EAAqC;AAClE,WAAS,QAAT,CAAmB,QAAnB,EAA6B;AAC3B,QAAI,EAAE,gBAAgB,QAAlB,CAAJ,EACE,OAAO,IAAI,QAAJ,CAAa,QAAb,CAAP;;AAEF,SAAK,OAAL,GAAe,MAAM,OAAN,EAAe,QAAf,CAAf;;AAEA,yBAAqB,IAArB,CAA0B,IAA1B,EAAgC,KAAK,OAArC;AACD;;AAED,WAAS,QAAT,EAAmB,oBAAnB;;AAEA,WAAS,SAAT,CAAmB,UAAnB,GAAgC,SAAhC;;AAEA,MAAI,KAAJ,EACE,SAAS,SAAT,CAAmB,MAAnB,GAA4B,KAA5B;;AAEF,SAAO,QAAP;AACD,CAlBqB,CAAtB;;AAqBA,OAAO,OAAP,CAAe,GAAf,GAAqB,SAAS,UAAU,OAAV,EAAmB,SAAnB,EAA8B,KAA9B,EAAqC;AACjE,MAAI,KAAK,IAAI,oBAAJ,CAAyB,MAAM,EAAE,YAAY,IAAd,EAAoB,eAAe,EAAnC,EAAN,EAA+C,OAA/C,CAAzB,CAAT;;AAEA,KAAG,UAAH,GAAgB,SAAhB;;AAEA,MAAI,KAAJ,EACE,GAAG,MAAH,GAAY,KAAZ;;AAEF,SAAO,EAAP;AACD,CAToB,CAArB","file":"through2-compiled.js","sourcesContent":["var Transform = require('readable-stream/transform')\n  , inherits  = require('util').inherits\n  , xtend     = require('xtend')\n\nfunction DestroyableTransform(opts) {\n  Transform.call(this, opts)\n  this._destroyed = false\n}\n\ninherits(DestroyableTransform, Transform)\n\nDestroyableTransform.prototype.destroy = function(err) {\n  if (this._destroyed) return\n  this._destroyed = true\n  \n  var self = this\n  process.nextTick(function() {\n    if (err)\n      self.emit('error', err)\n    self.emit('close')\n  })\n}\n\n// a noop _transform function\nfunction noop (chunk, enc, callback) {\n  callback(null, chunk)\n}\n\n\n// create a new export function, used by both the main export and\n// the .ctor export, contains common logic for dealing with arguments\nfunction through2 (construct) {\n  return function (options, transform, flush) {\n    if (typeof options == 'function') {\n      flush     = transform\n      transform = options\n      options   = {}\n    }\n\n    if (typeof transform != 'function')\n      transform = noop\n\n    if (typeof flush != 'function')\n      flush = null\n\n    return construct(options, transform, flush)\n  }\n}\n\n\n// main export, just make me a transform stream!\nmodule.exports = through2(function (options, transform, flush) {\n  var t2 = new DestroyableTransform(options)\n\n  t2._transform = transform\n\n  if (flush)\n    t2._flush = flush\n\n  return t2\n})\n\n\n// make me a reusable prototype that I can `new`, or implicitly `new`\n// with a constructor call\nmodule.exports.ctor = through2(function (options, transform, flush) {\n  function Through2 (override) {\n    if (!(this instanceof Through2))\n      return new Through2(override)\n\n    this.options = xtend(options, override)\n\n    DestroyableTransform.call(this, this.options)\n  }\n\n  inherits(Through2, DestroyableTransform)\n\n  Through2.prototype._transform = transform\n\n  if (flush)\n    Through2.prototype._flush = flush\n\n  return Through2\n})\n\n\nmodule.exports.obj = through2(function (options, transform, flush) {\n  var t2 = new DestroyableTransform(xtend({ objectMode: true, highWaterMark: 16 }, options))\n\n  t2._transform = transform\n\n  if (flush)\n    t2._flush = flush\n\n  return t2\n})\n"]}