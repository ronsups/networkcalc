{"version":3,"sources":["escodegen.js"],"names":[],"mappings":"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","file":"escodegen-compiled.js","sourcesContent":["/*\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>\n  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>\n  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>\n  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>\n  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*global exports:true, generateStatement:true, generateExpression:true, require:true, global:true*/\n(function () {\n    'use strict';\n\n    var Syntax,\n        Precedence,\n        BinaryPrecedence,\n        SourceNode,\n        estraverse,\n        esutils,\n        isArray,\n        base,\n        indent,\n        json,\n        renumber,\n        hexadecimal,\n        quotes,\n        escapeless,\n        newline,\n        space,\n        parentheses,\n        semicolons,\n        safeConcatenation,\n        directive,\n        extra,\n        parse,\n        sourceMap,\n        FORMAT_MINIFY,\n        FORMAT_DEFAULTS;\n\n    estraverse = require('estraverse');\n    esutils = require('esutils');\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ComprehensionBlock: 'ComprehensionBlock',\n        ComprehensionExpression: 'ComprehensionExpression',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DirectiveStatement: 'DirectiveStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExportDeclaration: 'ExportDeclaration',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        ForOfStatement: 'ForOfStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        GeneratorExpression: 'GeneratorExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        ImportDeclaration: 'ImportDeclaration',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n    };\n\n    Precedence = {\n        Sequence: 0,\n        Yield: 1,\n        Assignment: 1,\n        Conditional: 2,\n        ArrowFunction: 2,\n        LogicalOR: 3,\n        LogicalAND: 4,\n        BitwiseOR: 5,\n        BitwiseXOR: 6,\n        BitwiseAND: 7,\n        Equality: 8,\n        Relational: 9,\n        BitwiseSHIFT: 10,\n        Additive: 11,\n        Multiplicative: 12,\n        Unary: 13,\n        Postfix: 14,\n        Call: 15,\n        New: 16,\n        Member: 17,\n        Primary: 18\n    };\n\n    BinaryPrecedence = {\n        '||': Precedence.LogicalOR,\n        '&&': Precedence.LogicalAND,\n        '|': Precedence.BitwiseOR,\n        '^': Precedence.BitwiseXOR,\n        '&': Precedence.BitwiseAND,\n        '==': Precedence.Equality,\n        '!=': Precedence.Equality,\n        '===': Precedence.Equality,\n        '!==': Precedence.Equality,\n        'is': Precedence.Equality,\n        'isnt': Precedence.Equality,\n        '<': Precedence.Relational,\n        '>': Precedence.Relational,\n        '<=': Precedence.Relational,\n        '>=': Precedence.Relational,\n        'in': Precedence.Relational,\n        'instanceof': Precedence.Relational,\n        '<<': Precedence.BitwiseSHIFT,\n        '>>': Precedence.BitwiseSHIFT,\n        '>>>': Precedence.BitwiseSHIFT,\n        '+': Precedence.Additive,\n        '-': Precedence.Additive,\n        '*': Precedence.Multiplicative,\n        '%': Precedence.Multiplicative,\n        '/': Precedence.Multiplicative\n    };\n\n    function getDefaultOptions() {\n        // default options\n        return {\n            indent: null,\n            base: null,\n            parse: null,\n            comment: false,\n            format: {\n                indent: {\n                    style: '    ',\n                    base: 0,\n                    adjustMultilineComment: false\n                },\n                newline: '\\n',\n                space: ' ',\n                json: false,\n                renumber: false,\n                hexadecimal: false,\n                quotes: 'single',\n                escapeless: false,\n                compact: false,\n                parentheses: true,\n                semicolons: true,\n                safeConcatenation: false\n            },\n            moz: {\n                comprehensionExpressionStartsWithAssignment: false,\n                starlessGenerator: false,\n                parenthesizedComprehensionBlock: false\n            },\n            sourceMap: null,\n            sourceMapRoot: null,\n            sourceMapWithCode: false,\n            directive: false,\n            raw: true,\n            verbatim: null\n        };\n    }\n\n    function stringRepeat(str, num) {\n        var result = '';\n\n        for (num |= 0; num > 0; num >>>= 1, str += str) {\n            if (num & 1) {\n                result += str;\n            }\n        }\n\n        return result;\n    }\n\n    isArray = Array.isArray;\n    if (!isArray) {\n        isArray = function isArray(array) {\n            return Object.prototype.toString.call(array) === '[object Array]';\n        };\n    }\n\n    function hasLineTerminator(str) {\n        return (/[\\r\\n]/g).test(str);\n    }\n\n    function endsWithLineTerminator(str) {\n        var len = str.length;\n        return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));\n    }\n\n    function updateDeeply(target, override) {\n        var key, val;\n\n        function isHashObject(target) {\n            return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);\n        }\n\n        for (key in override) {\n            if (override.hasOwnProperty(key)) {\n                val = override[key];\n                if (isHashObject(val)) {\n                    if (isHashObject(target[key])) {\n                        updateDeeply(target[key], val);\n                    } else {\n                        target[key] = updateDeeply({}, val);\n                    }\n                } else {\n                    target[key] = val;\n                }\n            }\n        }\n        return target;\n    }\n\n    function generateNumber(value) {\n        var result, point, temp, exponent, pos;\n\n        if (value !== value) {\n            throw new Error('Numeric literal whose value is NaN');\n        }\n        if (value < 0 || (value === 0 && 1 / value < 0)) {\n            throw new Error('Numeric literal whose value is negative');\n        }\n\n        if (value === 1 / 0) {\n            return json ? 'null' : renumber ? '1e400' : '1e+400';\n        }\n\n        result = '' + value;\n        if (!renumber || result.length < 3) {\n            return result;\n        }\n\n        point = result.indexOf('.');\n        if (!json && result.charCodeAt(0) === 0x30  /* 0 */ && point === 1) {\n            point = 0;\n            result = result.slice(1);\n        }\n        temp = result;\n        result = result.replace('e+', 'e');\n        exponent = 0;\n        if ((pos = temp.indexOf('e')) > 0) {\n            exponent = +temp.slice(pos + 1);\n            temp = temp.slice(0, pos);\n        }\n        if (point >= 0) {\n            exponent -= temp.length - point - 1;\n            temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';\n        }\n        pos = 0;\n        while (temp.charCodeAt(temp.length + pos - 1) === 0x30  /* 0 */) {\n            --pos;\n        }\n        if (pos !== 0) {\n            exponent -= pos;\n            temp = temp.slice(0, pos);\n        }\n        if (exponent !== 0) {\n            temp += 'e' + exponent;\n        }\n        if ((temp.length < result.length ||\n                    (hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length)) &&\n                +temp === value) {\n            result = temp;\n        }\n\n        return result;\n    }\n\n    // Generate valid RegExp expression.\n    // This function is based on https://github.com/Constellation/iv Engine\n\n    function escapeRegExpCharacter(ch, previousIsBackslash) {\n        // not handling '\\' and handling \\u2028 or \\u2029 to unicode escape sequence\n        if ((ch & ~1) === 0x2028) {\n            return (previousIsBackslash ? 'u' : '\\\\u') + ((ch === 0x2028) ? '2028' : '2029');\n        } else if (ch === 10 || ch === 13) {  // \\n, \\r\n            return (previousIsBackslash ? '' : '\\\\') + ((ch === 10) ? 'n' : 'r');\n        }\n        return String.fromCharCode(ch);\n    }\n\n    function generateRegExp(reg) {\n        var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;\n\n        result = reg.toString();\n\n        if (reg.source) {\n            // extract flag from toString result\n            match = result.match(/\\/([^/]*)$/);\n            if (!match) {\n                return result;\n            }\n\n            flags = match[1];\n            result = '';\n\n            characterInBrack = false;\n            previousIsBackslash = false;\n            for (i = 0, iz = reg.source.length; i < iz; ++i) {\n                ch = reg.source.charCodeAt(i);\n\n                if (!previousIsBackslash) {\n                    if (characterInBrack) {\n                        if (ch === 93) {  // ]\n                            characterInBrack = false;\n                        }\n                    } else {\n                        if (ch === 47) {  // /\n                            result += '\\\\';\n                        } else if (ch === 91) {  // [\n                            characterInBrack = true;\n                        }\n                    }\n                    result += escapeRegExpCharacter(ch, previousIsBackslash);\n                    previousIsBackslash = ch === 92;  // \\\n                } else {\n                    // if new RegExp(\"\\\\\\n') is provided, create /\\n/\n                    result += escapeRegExpCharacter(ch, previousIsBackslash);\n                    // prevent like /\\\\[/]/\n                    previousIsBackslash = false;\n                }\n            }\n\n            return '/' + result + '/' + flags;\n        }\n\n        return result;\n    }\n\n    function escapeAllowedCharacter(code, next) {\n        var hex, result = '\\\\';\n\n        switch (code) {\n        case 0x08  /* \\b */:\n            result += 'b';\n            break;\n        case 0x0C  /* \\f */:\n            result += 'f';\n            break;\n        case 0x09  /* \\t */:\n            result += 't';\n            break;\n        default:\n            hex = code.toString(16).toUpperCase();\n            if (json || code > 0xFF) {\n                result += 'u' + '0000'.slice(hex.length) + hex;\n            } else if (code === 0x0000 && !esutils.code.isDecimalDigit(next)) {\n                result += '0';\n            } else if (code === 0x000B  /* \\v */) { // '\\v'\n                result += 'x0B';\n            } else {\n                result += 'x' + '00'.slice(hex.length) + hex;\n            }\n            break;\n        }\n\n        return result;\n    }\n\n    function escapeDisallowedCharacter(code) {\n        var result = '\\\\';\n        switch (code) {\n        case 0x5C  /* \\ */:\n            result += '\\\\';\n            break;\n        case 0x0A  /* \\n */:\n            result += 'n';\n            break;\n        case 0x0D  /* \\r */:\n            result += 'r';\n            break;\n        case 0x2028:\n            result += 'u2028';\n            break;\n        case 0x2029:\n            result += 'u2029';\n            break;\n        default:\n            throw new Error('Incorrectly classified character');\n        }\n\n        return result;\n    }\n\n    function escapeDirective(str) {\n        var i, iz, code, quote;\n\n        quote = quotes === 'double' ? '\"' : '\\'';\n        for (i = 0, iz = str.length; i < iz; ++i) {\n            code = str.charCodeAt(i);\n            if (code === 0x27  /* ' */) {\n                quote = '\"';\n                break;\n            } else if (code === 0x22  /* \" */) {\n                quote = '\\'';\n                break;\n            } else if (code === 0x5C  /* \\ */) {\n                ++i;\n            }\n        }\n\n        return quote + str + quote;\n    }\n\n    function escapeString(str) {\n        var result = '', i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;\n\n        for (i = 0, len = str.length; i < len; ++i) {\n            code = str.charCodeAt(i);\n            if (code === 0x27  /* ' */) {\n                ++singleQuotes;\n            } else if (code === 0x22  /* \" */) {\n                ++doubleQuotes;\n            } else if (code === 0x2F  /* / */ && json) {\n                result += '\\\\';\n            } else if (esutils.code.isLineTerminator(code) || code === 0x5C  /* \\ */) {\n                result += escapeDisallowedCharacter(code);\n                continue;\n            } else if ((json && code < 0x20  /* SP */) || !(json || escapeless || (code >= 0x20  /* SP */ && code <= 0x7E  /* ~ */))) {\n                result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));\n                continue;\n            }\n            result += String.fromCharCode(code);\n        }\n\n        single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));\n        quote = single ? '\\'' : '\"';\n\n        if (!(single ? singleQuotes : doubleQuotes)) {\n            return quote + result + quote;\n        }\n\n        str = result;\n        result = quote;\n\n        for (i = 0, len = str.length; i < len; ++i) {\n            code = str.charCodeAt(i);\n            if ((code === 0x27  /* ' */ && single) || (code === 0x22  /* \" */ && !single)) {\n                result += '\\\\';\n            }\n            result += String.fromCharCode(code);\n        }\n\n        return result + quote;\n    }\n\n    /**\n     * flatten an array to a string, where the array can contain\n     * either strings or nested arrays\n     */\n    function flattenToString(arr) {\n        var i, iz, elem, result = '';\n        for (i = 0, iz = arr.length; i < iz; ++i) {\n            elem = arr[i];\n            result += isArray(elem) ? flattenToString(elem) : elem;\n        }\n        return result;\n    }\n\n    /**\n     * convert generated to a SourceNode when source maps are enabled.\n     */\n    function toSourceNodeWhenNeeded(generated, node) {\n        if (!sourceMap) {\n            // with no source maps, generated is either an\n            // array or a string.  if an array, flatten it.\n            // if a string, just return it\n            if (isArray(generated)) {\n                return flattenToString(generated);\n            } else {\n                return generated;\n            }\n        }\n        if (node == null) {\n            if (generated instanceof SourceNode) {\n                return generated;\n            } else {\n                node = {};\n            }\n        }\n        if (node.loc == null) {\n            return new SourceNode(null, null, sourceMap, generated, node.name || null);\n        }\n        return new SourceNode(node.loc.start.line, node.loc.start.column, (sourceMap === true ? node.loc.source || null : sourceMap), generated, node.name || null);\n    }\n\n    function noEmptySpace() {\n        return (space) ? space : ' ';\n    }\n\n    function join(left, right) {\n        var leftSource = toSourceNodeWhenNeeded(left).toString(),\n            rightSource = toSourceNodeWhenNeeded(right).toString(),\n            leftCharCode = leftSource.charCodeAt(leftSource.length - 1),\n            rightCharCode = rightSource.charCodeAt(0);\n\n        if ((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode ||\n        esutils.code.isIdentifierPart(leftCharCode) && esutils.code.isIdentifierPart(rightCharCode) ||\n        leftCharCode === 0x2F  /* / */ && rightCharCode === 0x69  /* i */) { // infix word operators all start with `i`\n            return [left, noEmptySpace(), right];\n        } else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) ||\n                esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) {\n            return [left, right];\n        }\n        return [left, space, right];\n    }\n\n    function addIndent(stmt) {\n        return [base, stmt];\n    }\n\n    function withIndent(fn) {\n        var previousBase, result;\n        previousBase = base;\n        base += indent;\n        result = fn.call(this, base);\n        base = previousBase;\n        return result;\n    }\n\n    function calculateSpaces(str) {\n        var i;\n        for (i = str.length - 1; i >= 0; --i) {\n            if (esutils.code.isLineTerminator(str.charCodeAt(i))) {\n                break;\n            }\n        }\n        return (str.length - 1) - i;\n    }\n\n    function adjustMultilineComment(value, specialBase) {\n        var array, i, len, line, j, spaces, previousBase, sn;\n\n        array = value.split(/\\r\\n|[\\r\\n]/);\n        spaces = Number.MAX_VALUE;\n\n        // first line doesn't have indentation\n        for (i = 1, len = array.length; i < len; ++i) {\n            line = array[i];\n            j = 0;\n            while (j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))) {\n                ++j;\n            }\n            if (spaces > j) {\n                spaces = j;\n            }\n        }\n\n        if (typeof specialBase !== 'undefined') {\n            // pattern like\n            // {\n            //   var t = 20;  /*\n            //                 * this is comment\n            //                 */\n            // }\n            previousBase = base;\n            if (array[1][spaces] === '*') {\n                specialBase += ' ';\n            }\n            base = specialBase;\n        } else {\n            if (spaces & 1) {\n                // /*\n                //  *\n                //  */\n                // If spaces are odd number, above pattern is considered.\n                // We waste 1 space.\n                --spaces;\n            }\n            previousBase = base;\n        }\n\n        for (i = 1, len = array.length; i < len; ++i) {\n            sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));\n            array[i] = sourceMap ? sn.join('') : sn;\n        }\n\n        base = previousBase;\n\n        return array.join('\\n');\n    }\n\n    function generateComment(comment, specialBase) {\n        if (comment.type === 'Line') {\n            if (endsWithLineTerminator(comment.value)) {\n                return '//' + comment.value;\n            } else {\n                // Always use LineTerminator\n                return '//' + comment.value + '\\n';\n            }\n        }\n        if (extra.format.indent.adjustMultilineComment && /[\\n\\r]/.test(comment.value)) {\n            return adjustMultilineComment('/*' + comment.value + '*/', specialBase);\n        }\n        return '/*' + comment.value + '*/';\n    }\n\n    function addComments(stmt, result) {\n        var i, len, comment, save, tailingToStatement, specialBase, fragment;\n\n        if (stmt.leadingComments && stmt.leadingComments.length > 0) {\n            save = result;\n\n            comment = stmt.leadingComments[0];\n            result = [];\n            if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {\n                result.push('\\n');\n            }\n            result.push(generateComment(comment));\n            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push('\\n');\n            }\n\n            for (i = 1, len = stmt.leadingComments.length; i < len; ++i) {\n                comment = stmt.leadingComments[i];\n                fragment = [generateComment(comment)];\n                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                    fragment.push('\\n');\n                }\n                result.push(addIndent(fragment));\n            }\n\n            result.push(addIndent(save));\n        }\n\n        if (stmt.trailingComments) {\n            tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());\n            specialBase = stringRepeat(' ', calculateSpaces(toSourceNodeWhenNeeded([base, result, indent]).toString()));\n            for (i = 0, len = stmt.trailingComments.length; i < len; ++i) {\n                comment = stmt.trailingComments[i];\n                if (tailingToStatement) {\n                    // We assume target like following script\n                    //\n                    // var t = 20;  /**\n                    //               * This is comment of t\n                    //               */\n                    if (i === 0) {\n                        // first case\n                        result = [result, indent];\n                    } else {\n                        result = [result, specialBase];\n                    }\n                    result.push(generateComment(comment, specialBase));\n                } else {\n                    result = [result, addIndent(generateComment(comment))];\n                }\n                if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                    result = [result, '\\n'];\n                }\n            }\n        }\n\n        return result;\n    }\n\n    function parenthesize(text, current, should) {\n        if (current < should) {\n            return ['(', text, ')'];\n        }\n        return text;\n    }\n\n    function maybeBlock(stmt, semicolonOptional, functionBody) {\n        var result, noLeadingComment;\n\n        noLeadingComment = !extra.comment || !stmt.leadingComments;\n\n        if (stmt.type === Syntax.BlockStatement && noLeadingComment) {\n            return [space, generateStatement(stmt, { functionBody: functionBody })];\n        }\n\n        if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {\n            return ';';\n        }\n\n        withIndent(function () {\n            result = [newline, addIndent(generateStatement(stmt, { semicolonOptional: semicolonOptional, functionBody: functionBody }))];\n        });\n\n        return result;\n    }\n\n    function maybeBlockSuffix(stmt, result) {\n        var ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());\n        if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {\n            return [result, space];\n        }\n        if (ends) {\n            return [result, base];\n        }\n        return [result, newline, base];\n    }\n\n    function generateVerbatimString(string) {\n        var i, iz, result;\n        result = string.split(/\\r\\n|\\n/);\n        for (i = 1, iz = result.length; i < iz; i++) {\n            result[i] = newline + base + result[i];\n        }\n        return result;\n    }\n\n    function generateVerbatim(expr, option) {\n        var verbatim, result, prec;\n        verbatim = expr[extra.verbatim];\n\n        if (typeof verbatim === 'string') {\n            result = parenthesize(generateVerbatimString(verbatim), Precedence.Sequence, option.precedence);\n        } else {\n            // verbatim is object\n            result = generateVerbatimString(verbatim.content);\n            prec = (verbatim.precedence != null) ? verbatim.precedence : Precedence.Sequence;\n            result = parenthesize(result, prec, option.precedence);\n        }\n\n        return toSourceNodeWhenNeeded(result, expr);\n    }\n\n    function generateIdentifier(node) {\n        return toSourceNodeWhenNeeded(node.name, node);\n    }\n\n    function generatePattern(node, options) {\n        var result;\n\n        if (node.type === Syntax.Identifier) {\n            result = generateIdentifier(node);\n        } else {\n            result = generateExpression(node, {\n                precedence: options.precedence,\n                allowIn: options.allowIn,\n                allowCall: true\n            });\n        }\n\n        return result;\n    }\n\n    function generateFunctionBody(node) {\n        var result, i, len, expr, arrow;\n\n        arrow = node.type === Syntax.ArrowFunctionExpression;\n\n        if (arrow && node.params.length === 1 && node.params[0].type === Syntax.Identifier) {\n            // arg => { } case\n            result = [generateIdentifier(node.params[0])];\n        } else {\n            result = ['('];\n            for (i = 0, len = node.params.length; i < len; ++i) {\n                result.push(generatePattern(node.params[i], {\n                    precedence: Precedence.Assignment,\n                    allowIn: true\n                }));\n                if (i + 1 < len) {\n                    result.push(',' + space);\n                }\n            }\n            result.push(')');\n        }\n\n        if (arrow) {\n            result.push(space);\n            result.push('=>');\n        }\n\n        if (node.expression) {\n            result.push(space);\n            expr = generateExpression(node.body, {\n                precedence: Precedence.Assignment,\n                allowIn: true,\n                allowCall: true\n            });\n            if (expr.toString().charAt(0) === '{') {\n                expr = ['(', expr, ')'];\n            }\n            result.push(expr);\n        } else {\n            result.push(maybeBlock(node.body, false, true));\n        }\n        return result;\n    }\n\n    function generateIterationForStatement(operator, stmt, semicolonIsNotNeeded) {\n        var result = ['for' + space + '('];\n        withIndent(function () {\n            if (stmt.left.type === Syntax.VariableDeclaration) {\n                withIndent(function () {\n                    result.push(stmt.left.kind + noEmptySpace());\n                    result.push(generateStatement(stmt.left.declarations[0], {\n                        allowIn: false\n                    }));\n                });\n            } else {\n                result.push(generateExpression(stmt.left, {\n                    precedence: Precedence.Call,\n                    allowIn: true,\n                    allowCall: true\n                }));\n            }\n\n            result = join(result, operator);\n            result = [join(\n                result,\n                generateExpression(stmt.right, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true\n                })\n            ), ')'];\n        });\n        result.push(maybeBlock(stmt.body, semicolonIsNotNeeded));\n        return result;\n    }\n\n    function generateLiteral(expr) {\n        var raw;\n        if (expr.hasOwnProperty('raw') && parse && extra.raw) {\n            try {\n                raw = parse(expr.raw).body[0].expression;\n                if (raw.type === Syntax.Literal) {\n                    if (raw.value === expr.value) {\n                        return expr.raw;\n                    }\n                }\n            } catch (e) {\n                // not use raw property\n            }\n        }\n\n        if (expr.value === null) {\n            return 'null';\n        }\n\n        if (typeof expr.value === 'string') {\n            return escapeString(expr.value);\n        }\n\n        if (typeof expr.value === 'number') {\n            return generateNumber(expr.value);\n        }\n\n        if (typeof expr.value === 'boolean') {\n            return expr.value ? 'true' : 'false';\n        }\n\n        return generateRegExp(expr.value);\n    }\n\n    function generateExpression(expr, option) {\n        var result,\n            precedence,\n            type,\n            currentPrecedence,\n            i,\n            len,\n            fragment,\n            multiline,\n            leftCharCode,\n            leftSource,\n            rightCharCode,\n            allowIn,\n            allowCall,\n            allowUnparenthesizedNew,\n            property,\n            isGenerator;\n\n        precedence = option.precedence;\n        allowIn = option.allowIn;\n        allowCall = option.allowCall;\n        type = expr.type || option.type;\n\n        if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {\n            return generateVerbatim(expr, option);\n        }\n\n        switch (type) {\n        case Syntax.SequenceExpression:\n            result = [];\n            allowIn |= (Precedence.Sequence < precedence);\n            for (i = 0, len = expr.expressions.length; i < len; ++i) {\n                result.push(generateExpression(expr.expressions[i], {\n                    precedence: Precedence.Assignment,\n                    allowIn: allowIn,\n                    allowCall: true\n                }));\n                if (i + 1 < len) {\n                    result.push(',' + space);\n                }\n            }\n            result = parenthesize(result, Precedence.Sequence, precedence);\n            break;\n\n        case Syntax.AssignmentExpression:\n            allowIn |= (Precedence.Assignment < precedence);\n            result = parenthesize(\n                [\n                    generateExpression(expr.left, {\n                        precedence: Precedence.Call,\n                        allowIn: allowIn,\n                        allowCall: true\n                    }),\n                    space + expr.operator + space,\n                    generateExpression(expr.right, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    })\n                ],\n                Precedence.Assignment,\n                precedence\n            );\n            break;\n\n        case Syntax.ArrowFunctionExpression:\n            allowIn |= (Precedence.ArrowFunction < precedence);\n            result = parenthesize(generateFunctionBody(expr), Precedence.ArrowFunction, precedence);\n            break;\n\n        case Syntax.ConditionalExpression:\n            allowIn |= (Precedence.Conditional < precedence);\n            result = parenthesize(\n                [\n                    generateExpression(expr.test, {\n                        precedence: Precedence.LogicalOR,\n                        allowIn: allowIn,\n                        allowCall: true\n                    }),\n                    space + '?' + space,\n                    generateExpression(expr.consequent, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    }),\n                    space + ':' + space,\n                    generateExpression(expr.alternate, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    })\n                ],\n                Precedence.Conditional,\n                precedence\n            );\n            break;\n\n        case Syntax.LogicalExpression:\n        case Syntax.BinaryExpression:\n            currentPrecedence = BinaryPrecedence[expr.operator];\n\n            allowIn |= (currentPrecedence < precedence);\n\n            fragment = generateExpression(expr.left, {\n                precedence: currentPrecedence,\n                allowIn: allowIn,\n                allowCall: true\n            });\n\n            leftSource = fragment.toString();\n\n            if (leftSource.charCodeAt(leftSource.length - 1) === 0x2F /* / */ && esutils.code.isIdentifierPart(expr.operator.charCodeAt(0))) {\n                result = [fragment, noEmptySpace(), expr.operator];\n            } else {\n                result = join(fragment, expr.operator);\n            }\n\n            fragment = generateExpression(expr.right, {\n                precedence: currentPrecedence + 1,\n                allowIn: allowIn,\n                allowCall: true\n            });\n\n            if (expr.operator === '/' && fragment.toString().charAt(0) === '/' ||\n            expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {\n                // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start\n                result.push(noEmptySpace());\n                result.push(fragment);\n            } else {\n                result = join(result, fragment);\n            }\n\n            if (expr.operator === 'in' && !allowIn) {\n                result = ['(', result, ')'];\n            } else {\n                result = parenthesize(result, currentPrecedence, precedence);\n            }\n\n            break;\n\n        case Syntax.CallExpression:\n            result = [generateExpression(expr.callee, {\n                precedence: Precedence.Call,\n                allowIn: true,\n                allowCall: true,\n                allowUnparenthesizedNew: false\n            })];\n\n            result.push('(');\n            for (i = 0, len = expr['arguments'].length; i < len; ++i) {\n                result.push(generateExpression(expr['arguments'][i], {\n                    precedence: Precedence.Assignment,\n                    allowIn: true,\n                    allowCall: true\n                }));\n                if (i + 1 < len) {\n                    result.push(',' + space);\n                }\n            }\n            result.push(')');\n\n            if (!allowCall) {\n                result = ['(', result, ')'];\n            } else {\n                result = parenthesize(result, Precedence.Call, precedence);\n            }\n            break;\n\n        case Syntax.NewExpression:\n            len = expr['arguments'].length;\n            allowUnparenthesizedNew = option.allowUnparenthesizedNew === undefined || option.allowUnparenthesizedNew;\n\n            result = join(\n                'new',\n                generateExpression(expr.callee, {\n                    precedence: Precedence.New,\n                    allowIn: true,\n                    allowCall: false,\n                    allowUnparenthesizedNew: allowUnparenthesizedNew && !parentheses && len === 0\n                })\n            );\n\n            if (!allowUnparenthesizedNew || parentheses || len > 0) {\n                result.push('(');\n                for (i = 0; i < len; ++i) {\n                    result.push(generateExpression(expr['arguments'][i], {\n                        precedence: Precedence.Assignment,\n                        allowIn: true,\n                        allowCall: true\n                    }));\n                    if (i + 1 < len) {\n                        result.push(',' + space);\n                    }\n                }\n                result.push(')');\n            }\n\n            result = parenthesize(result, Precedence.New, precedence);\n            break;\n\n        case Syntax.MemberExpression:\n            result = [generateExpression(expr.object, {\n                precedence: Precedence.Call,\n                allowIn: true,\n                allowCall: allowCall,\n                allowUnparenthesizedNew: false\n            })];\n\n            if (expr.computed) {\n                result.push('[');\n                result.push(generateExpression(expr.property, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: allowCall\n                }));\n                result.push(']');\n            } else {\n                if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {\n                    fragment = toSourceNodeWhenNeeded(result).toString();\n                    // When the following conditions are all true,\n                    //   1. No floating point\n                    //   2. Don't have exponents\n                    //   3. The last character is a decimal digit\n                    //   4. Not hexadecimal OR octal number literal\n                    // we should add a floating point.\n                    if (\n                            fragment.indexOf('.') < 0 &&\n                            !/[eExX]/.test(fragment) &&\n                            esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) &&\n                            !(fragment.length >= 2 && fragment.charCodeAt(0) === 48)  // '0'\n                            ) {\n                        result.push('.');\n                    }\n                }\n                result.push('.');\n                result.push(generateIdentifier(expr.property));\n            }\n\n            result = parenthesize(result, Precedence.Member, precedence);\n            break;\n\n        case Syntax.UnaryExpression:\n            fragment = generateExpression(expr.argument, {\n                precedence: Precedence.Unary,\n                allowIn: true,\n                allowCall: true\n            });\n\n            if (space === '') {\n                result = join(expr.operator, fragment);\n            } else {\n                result = [expr.operator];\n                if (expr.operator.length > 2) {\n                    // delete, void, typeof\n                    // get `typeof []`, not `typeof[]`\n                    result = join(result, fragment);\n                } else {\n                    // Prevent inserting spaces between operator and argument if it is unnecessary\n                    // like, `!cond`\n                    leftSource = toSourceNodeWhenNeeded(result).toString();\n                    leftCharCode = leftSource.charCodeAt(leftSource.length - 1);\n                    rightCharCode = fragment.toString().charCodeAt(0);\n\n                    if (((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode) ||\n                            (esutils.code.isIdentifierPart(leftCharCode) && esutils.code.isIdentifierPart(rightCharCode))) {\n                        result.push(noEmptySpace());\n                        result.push(fragment);\n                    } else {\n                        result.push(fragment);\n                    }\n                }\n            }\n            result = parenthesize(result, Precedence.Unary, precedence);\n            break;\n\n        case Syntax.YieldExpression:\n            if (expr.delegate) {\n                result = 'yield*';\n            } else {\n                result = 'yield';\n            }\n            if (expr.argument) {\n                result = join(\n                    result,\n                    generateExpression(expr.argument, {\n                        precedence: Precedence.Yield,\n                        allowIn: true,\n                        allowCall: true\n                    })\n                );\n            }\n            result = parenthesize(result, Precedence.Yield, precedence);\n            break;\n\n        case Syntax.UpdateExpression:\n            if (expr.prefix) {\n                result = parenthesize(\n                    [\n                        expr.operator,\n                        generateExpression(expr.argument, {\n                            precedence: Precedence.Unary,\n                            allowIn: true,\n                            allowCall: true\n                        })\n                    ],\n                    Precedence.Unary,\n                    precedence\n                );\n            } else {\n                result = parenthesize(\n                    [\n                        generateExpression(expr.argument, {\n                            precedence: Precedence.Postfix,\n                            allowIn: true,\n                            allowCall: true\n                        }),\n                        expr.operator\n                    ],\n                    Precedence.Postfix,\n                    precedence\n                );\n            }\n            break;\n\n        case Syntax.FunctionExpression:\n            isGenerator = expr.generator && !extra.moz.starlessGenerator;\n            result = isGenerator ? 'function*' : 'function';\n\n            if (expr.id) {\n                result = [result, (isGenerator) ? space : noEmptySpace(),\n                          generateIdentifier(expr.id),\n                          generateFunctionBody(expr)];\n            } else {\n                result = [result + space, generateFunctionBody(expr)];\n            }\n\n            break;\n\n        case Syntax.ArrayPattern:\n        case Syntax.ArrayExpression:\n            if (!expr.elements.length) {\n                result = '[]';\n                break;\n            }\n            multiline = expr.elements.length > 1;\n            result = ['[', multiline ? newline : ''];\n            withIndent(function (indent) {\n                for (i = 0, len = expr.elements.length; i < len; ++i) {\n                    if (!expr.elements[i]) {\n                        if (multiline) {\n                            result.push(indent);\n                        }\n                        if (i + 1 === len) {\n                            result.push(',');\n                        }\n                    } else {\n                        result.push(multiline ? indent : '');\n                        result.push(generateExpression(expr.elements[i], {\n                            precedence: Precedence.Assignment,\n                            allowIn: true,\n                            allowCall: true\n                        }));\n                    }\n                    if (i + 1 < len) {\n                        result.push(',' + (multiline ? newline : space));\n                    }\n                }\n            });\n            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(multiline ? base : '');\n            result.push(']');\n            break;\n\n        case Syntax.Property:\n            if (expr.kind === 'get' || expr.kind === 'set') {\n                result = [\n                    expr.kind, noEmptySpace(),\n                    generateExpression(expr.key, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    generateFunctionBody(expr.value)\n                ];\n            } else {\n                if (expr.shorthand) {\n                    result = generateExpression(expr.key, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    });\n                } else if (expr.method) {\n                    result = [];\n                    if (expr.value.generator) {\n                        result.push('*');\n                    }\n                    result.push(generateExpression(expr.key, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }));\n                    result.push(generateFunctionBody(expr.value));\n                } else {\n                    result = [\n                        generateExpression(expr.key, {\n                            precedence: Precedence.Sequence,\n                            allowIn: true,\n                            allowCall: true\n                        }),\n                        ':' + space,\n                        generateExpression(expr.value, {\n                            precedence: Precedence.Assignment,\n                            allowIn: true,\n                            allowCall: true\n                        })\n                    ];\n                }\n            }\n            break;\n\n        case Syntax.ObjectExpression:\n            if (!expr.properties.length) {\n                result = '{}';\n                break;\n            }\n            multiline = expr.properties.length > 1;\n\n            withIndent(function () {\n                fragment = generateExpression(expr.properties[0], {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true,\n                    type: Syntax.Property\n                });\n            });\n\n            if (!multiline) {\n                // issues 4\n                // Do not transform from\n                //   dejavu.Class.declare({\n                //       method2: function () {}\n                //   });\n                // to\n                //   dejavu.Class.declare({method2: function () {\n                //       }});\n                if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                    result = [ '{', space, fragment, space, '}' ];\n                    break;\n                }\n            }\n\n            withIndent(function (indent) {\n                result = [ '{', newline, indent, fragment ];\n\n                if (multiline) {\n                    result.push(',' + newline);\n                    for (i = 1, len = expr.properties.length; i < len; ++i) {\n                        result.push(indent);\n                        result.push(generateExpression(expr.properties[i], {\n                            precedence: Precedence.Sequence,\n                            allowIn: true,\n                            allowCall: true,\n                            type: Syntax.Property\n                        }));\n                        if (i + 1 < len) {\n                            result.push(',' + newline);\n                        }\n                    }\n                }\n            });\n\n            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(base);\n            result.push('}');\n            break;\n\n        case Syntax.ObjectPattern:\n            if (!expr.properties.length) {\n                result = '{}';\n                break;\n            }\n\n            multiline = false;\n            if (expr.properties.length === 1) {\n                property = expr.properties[0];\n                if (property.value.type !== Syntax.Identifier) {\n                    multiline = true;\n                }\n            } else {\n                for (i = 0, len = expr.properties.length; i < len; ++i) {\n                    property = expr.properties[i];\n                    if (!property.shorthand) {\n                        multiline = true;\n                        break;\n                    }\n                }\n            }\n            result = ['{', multiline ? newline : '' ];\n\n            withIndent(function (indent) {\n                for (i = 0, len = expr.properties.length; i < len; ++i) {\n                    result.push(multiline ? indent : '');\n                    result.push(generateExpression(expr.properties[i], {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }));\n                    if (i + 1 < len) {\n                        result.push(',' + (multiline ? newline : space));\n                    }\n                }\n            });\n\n            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(multiline ? base : '');\n            result.push('}');\n            break;\n\n        case Syntax.ThisExpression:\n            result = 'this';\n            break;\n\n        case Syntax.Identifier:\n            result = generateIdentifier(expr);\n            break;\n\n        case Syntax.Literal:\n            result = generateLiteral(expr);\n            break;\n\n        case Syntax.GeneratorExpression:\n        case Syntax.ComprehensionExpression:\n            // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]\n            // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6\n            result = (type === Syntax.GeneratorExpression) ? ['('] : ['['];\n\n            if (extra.moz.comprehensionExpressionStartsWithAssignment) {\n                fragment = generateExpression(expr.body, {\n                    precedence: Precedence.Assignment,\n                    allowIn: true,\n                    allowCall: true\n                });\n\n                result.push(fragment);\n            }\n\n            if (expr.blocks) {\n                withIndent(function () {\n                    for (i = 0, len = expr.blocks.length; i < len; ++i) {\n                        fragment = generateExpression(expr.blocks[i], {\n                            precedence: Precedence.Sequence,\n                            allowIn: true,\n                            allowCall: true\n                        });\n\n                        if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) {\n                            result = join(result, fragment);\n                        } else {\n                            result.push(fragment);\n                        }\n                    }\n                });\n            }\n\n            if (expr.filter) {\n                result = join(result, 'if' + space);\n                fragment = generateExpression(expr.filter, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true\n                });\n                if (extra.moz.parenthesizedComprehensionBlock) {\n                    result = join(result, [ '(', fragment, ')' ]);\n                } else {\n                    result = join(result, fragment);\n                }\n            }\n\n            if (!extra.moz.comprehensionExpressionStartsWithAssignment) {\n                fragment = generateExpression(expr.body, {\n                    precedence: Precedence.Assignment,\n                    allowIn: true,\n                    allowCall: true\n                });\n\n                result = join(result, fragment);\n            }\n\n            result.push((type === Syntax.GeneratorExpression) ? ')' : ']');\n            break;\n\n        case Syntax.ComprehensionBlock:\n            if (expr.left.type === Syntax.VariableDeclaration) {\n                fragment = [\n                    expr.left.kind, noEmptySpace(),\n                    generateStatement(expr.left.declarations[0], {\n                        allowIn: false\n                    })\n                ];\n            } else {\n                fragment = generateExpression(expr.left, {\n                    precedence: Precedence.Call,\n                    allowIn: true,\n                    allowCall: true\n                });\n            }\n\n            fragment = join(fragment, expr.of ? 'of' : 'in');\n            fragment = join(fragment, generateExpression(expr.right, {\n                precedence: Precedence.Sequence,\n                allowIn: true,\n                allowCall: true\n            }));\n\n            if (extra.moz.parenthesizedComprehensionBlock) {\n                result = [ 'for' + space + '(', fragment, ')' ];\n            } else {\n                result = join('for' + space, fragment);\n            }\n            break;\n\n        default:\n            throw new Error('Unknown expression type: ' + expr.type);\n        }\n\n        if (extra.comment) {\n            result = addComments(expr,result);\n        }\n        return toSourceNodeWhenNeeded(result, expr);\n    }\n\n    function generateStatement(stmt, option) {\n        var i,\n            len,\n            result,\n            node,\n            specifier,\n            allowIn,\n            functionBody,\n            directiveContext,\n            fragment,\n            semicolon,\n            isGenerator;\n\n        allowIn = true;\n        semicolon = ';';\n        functionBody = false;\n        directiveContext = false;\n        if (option) {\n            allowIn = option.allowIn === undefined || option.allowIn;\n            if (!semicolons && option.semicolonOptional === true) {\n                semicolon = '';\n            }\n            functionBody = option.functionBody;\n            directiveContext = option.directiveContext;\n        }\n\n        switch (stmt.type) {\n        case Syntax.BlockStatement:\n            result = ['{', newline];\n\n            withIndent(function () {\n                for (i = 0, len = stmt.body.length; i < len; ++i) {\n                    fragment = addIndent(generateStatement(stmt.body[i], {\n                        semicolonOptional: i === len - 1,\n                        directiveContext: functionBody\n                    }));\n                    result.push(fragment);\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            });\n\n            result.push(addIndent('}'));\n            break;\n\n        case Syntax.BreakStatement:\n            if (stmt.label) {\n                result = 'break ' + stmt.label.name + semicolon;\n            } else {\n                result = 'break' + semicolon;\n            }\n            break;\n\n        case Syntax.ContinueStatement:\n            if (stmt.label) {\n                result = 'continue ' + stmt.label.name + semicolon;\n            } else {\n                result = 'continue' + semicolon;\n            }\n            break;\n\n        case Syntax.DirectiveStatement:\n            if (extra.raw && stmt.raw) {\n                result = stmt.raw + semicolon;\n            } else {\n                result = escapeDirective(stmt.directive) + semicolon;\n            }\n            break;\n\n        case Syntax.DoWhileStatement:\n            // Because `do 42 while (cond)` is Syntax Error. We need semicolon.\n            result = join('do', maybeBlock(stmt.body));\n            result = maybeBlockSuffix(stmt.body, result);\n            result = join(result, [\n                'while' + space + '(',\n                generateExpression(stmt.test, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true\n                }),\n                ')' + semicolon\n            ]);\n            break;\n\n        case Syntax.CatchClause:\n            withIndent(function () {\n                var guard;\n\n                result = [\n                    'catch' + space + '(',\n                    generateExpression(stmt.param, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')'\n                ];\n\n                if (stmt.guard) {\n                    guard = generateExpression(stmt.guard, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    });\n\n                    result.splice(2, 0, ' if ', guard);\n                }\n            });\n            result.push(maybeBlock(stmt.body));\n            break;\n\n        case Syntax.DebuggerStatement:\n            result = 'debugger' + semicolon;\n            break;\n\n        case Syntax.EmptyStatement:\n            result = ';';\n            break;\n\n        case Syntax.ExportDeclaration:\n            result = 'export ';\n            if (stmt.declaration) {\n                // FunctionDeclaration or VariableDeclaration\n                result = [result, generateStatement(stmt.declaration, { semicolonOptional: semicolon === '' })];\n                break;\n            }\n            break;\n\n        case Syntax.ExpressionStatement:\n            result = [generateExpression(stmt.expression, {\n                precedence: Precedence.Sequence,\n                allowIn: true,\n                allowCall: true\n            })];\n            // 12.4 '{', 'function' is not allowed in this position.\n            // wrap expression with parentheses\n            fragment = toSourceNodeWhenNeeded(result).toString();\n            if (fragment.charAt(0) === '{' ||  // ObjectExpression\n                    (fragment.slice(0, 8) === 'function' && '* ('.indexOf(fragment.charAt(8)) >= 0) ||  // function or generator\n                    (directive && directiveContext && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string')) {\n                result = ['(', result, ')' + semicolon];\n            } else {\n                result.push(semicolon);\n            }\n            break;\n\n        case Syntax.ImportDeclaration:\n            // ES6: 15.2.1 valid import declarations:\n            //     - import ImportClause FromClause ;\n            //     - import ModuleSpecifier ;\n            // If no ImportClause is present,\n            // this should be `import ModuleSpecifier` so skip `from`\n            //\n            // ModuleSpecifier is StringLiteral.\n            if (stmt.specifiers.length === 0) {\n                // import ModuleSpecifier ;\n                result = [\n                    'import',\n                    space,\n                    generateLiteral(stmt.source)\n                ];\n            } else {\n                // import ImportClause FromClause ;\n                if (stmt.kind === 'default') {\n                    // import ... from \"...\";\n                    result = [\n                        'import',\n                        noEmptySpace(),\n                        stmt.specifiers[0].id.name,\n                        noEmptySpace()\n                    ];\n                } else {\n                    // stmt.kind === 'named'\n                    result = [\n                        'import',\n                        space,\n                        '{',\n                    ];\n\n                    if (stmt.specifiers.length === 1) {\n                        // import { ... } from \"...\";\n                        specifier = stmt.specifiers[0];\n                        result.push(space + specifier.id.name);\n                        if (specifier.name) {\n                            result.push(noEmptySpace() + 'as' + noEmptySpace() + specifier.name.name);\n                        }\n                        result.push(space + '}' + space);\n                    } else {\n                        // import {\n                        //    ...,\n                        //    ...,\n                        // } from \"...\";\n                        withIndent(function (indent) {\n                            var i, iz;\n                            result.push(newline);\n                            for (i = 0, iz = stmt.specifiers.length; i < iz; ++i) {\n                                specifier = stmt.specifiers[i];\n                                result.push(indent + specifier.id.name);\n                                if (specifier.name) {\n                                    result.push(noEmptySpace() + 'as' + noEmptySpace() + specifier.name.name);\n                                }\n\n                                if (i + 1 < iz) {\n                                    result.push(',' + newline);\n                                }\n                            }\n                        });\n                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                            result.push(newline);\n                        }\n                        result.push(base + '}' + space);\n                    }\n                }\n\n                result.push('from' + space);\n                result.push(generateLiteral(stmt.source));\n            }\n            result.push(semicolon);\n            break;\n\n        case Syntax.VariableDeclarator:\n            if (stmt.init) {\n                result = [\n                    generateExpression(stmt.id, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    }),\n                    space,\n                    '=',\n                    space,\n                    generateExpression(stmt.init, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    })\n                ];\n            } else {\n                result = generatePattern(stmt.id, {\n                    precedence: Precedence.Assignment,\n                    allowIn: allowIn\n                });\n            }\n            break;\n\n        case Syntax.VariableDeclaration:\n            result = [stmt.kind];\n            // special path for\n            // var x = function () {\n            // };\n            if (stmt.declarations.length === 1 && stmt.declarations[0].init &&\n                    stmt.declarations[0].init.type === Syntax.FunctionExpression) {\n                result.push(noEmptySpace());\n                result.push(generateStatement(stmt.declarations[0], {\n                    allowIn: allowIn\n                }));\n            } else {\n                // VariableDeclarator is typed as Statement,\n                // but joined with comma (not LineTerminator).\n                // So if comment is attached to target node, we should specialize.\n                withIndent(function () {\n                    node = stmt.declarations[0];\n                    if (extra.comment && node.leadingComments) {\n                        result.push('\\n');\n                        result.push(addIndent(generateStatement(node, {\n                            allowIn: allowIn\n                        })));\n                    } else {\n                        result.push(noEmptySpace());\n                        result.push(generateStatement(node, {\n                            allowIn: allowIn\n                        }));\n                    }\n\n                    for (i = 1, len = stmt.declarations.length; i < len; ++i) {\n                        node = stmt.declarations[i];\n                        if (extra.comment && node.leadingComments) {\n                            result.push(',' + newline);\n                            result.push(addIndent(generateStatement(node, {\n                                allowIn: allowIn\n                            })));\n                        } else {\n                            result.push(',' + space);\n                            result.push(generateStatement(node, {\n                                allowIn: allowIn\n                            }));\n                        }\n                    }\n                });\n            }\n            result.push(semicolon);\n            break;\n\n        case Syntax.ThrowStatement:\n            result = [join(\n                'throw',\n                generateExpression(stmt.argument, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true\n                })\n            ), semicolon];\n            break;\n\n        case Syntax.TryStatement:\n            result = ['try', maybeBlock(stmt.block)];\n            result = maybeBlockSuffix(stmt.block, result);\n\n            if (stmt.handlers) {\n                // old interface\n                for (i = 0, len = stmt.handlers.length; i < len; ++i) {\n                    result = join(result, generateStatement(stmt.handlers[i]));\n                    if (stmt.finalizer || i + 1 !== len) {\n                        result = maybeBlockSuffix(stmt.handlers[i].body, result);\n                    }\n                }\n            } else {\n                stmt.guardedHandlers = stmt.guardedHandlers || [];\n\n                for (i = 0, len = stmt.guardedHandlers.length; i < len; ++i) {\n                    result = join(result, generateStatement(stmt.guardedHandlers[i]));\n                    if (stmt.finalizer || i + 1 !== len) {\n                        result = maybeBlockSuffix(stmt.guardedHandlers[i].body, result);\n                    }\n                }\n\n                // new interface\n                if (stmt.handler) {\n                    if (isArray(stmt.handler)) {\n                        for (i = 0, len = stmt.handler.length; i < len; ++i) {\n                            result = join(result, generateStatement(stmt.handler[i]));\n                            if (stmt.finalizer || i + 1 !== len) {\n                                result = maybeBlockSuffix(stmt.handler[i].body, result);\n                            }\n                        }\n                    } else {\n                        result = join(result, generateStatement(stmt.handler));\n                        if (stmt.finalizer) {\n                            result = maybeBlockSuffix(stmt.handler.body, result);\n                        }\n                    }\n                }\n            }\n            if (stmt.finalizer) {\n                result = join(result, ['finally', maybeBlock(stmt.finalizer)]);\n            }\n            break;\n\n        case Syntax.SwitchStatement:\n            withIndent(function () {\n                result = [\n                    'switch' + space + '(',\n                    generateExpression(stmt.discriminant, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')' + space + '{' + newline\n                ];\n            });\n            if (stmt.cases) {\n                for (i = 0, len = stmt.cases.length; i < len; ++i) {\n                    fragment = addIndent(generateStatement(stmt.cases[i], {semicolonOptional: i === len - 1}));\n                    result.push(fragment);\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            }\n            result.push(addIndent('}'));\n            break;\n\n        case Syntax.SwitchCase:\n            withIndent(function () {\n                if (stmt.test) {\n                    result = [\n                        join('case', generateExpression(stmt.test, {\n                            precedence: Precedence.Sequence,\n                            allowIn: true,\n                            allowCall: true\n                        })),\n                        ':'\n                    ];\n                } else {\n                    result = ['default:'];\n                }\n\n                i = 0;\n                len = stmt.consequent.length;\n                if (len && stmt.consequent[0].type === Syntax.BlockStatement) {\n                    fragment = maybeBlock(stmt.consequent[0]);\n                    result.push(fragment);\n                    i = 1;\n                }\n\n                if (i !== len && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                    result.push(newline);\n                }\n\n                for (; i < len; ++i) {\n                    fragment = addIndent(generateStatement(stmt.consequent[i], {semicolonOptional: i === len - 1 && semicolon === ''}));\n                    result.push(fragment);\n                    if (i + 1 !== len && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            });\n            break;\n\n        case Syntax.IfStatement:\n            withIndent(function () {\n                result = [\n                    'if' + space + '(',\n                    generateExpression(stmt.test, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')'\n                ];\n            });\n            if (stmt.alternate) {\n                result.push(maybeBlock(stmt.consequent));\n                result = maybeBlockSuffix(stmt.consequent, result);\n                if (stmt.alternate.type === Syntax.IfStatement) {\n                    result = join(result, ['else ', generateStatement(stmt.alternate, {semicolonOptional: semicolon === ''})]);\n                } else {\n                    result = join(result, join('else', maybeBlock(stmt.alternate, semicolon === '')));\n                }\n            } else {\n                result.push(maybeBlock(stmt.consequent, semicolon === ''));\n            }\n            break;\n\n        case Syntax.ForStatement:\n            withIndent(function () {\n                result = ['for' + space + '('];\n                if (stmt.init) {\n                    if (stmt.init.type === Syntax.VariableDeclaration) {\n                        result.push(generateStatement(stmt.init, {allowIn: false}));\n                    } else {\n                        result.push(generateExpression(stmt.init, {\n                            precedence: Precedence.Sequence,\n                            allowIn: false,\n                            allowCall: true\n                        }));\n                        result.push(';');\n                    }\n                } else {\n                    result.push(';');\n                }\n\n                if (stmt.test) {\n                    result.push(space);\n                    result.push(generateExpression(stmt.test, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }));\n                    result.push(';');\n                } else {\n                    result.push(';');\n                }\n\n                if (stmt.update) {\n                    result.push(space);\n                    result.push(generateExpression(stmt.update, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }));\n                    result.push(')');\n                } else {\n                    result.push(')');\n                }\n            });\n\n            result.push(maybeBlock(stmt.body, semicolon === ''));\n            break;\n\n        case Syntax.ForInStatement:\n            result = generateIterationForStatement('in', stmt, semicolon === '');\n            break;\n\n        case Syntax.ForOfStatement:\n            result = generateIterationForStatement('of', stmt, semicolon === '');\n            break;\n\n        case Syntax.LabeledStatement:\n            result = [stmt.label.name + ':', maybeBlock(stmt.body, semicolon === '')];\n            break;\n\n        case Syntax.Program:\n            len = stmt.body.length;\n            result = [safeConcatenation && len > 0 ? '\\n' : ''];\n            for (i = 0; i < len; ++i) {\n                fragment = addIndent(\n                    generateStatement(stmt.body[i], {\n                        semicolonOptional: !safeConcatenation && i === len - 1,\n                        directiveContext: true\n                    })\n                );\n                result.push(fragment);\n                if (i + 1 < len && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                    result.push(newline);\n                }\n            }\n            break;\n\n        case Syntax.FunctionDeclaration:\n            isGenerator = stmt.generator && !extra.moz.starlessGenerator;\n            result = [\n                (isGenerator ? 'function*' : 'function'),\n                (isGenerator ? space : noEmptySpace()),\n                generateIdentifier(stmt.id),\n                generateFunctionBody(stmt)\n            ];\n            break;\n\n        case Syntax.ReturnStatement:\n            if (stmt.argument) {\n                result = [join(\n                    'return',\n                    generateExpression(stmt.argument, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    })\n                ), semicolon];\n            } else {\n                result = ['return' + semicolon];\n            }\n            break;\n\n        case Syntax.WhileStatement:\n            withIndent(function () {\n                result = [\n                    'while' + space + '(',\n                    generateExpression(stmt.test, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')'\n                ];\n            });\n            result.push(maybeBlock(stmt.body, semicolon === ''));\n            break;\n\n        case Syntax.WithStatement:\n            withIndent(function () {\n                result = [\n                    'with' + space + '(',\n                    generateExpression(stmt.object, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')'\n                ];\n            });\n            result.push(maybeBlock(stmt.body, semicolon === ''));\n            break;\n\n        default:\n            throw new Error('Unknown statement type: ' + stmt.type);\n        }\n\n        // Attach comments\n\n        if (extra.comment) {\n            result = addComments(stmt, result);\n        }\n\n        fragment = toSourceNodeWhenNeeded(result).toString();\n        if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' &&  fragment.charAt(fragment.length - 1) === '\\n') {\n            result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\\s+$/, '') : fragment.replace(/\\s+$/, '');\n        }\n\n        return toSourceNodeWhenNeeded(result, stmt);\n    }\n\n    function generate(node, options) {\n        var defaultOptions = getDefaultOptions(), result, pair;\n\n        if (options != null) {\n            // Obsolete options\n            //\n            //   `options.indent`\n            //   `options.base`\n            //\n            // Instead of them, we can use `option.format.indent`.\n            if (typeof options.indent === 'string') {\n                defaultOptions.format.indent.style = options.indent;\n            }\n            if (typeof options.base === 'number') {\n                defaultOptions.format.indent.base = options.base;\n            }\n            options = updateDeeply(defaultOptions, options);\n            indent = options.format.indent.style;\n            if (typeof options.base === 'string') {\n                base = options.base;\n            } else {\n                base = stringRepeat(indent, options.format.indent.base);\n            }\n        } else {\n            options = defaultOptions;\n            indent = options.format.indent.style;\n            base = stringRepeat(indent, options.format.indent.base);\n        }\n        json = options.format.json;\n        renumber = options.format.renumber;\n        hexadecimal = json ? false : options.format.hexadecimal;\n        quotes = json ? 'double' : options.format.quotes;\n        escapeless = options.format.escapeless;\n        newline = options.format.newline;\n        space = options.format.space;\n        if (options.format.compact) {\n            newline = space = indent = base = '';\n        }\n        parentheses = options.format.parentheses;\n        semicolons = options.format.semicolons;\n        safeConcatenation = options.format.safeConcatenation;\n        directive = options.directive;\n        parse = json ? null : options.parse;\n        sourceMap = options.sourceMap;\n        extra = options;\n\n        if (sourceMap) {\n            if (!exports.browser) {\n                // We assume environment is node.js\n                // And prevent from including source-map by browserify\n                SourceNode = require('source-map').SourceNode;\n            } else {\n                SourceNode = global.sourceMap.SourceNode;\n            }\n        }\n\n        switch (node.type) {\n        case Syntax.BlockStatement:\n        case Syntax.BreakStatement:\n        case Syntax.CatchClause:\n        case Syntax.ContinueStatement:\n        case Syntax.DirectiveStatement:\n        case Syntax.DoWhileStatement:\n        case Syntax.DebuggerStatement:\n        case Syntax.EmptyStatement:\n        case Syntax.ExpressionStatement:\n        case Syntax.ForStatement:\n        case Syntax.ForInStatement:\n        case Syntax.ForOfStatement:\n        case Syntax.FunctionDeclaration:\n        case Syntax.IfStatement:\n        case Syntax.LabeledStatement:\n        case Syntax.Program:\n        case Syntax.ReturnStatement:\n        case Syntax.SwitchStatement:\n        case Syntax.SwitchCase:\n        case Syntax.ThrowStatement:\n        case Syntax.TryStatement:\n        case Syntax.VariableDeclaration:\n        case Syntax.VariableDeclarator:\n        case Syntax.WhileStatement:\n        case Syntax.WithStatement:\n            result = generateStatement(node);\n            break;\n\n        case Syntax.AssignmentExpression:\n        case Syntax.ArrayExpression:\n        case Syntax.ArrayPattern:\n        case Syntax.BinaryExpression:\n        case Syntax.CallExpression:\n        case Syntax.ConditionalExpression:\n        case Syntax.FunctionExpression:\n        case Syntax.Identifier:\n        case Syntax.Literal:\n        case Syntax.LogicalExpression:\n        case Syntax.MemberExpression:\n        case Syntax.NewExpression:\n        case Syntax.ObjectExpression:\n        case Syntax.ObjectPattern:\n        case Syntax.Property:\n        case Syntax.SequenceExpression:\n        case Syntax.ThisExpression:\n        case Syntax.UnaryExpression:\n        case Syntax.UpdateExpression:\n        case Syntax.YieldExpression:\n\n            result = generateExpression(node, {\n                precedence: Precedence.Sequence,\n                allowIn: true,\n                allowCall: true\n            });\n            break;\n\n        default:\n            throw new Error('Unknown node type: ' + node.type);\n        }\n\n        if (!sourceMap) {\n            pair = {code: result.toString(), map: null};\n            return options.sourceMapWithCode ? pair : pair.code;\n        }\n\n\n        pair = result.toStringWithSourceMap({\n            file: options.file,\n            sourceRoot: options.sourceMapRoot\n        });\n\n        if (options.sourceContent) {\n            pair.map.setSourceContent(options.sourceMap,\n                                      options.sourceContent);\n        }\n\n        if (options.sourceMapWithCode) {\n            return pair;\n        }\n\n        return pair.map.toString();\n    }\n\n    FORMAT_MINIFY = {\n        indent: {\n            style: '',\n            base: 0\n        },\n        renumber: true,\n        hexadecimal: true,\n        quotes: 'auto',\n        escapeless: true,\n        compact: true,\n        parentheses: false,\n        semicolons: false\n    };\n\n    FORMAT_DEFAULTS = getDefaultOptions().format;\n\n    exports.version = require('./package.json').version;\n    exports.generate = generate;\n    exports.attachComments = estraverse.attachComments;\n    exports.Precedence = updateDeeply({}, Precedence);\n    exports.browser = false;\n    exports.FORMAT_MINIFY = FORMAT_MINIFY;\n    exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;\n}());\n/* vim: set sw=4 ts=4 et tw=80 : */\n"]}