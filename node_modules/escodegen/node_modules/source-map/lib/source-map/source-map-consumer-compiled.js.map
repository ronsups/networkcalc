{"version":3,"sources":["source-map-consumer.js"],"names":[],"mappings":"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","file":"source-map-consumer-compiled.js","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var util = require('./util');\n  var binarySearch = require('./binary-search');\n  var ArraySet = require('./array-set').ArraySet;\n  var base64VLQ = require('./base64-vlq');\n\n  /**\n   * A SourceMapConsumer instance represents a parsed source map which we can\n   * query for information about the original file positions by giving it a file\n   * position in the generated source.\n   *\n   * The only parameter is the raw source map (either as a JSON string, or\n   * already parsed to an object). According to the spec, source maps have the\n   * following attributes:\n   *\n   *   - version: Which version of the source map spec this map is following.\n   *   - sources: An array of URLs to the original source files.\n   *   - names: An array of identifiers which can be referrenced by individual mappings.\n   *   - sourceRoot: Optional. The URL root from which all sources are relative.\n   *   - sourcesContent: Optional. An array of contents of the original source files.\n   *   - mappings: A string of base64 VLQs which contain the actual mappings.\n   *   - file: Optional. The generated file this source map is associated with.\n   *\n   * Here is an example source map, taken from the source map spec[0]:\n   *\n   *     {\n   *       version : 3,\n   *       file: \"out.js\",\n   *       sourceRoot : \"\",\n   *       sources: [\"foo.js\", \"bar.js\"],\n   *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n   *       mappings: \"AA,AB;;ABCDE;\"\n   *     }\n   *\n   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n   */\n  function SourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    var version = util.getArg(sourceMap, 'version');\n    var sources = util.getArg(sourceMap, 'sources');\n    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n    // requires the array) to play nice here.\n    var names = util.getArg(sourceMap, 'names', []);\n    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n    var mappings = util.getArg(sourceMap, 'mappings');\n    var file = util.getArg(sourceMap, 'file', null);\n\n    // Once again, Sass deviates from the spec and supplies the version as a\n    // string rather than a number, so we use loose equality checking here.\n    if (version != this._version) {\n      throw new Error('Unsupported version: ' + version);\n    }\n\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    sources = sources.map(util.normalize);\n\n    // Pass `true` below to allow duplicate names and sources. While source maps\n    // are intended to be compressed and deduplicated, the TypeScript compiler\n    // sometimes generates source maps with duplicates in them. See Github issue\n    // #72 and bugzil.la/889492.\n    this._names = ArraySet.fromArray(names, true);\n    this._sources = ArraySet.fromArray(sources, true);\n\n    this.sourceRoot = sourceRoot;\n    this.sourcesContent = sourcesContent;\n    this._mappings = mappings;\n    this.file = file;\n  }\n\n  /**\n   * Create a SourceMapConsumer from a SourceMapGenerator.\n   *\n   * @param SourceMapGenerator aSourceMap\n   *        The source map that will be consumed.\n   * @returns SourceMapConsumer\n   */\n  SourceMapConsumer.fromSourceMap =\n    function SourceMapConsumer_fromSourceMap(aSourceMap) {\n      var smc = Object.create(SourceMapConsumer.prototype);\n\n      smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                              smc.sourceRoot);\n      smc.file = aSourceMap._file;\n\n      smc.__generatedMappings = aSourceMap._mappings.toArray().slice();\n      smc.__originalMappings = aSourceMap._mappings.toArray().slice()\n        .sort(util.compareByOriginalPositions);\n\n      return smc;\n    };\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  SourceMapConsumer.prototype._version = 3;\n\n  /**\n   * The list of original sources.\n   */\n  Object.defineProperty(SourceMapConsumer.prototype, 'sources', {\n    get: function () {\n      return this._sources.toArray().map(function (s) {\n        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n      }, this);\n    }\n  });\n\n  // `__generatedMappings` and `__originalMappings` are arrays that hold the\n  // parsed mapping coordinates from the source map's \"mappings\" attribute. They\n  // are lazily instantiated, accessed via the `_generatedMappings` and\n  // `_originalMappings` getters respectively, and we only parse the mappings\n  // and create these arrays once queried for a source location. We jump through\n  // these hoops because there can be many thousands of mappings, and parsing\n  // them is expensive, so we only want to do it if we must.\n  //\n  // Each object in the arrays is of the form:\n  //\n  //     {\n  //       generatedLine: The line number in the generated code,\n  //       generatedColumn: The column number in the generated code,\n  //       source: The path to the original source file that generated this\n  //               chunk of code,\n  //       originalLine: The line number in the original source that\n  //                     corresponds to this chunk of generated code,\n  //       originalColumn: The column number in the original source that\n  //                       corresponds to this chunk of generated code,\n  //       name: The name of the original symbol which generated this chunk of\n  //             code.\n  //     }\n  //\n  // All properties except for `generatedLine` and `generatedColumn` can be\n  // `null`.\n  //\n  // `_generatedMappings` is ordered by the generated positions.\n  //\n  // `_originalMappings` is ordered by the original positions.\n\n  SourceMapConsumer.prototype.__generatedMappings = null;\n  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n    get: function () {\n      if (!this.__generatedMappings) {\n        this.__generatedMappings = [];\n        this.__originalMappings = [];\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this.__generatedMappings;\n    }\n  });\n\n  SourceMapConsumer.prototype.__originalMappings = null;\n  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n    get: function () {\n      if (!this.__originalMappings) {\n        this.__generatedMappings = [];\n        this.__originalMappings = [];\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this.__originalMappings;\n    }\n  });\n\n  SourceMapConsumer.prototype._nextCharIsMappingSeparator =\n    function SourceMapConsumer_nextCharIsMappingSeparator(aStr) {\n      var c = aStr.charAt(0);\n      return c === \";\" || c === \",\";\n    };\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  SourceMapConsumer.prototype._parseMappings =\n    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var str = aStr;\n      var temp = {};\n      var mapping;\n\n      while (str.length > 0) {\n        if (str.charAt(0) === ';') {\n          generatedLine++;\n          str = str.slice(1);\n          previousGeneratedColumn = 0;\n        }\n        else if (str.charAt(0) === ',') {\n          str = str.slice(1);\n        }\n        else {\n          mapping = {};\n          mapping.generatedLine = generatedLine;\n\n          // Generated column.\n          base64VLQ.decode(str, temp);\n          mapping.generatedColumn = previousGeneratedColumn + temp.value;\n          previousGeneratedColumn = mapping.generatedColumn;\n          str = temp.rest;\n\n          if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {\n            // Original source.\n            base64VLQ.decode(str, temp);\n            mapping.source = this._sources.at(previousSource + temp.value);\n            previousSource += temp.value;\n            str = temp.rest;\n            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {\n              throw new Error('Found a source, but no line and column');\n            }\n\n            // Original line.\n            base64VLQ.decode(str, temp);\n            mapping.originalLine = previousOriginalLine + temp.value;\n            previousOriginalLine = mapping.originalLine;\n            // Lines are stored 0-based\n            mapping.originalLine += 1;\n            str = temp.rest;\n            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {\n              throw new Error('Found a source and line, but no column');\n            }\n\n            // Original column.\n            base64VLQ.decode(str, temp);\n            mapping.originalColumn = previousOriginalColumn + temp.value;\n            previousOriginalColumn = mapping.originalColumn;\n            str = temp.rest;\n\n            if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {\n              // Original name.\n              base64VLQ.decode(str, temp);\n              mapping.name = this._names.at(previousName + temp.value);\n              previousName += temp.value;\n              str = temp.rest;\n            }\n          }\n\n          this.__generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === 'number') {\n            this.__originalMappings.push(mapping);\n          }\n        }\n      }\n\n      this.__generatedMappings.sort(util.compareByGeneratedPositions);\n      this.__originalMappings.sort(util.compareByOriginalPositions);\n    };\n\n  /**\n   * Find the mapping that best matches the hypothetical \"needle\" mapping that\n   * we are searching for in the given \"haystack\" of mappings.\n   */\n  SourceMapConsumer.prototype._findMapping =\n    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                           aColumnName, aComparator) {\n      // To return the position we are searching for, we must first find the\n      // mapping for the given position and then return the opposite position it\n      // points to. Because the mappings are sorted, we can use binary search to\n      // find the best mapping.\n\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError('Line must be greater than or equal to 1, got '\n                            + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError('Column must be greater than or equal to 0, got '\n                            + aNeedle[aColumnName]);\n      }\n\n      return binarySearch.search(aNeedle, aMappings, aComparator);\n    };\n\n  /**\n   * Compute the last column for each generated mapping. The last column is\n   * inclusive.\n   */\n  SourceMapConsumer.prototype.computeColumnSpans =\n    function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n\n        // Mappings do not contain a field for the last generated columnt. We\n        // can come up with an optimistic estimate, however, by assuming that\n        // mappings are contiguous (i.e. given two consecutive mappings, the\n        // first mapping ends where the second one starts).\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n\n        // The last mapping for each line spans the entire line.\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    };\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.\n   *   - column: The column number in the generated source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.\n   *   - column: The column number in the original source, or null.\n   *   - name: The original identifier, or null.\n   */\n  SourceMapConsumer.prototype.originalPositionFor =\n    function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, 'line'),\n        generatedColumn: util.getArg(aArgs, 'column')\n      };\n\n      var index = this._findMapping(needle,\n                                    this._generatedMappings,\n                                    \"generatedLine\",\n                                    \"generatedColumn\",\n                                    util.compareByGeneratedPositions);\n\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, 'source', null);\n          if (source != null && this.sourceRoot != null) {\n            source = util.join(this.sourceRoot, source);\n          }\n          return {\n            source: source,\n            line: util.getArg(mapping, 'originalLine', null),\n            column: util.getArg(mapping, 'originalColumn', null),\n            name: util.getArg(mapping, 'name', null)\n          };\n        }\n      }\n\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    };\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * availible.\n   */\n  SourceMapConsumer.prototype.sourceContentFor =\n    function SourceMapConsumer_sourceContentFor(aSource) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n\n      if (this.sourceRoot != null) {\n        aSource = util.relative(this.sourceRoot, aSource);\n      }\n\n      if (this._sources.has(aSource)) {\n        return this.sourcesContent[this._sources.indexOf(aSource)];\n      }\n\n      var url;\n      if (this.sourceRoot != null\n          && (url = util.urlParse(this.sourceRoot))) {\n        // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n        // many users. We can help them out when they expect file:// URIs to\n        // behave like it would if they were running a local HTTP server. See\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n        var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\"\n            && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n        }\n\n        if ((!url.path || url.path == \"/\")\n            && this._sources.has(\"/\" + aSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n        }\n      }\n\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    };\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: The column number in the original source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  SourceMapConsumer.prototype.generatedPositionFor =\n    function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var needle = {\n        source: util.getArg(aArgs, 'source'),\n        originalLine: util.getArg(aArgs, 'line'),\n        originalColumn: util.getArg(aArgs, 'column')\n      };\n\n      if (this.sourceRoot != null) {\n        needle.source = util.relative(this.sourceRoot, needle.source);\n      }\n\n      var index = this._findMapping(needle,\n                                    this._originalMappings,\n                                    \"originalLine\",\n                                    \"originalColumn\",\n                                    util.compareByOriginalPositions);\n\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    };\n\n  /**\n   * Returns all generated line and column information for the original source\n   * and line provided. The only argument is an object with the following\n   * properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *\n   * and an array of objects is returned, each with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  SourceMapConsumer.prototype.allGeneratedPositionsFor =\n    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      // When there is no exact match, SourceMapConsumer.prototype._findMapping\n      // returns the index of the closest mapping less than the needle. By\n      // setting needle.originalColumn to Infinity, we thus find the last\n      // mapping for the given line, provided such a mapping exists.\n      var needle = {\n        source: util.getArg(aArgs, 'source'),\n        originalLine: util.getArg(aArgs, 'line'),\n        originalColumn: Infinity\n      };\n\n      if (this.sourceRoot != null) {\n        needle.source = util.relative(this.sourceRoot, needle.source);\n      }\n\n      var mappings = [];\n\n      var index = this._findMapping(needle,\n                                    this._originalMappings,\n                                    \"originalLine\",\n                                    \"originalColumn\",\n                                    util.compareByOriginalPositions);\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n\n        while (mapping && mapping.originalLine === needle.originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[--index];\n        }\n      }\n\n      return mappings.reverse();\n    };\n\n  SourceMapConsumer.GENERATED_ORDER = 1;\n  SourceMapConsumer.ORIGINAL_ORDER = 2;\n\n  /**\n   * Iterate over each mapping between an original source/line/column and a\n   * generated line/column in this source map.\n   *\n   * @param Function aCallback\n   *        The function that is called with each mapping.\n   * @param Object aContext\n   *        Optional. If specified, this object will be the value of `this` every\n   *        time that `aCallback` is called.\n   * @param aOrder\n   *        Either `SourceMapConsumer.GENERATED_ORDER` or\n   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n   *        iterate over the mappings sorted by the generated file's line/column\n   *        order or the original's source/line/column order, respectively. Defaults to\n   *        `SourceMapConsumer.GENERATED_ORDER`.\n   */\n  SourceMapConsumer.prototype.eachMapping =\n    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n      var mappings;\n      switch (order) {\n      case SourceMapConsumer.GENERATED_ORDER:\n        mappings = this._generatedMappings;\n        break;\n      case SourceMapConsumer.ORIGINAL_ORDER:\n        mappings = this._originalMappings;\n        break;\n      default:\n        throw new Error(\"Unknown order of iteration.\");\n      }\n\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function (mapping) {\n        var source = mapping.source;\n        if (source != null && sourceRoot != null) {\n          source = util.join(sourceRoot, source);\n        }\n        return {\n          source: source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name\n        };\n      }).forEach(aCallback, context);\n    };\n\n  exports.SourceMapConsumer = SourceMapConsumer;\n\n});\n"]}