{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["var unparse = require('escodegen').generate;\n\nmodule.exports = function (ast, vars) {\n    if (!vars) vars = {};\n    var FAIL = {};\n    \n    var result = (function walk (node) {\n        if (node.type === 'Literal') {\n            return node.value;\n        }\n        else if (node.type === 'UnaryExpression'){\n            var val = walk(node.argument)\n            if (node.operator === '+') return +val\n            if (node.operator === '-') return -val\n            if (node.operator === '~') return ~val\n            if (node.operator === '!') return !val\n            return FAIL\n        }\n        else if (node.type === 'ArrayExpression') {\n            var xs = [];\n            for (var i = 0, l = node.elements.length; i < l; i++) {\n                var x = walk(node.elements[i]);\n                if (x === FAIL) return FAIL;\n                xs.push(x);\n            }\n            return xs;\n        }\n        else if (node.type === 'ObjectExpression') {\n            var obj = {};\n            for (var i = 0; i < node.properties.length; i++) {\n                var prop = node.properties[i];\n                var value = prop.value === null\n                    ? prop.value\n                    : walk(prop.value)\n                ;\n                if (value === FAIL) return FAIL;\n                obj[prop.key.value || prop.key.name] = value;\n            }\n            return obj;\n        }\n        else if (node.type === 'BinaryExpression' ||\n                 node.type === 'LogicalExpression') {\n            var l = walk(node.left);\n            if (l === FAIL) return FAIL;\n            var r = walk(node.right);\n            if (r === FAIL) return FAIL;\n            \n            var op = node.operator;\n            if (op === '==') return l == r;\n            if (op === '===') return l === r;\n            if (op === '!=') return l != r;\n            if (op === '!==') return l !== r;\n            if (op === '+') return l + r;\n            if (op === '-') return l - r;\n            if (op === '*') return l * r;\n            if (op === '/') return l / r;\n            if (op === '%') return l % r;\n            if (op === '<') return l < r;\n            if (op === '<=') return l <= r;\n            if (op === '>') return l > r;\n            if (op === '>=') return l >= r;\n            if (op === '|') return l | r;\n            if (op === '&') return l & r;\n            if (op === '^') return l ^ r;\n            if (op === '&&') return l && r;\n            if (op === '||') return l || r;\n            \n            return FAIL;\n        }\n        else if (node.type === 'Identifier') {\n            if ({}.hasOwnProperty.call(vars, node.name)) {\n                return vars[node.name];\n            }\n            else return FAIL;\n        }\n        else if (node.type === 'CallExpression') {\n            var callee = walk(node.callee);\n            if (callee === FAIL) return FAIL;\n            \n            var ctx = node.callee.object ? walk(node.callee.object) : FAIL;\n            if (ctx === FAIL) ctx = null;\n\n            var args = [];\n            for (var i = 0, l = node.arguments.length; i < l; i++) {\n                var x = walk(node.arguments[i]);\n                if (x === FAIL) return FAIL;\n                args.push(x);\n            }\n            return callee.apply(ctx, args);\n        }\n        else if (node.type === 'MemberExpression') {\n            var obj = walk(node.object);\n            if (obj === FAIL) return FAIL;\n            if (node.property.type === 'Identifier') {\n                return obj[node.property.name];\n            }\n            var prop = walk(node.property);\n            if (prop === FAIL) return FAIL;\n            return obj[prop];\n        }\n        else if (node.type === 'ConditionalExpression') {\n            var val = walk(node.test)\n            if (val === FAIL) return FAIL;\n            return val ? walk(node.consequent) : walk(node.alternate)\n        }\n        else if (node.type === 'FunctionExpression') {\n            var keys = Object.keys(vars);\n            var vals = keys.map(function(key) {\n                return vars[key];\n            });\n            return Function(keys.join(', '), 'return ' + unparse(node)).apply(null, vals);\n        }\n        else return FAIL;\n    })(ast);\n    \n    return result === FAIL ? undefined : result;\n};\n"]}