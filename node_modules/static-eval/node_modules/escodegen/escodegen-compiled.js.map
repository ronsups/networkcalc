{"version":3,"sources":["escodegen.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCC,aAAY;AACT;;AAEA,QAAI,MAAJ,EACI,UADJ,EAEI,gBAFJ,EAGI,KAHJ,EAII,UAJJ,EAKI,UALJ,EAMI,OANJ,EAOI,IAPJ,EAQI,MARJ,EASI,IATJ,EAUI,QAVJ,EAWI,WAXJ,EAYI,MAZJ,EAaI,UAbJ,EAcI,OAdJ,EAeI,KAfJ,EAgBI,WAhBJ,EAiBI,UAjBJ,EAkBI,iBAlBJ,EAmBI,SAnBJ,EAoBI,KApBJ,EAqBI,KArBJ,EAsBI,SAtBJ,EAuBI,aAvBJ,EAwBI,eAxBJ;;AA0BA,iBAAa,QAAQ,YAAR,CAAb;;AAEA,aAAS;AACL,8BAAsB,sBADjB;AAEL,yBAAiB,iBAFZ;AAGL,sBAAc,cAHT;AAIL,iCAAyB,yBAJpB;AAKL,wBAAgB,gBALX;AAML,0BAAkB,kBANb;AAOL,wBAAgB,gBAPX;AAQL,wBAAgB,gBARX;AASL,qBAAa,aATR;AAUL,4BAAoB,oBAVf;AAWL,iCAAyB,yBAXpB;AAYL,+BAAuB,uBAZlB;AAaL,2BAAmB,mBAbd;AAcL,4BAAoB,oBAdf;AAeL,0BAAkB,kBAfb;AAgBL,2BAAmB,mBAhBd;AAiBL,wBAAgB,gBAjBX;AAkBL,6BAAqB,qBAlBhB;AAmBL,sBAAc,cAnBT;AAoBL,wBAAgB,gBApBX;AAqBL,6BAAqB,qBArBhB;AAsBL,4BAAoB,oBAtBf;AAuBL,oBAAY,YAvBP;AAwBL,qBAAa,aAxBR;AAyBL,iBAAS,SAzBJ;AA0BL,0BAAkB,kBA1Bb;AA2BL,2BAAmB,mBA3Bd;AA4BL,0BAAkB,kBA5Bb;AA6BL,uBAAe,eA7BV;AA8BL,0BAAkB,kBA9Bb;AA+BL,uBAAe,eA/BV;AAgCL,iBAAS,SAhCJ;AAiCL,kBAAU,UAjCL;AAkCL,yBAAiB,iBAlCZ;AAmCL,4BAAoB,oBAnCf;AAoCL,yBAAiB,iBApCZ;AAqCL,oBAAY,YArCP;AAsCL,wBAAgB,gBAtCX;AAuCL,wBAAgB,gBAvCX;AAwCL,sBAAc,cAxCT;AAyCL,yBAAiB,iBAzCZ;AA0CL,0BAAkB,kBA1Cb;AA2CL,6BAAqB,qBA3ChB;AA4CL,4BAAoB,oBA5Cf;AA6CL,wBAAgB,gBA7CX;AA8CL,uBAAe,eA9CV;AA+CL,yBAAiB;;AA/CZ,KAAT;;AAmDA,iBAAa;AACT,kBAAU,CADD;AAET,oBAAY,CAFH;AAGT,qBAAa,CAHJ;AAIT,uBAAe,CAJN;AAKT,mBAAW,CALF;AAMT,oBAAY,CANH;AAOT,mBAAW,CAPF;AAQT,oBAAY,CARH;AAST,oBAAY,CATH;AAUT,kBAAU,CAVD;AAWT,oBAAY,CAXH;AAYT,sBAAc,EAZL;AAaT,kBAAU,EAbD;AAcT,wBAAgB,EAdP;AAeT,eAAO,EAfE;AAgBT,iBAAS,EAhBA;AAiBT,cAAM,EAjBG;AAkBT,aAAK,EAlBI;AAmBT,gBAAQ,EAnBC;AAoBT,iBAAS;AApBA,KAAb;;AAuBA,uBAAmB;AACf,cAAM,WAAW,SADF;AAEf,cAAM,WAAW,UAFF;AAGf,aAAK,WAAW,SAHD;AAIf,aAAK,WAAW,UAJD;AAKf,aAAK,WAAW,UALD;AAMf,cAAM,WAAW,QANF;AAOf,cAAM,WAAW,QAPF;AAQf,eAAO,WAAW,QARH;AASf,eAAO,WAAW,QATH;AAUf,cAAM,WAAW,QAVF;AAWf,gBAAQ,WAAW,QAXJ;AAYf,aAAK,WAAW,UAZD;AAaf,aAAK,WAAW,UAbD;AAcf,cAAM,WAAW,UAdF;AAef,cAAM,WAAW,UAfF;AAgBf,cAAM,WAAW,UAhBF;AAiBf,sBAAc,WAAW,UAjBV;AAkBf,cAAM,WAAW,YAlBF;AAmBf,cAAM,WAAW,YAnBF;AAoBf,eAAO,WAAW,YApBH;AAqBf,aAAK,WAAW,QArBD;AAsBf,aAAK,WAAW,QAtBD;AAuBf,aAAK,WAAW,cAvBD;AAwBf,aAAK,WAAW,cAxBD;AAyBf,aAAK,WAAW;AAzBD,KAAnB;;AA4BA,YAAQ;AACJ,gCAAwB,IAAI,MAAJ,CAAW,ulCAAX;AADpB,KAAR;;AAIA,aAAS,iBAAT,GAA6B;;AAEzB,eAAO;AACH,oBAAQ,IADL;AAEH,kBAAM,IAFH;AAGH,mBAAO,IAHJ;AAIH,qBAAS,KAJN;AAKH,oBAAQ;AACJ,wBAAQ;AACJ,2BAAO,MADH;AAEJ,0BAAM,CAFF;AAGJ,4CAAwB;AAHpB,iBADJ;AAMJ,yBAAS,IANL;AAOJ,uBAAO,GAPH;AAQJ,sBAAM,KARF;AASJ,0BAAU,KATN;AAUJ,6BAAa,KAVT;AAWJ,wBAAQ,QAXJ;AAYJ,4BAAY,KAZR;AAaJ,yBAAS,KAbL;AAcJ,6BAAa,IAdT;AAeJ,4BAAY,IAfR;AAgBJ,mCAAmB;AAhBf,aALL;AAuBH,iBAAK;AACD,mCAAmB,KADlB;AAED,iDAAiC;AAFhC,aAvBF;AA2BH,uBAAW,IA3BR;AA4BH,2BAAe,IA5BZ;AA6BH,+BAAmB,KA7BhB;AA8BH,uBAAW,KA9BR;AA+BH,sBAAU;AA/BP,SAAP;AAiCH;;AAED,aAAS,aAAT,CAAuB,GAAvB,EAA4B;AACxB,YAAI,SAAS,IAAI,MAAjB;AAAA,YACI,SAAS,EADb;AAAA,YAEI,CAFJ;AAGA,aAAK,IAAI,CAAT,EAAY,IAAI,MAAhB,EAAwB,KAAK,CAA7B,EAAgC;AAC5B,mBAAO,CAAP,IAAY,IAAI,MAAJ,CAAW,CAAX,CAAZ;AACH;AACD,eAAO,MAAP;AACH;;AAED,aAAS,YAAT,CAAsB,GAAtB,EAA2B,GAA3B,EAAgC;AAC5B,YAAI,SAAS,EAAb;;AAEA,aAAK,OAAO,CAAZ,EAAe,MAAM,CAArB,EAAwB,SAAS,CAAT,EAAY,OAAO,GAA3C,EAAgD;AAC5C,gBAAI,MAAM,CAAV,EAAa;AACT,0BAAU,GAAV;AACH;AACJ;;AAED,eAAO,MAAP;AACH;;AAED,cAAU,MAAM,OAAhB;AACA,QAAI,CAAC,OAAL,EAAc;AACV,kBAAU,SAAS,OAAT,CAAiB,KAAjB,EAAwB;AAC9B,mBAAO,OAAO,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,KAA/B,MAA0C,gBAAjD;AACH,SAFD;AAGH;;;AAGD,aAAS,cAAT,CAAwB,IAAxB,EAA8B,MAA9B,EAAsC,QAAtC,EAAgD,KAAhD,EAAuD;AACnD,YAAI,SAAS,EAAb;;AAEA,iBAAS,OAAT,CAAiB,KAAjB,EAAwB;AACpB,gBAAI,CAAJ,EAAO,EAAP;AACA,gBAAI,QAAQ,KAAR,CAAJ,EAAoB;AAChB,qBAAK,IAAI,CAAJ,EAAO,KAAK,MAAM,MAAvB,EAA+B,IAAI,EAAnC,EAAuC,EAAE,CAAzC,EAA4C;AACxC,4BAAQ,MAAM,CAAN,CAAR;AACH;AACJ,aAJD,MAIO,IAAI,iBAAiB,cAArB,EAAqC;AACxC,uBAAO,IAAP,CAAY,KAAZ;AACH,aAFM,MAEA,IAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAjC,EAAwC;AAC3C,uBAAO,IAAP,CAAY,KAAZ;AACH;AACJ;;AAED,gBAAQ,KAAR;AACA,aAAK,QAAL,GAAgB,MAAhB;AACH;;AAED,mBAAe,SAAf,CAAyB,QAAzB,GAAoC,SAAS,QAAT,GAAoB;AACpD,YAAI,MAAM,EAAV;AAAA,YAAc,CAAd;AAAA,YAAiB,EAAjB;AAAA,YAAqB,IAArB;AACA,aAAK,IAAI,CAAJ,EAAO,KAAK,KAAK,QAAL,CAAc,MAA/B,EAAuC,IAAI,EAA3C,EAA+C,EAAE,CAAjD,EAAoD;AAChD,mBAAO,KAAK,QAAL,CAAc,CAAd,CAAP;AACA,gBAAI,gBAAgB,cAApB,EAAoC;AAChC,uBAAO,KAAK,QAAL,EAAP;AACH,aAFD,MAEO;AACH,uBAAO,IAAP;AACH;AACJ;AACD,eAAO,GAAP;AACH,KAXD;;AAaA,mBAAe,SAAf,CAAyB,YAAzB,GAAwC,SAAS,YAAT,CAAsB,OAAtB,EAA+B,WAA/B,EAA4C;AAChF,YAAI,OAAO,KAAK,QAAL,CAAc,KAAK,QAAL,CAAc,MAAd,GAAuB,CAArC,CAAX;AACA,YAAI,gBAAgB,cAApB,EAAoC;AAChC,iBAAK,YAAL,CAAkB,OAAlB,EAA2B,WAA3B;AACH,SAFD,MAEO,IAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AACjC,iBAAK,QAAL,CAAc,KAAK,QAAL,CAAc,MAAd,GAAuB,CAArC,IAA0C,KAAK,OAAL,CAAa,OAAb,EAAsB,WAAtB,CAA1C;AACH,SAFM,MAEA;AACH,iBAAK,QAAL,CAAc,IAAd,CAAmB,GAAG,OAAH,CAAW,OAAX,EAAoB,WAApB,CAAnB;AACH;AACD,eAAO,IAAP;AACH,KAVD;;AAYA,mBAAe,SAAf,CAAyB,IAAzB,GAAgC,SAAS,IAAT,CAAc,GAAd,EAAmB;AAC/C,YAAI,CAAJ,EAAO,EAAP,EAAW,MAAX;AACA,iBAAS,EAAT;AACA,aAAK,KAAK,QAAL,CAAc,MAAnB;AACA,YAAI,KAAK,CAAT,EAAY;AACR,iBAAK,IAAI,CAAJ,EAAO,MAAM,CAAlB,EAAqB,IAAI,EAAzB,EAA6B,EAAE,CAA/B,EAAkC;AAC9B,uBAAO,IAAP,CAAY,KAAK,QAAL,CAAc,CAAd,CAAZ,EAA8B,GAA9B;AACH;AACD,mBAAO,IAAP,CAAY,KAAK,QAAL,CAAc,EAAd,CAAZ;AACA,iBAAK,QAAL,GAAgB,MAAhB;AACH;AACD,eAAO,IAAP;AACH,KAZD;;AAcA,aAAS,iBAAT,CAA2B,GAA3B,EAAgC;AAC5B,eAAQ,UAAD,CAAY,IAAZ,CAAiB,GAAjB;AAAP;AACH;;AAED,aAAS,sBAAT,CAAgC,GAAhC,EAAqC;AACjC,YAAI,KAAK,IAAI,MAAJ,CAAW,IAAI,MAAJ,GAAa,CAAxB,CAAT;AACA,eAAO,MAAM,iBAAiB,EAAjB,CAAb;AACH;;AAED,aAAS,YAAT,CAAsB,MAAtB,EAA8B,QAA9B,EAAwC;AACpC,YAAI,GAAJ,EAAS,GAAT;;AAEA,iBAAS,YAAT,CAAsB,MAAtB,EAA8B;AAC1B,mBAAO,QAAO,MAAP,yCAAO,MAAP,OAAkB,QAAlB,IAA8B,kBAAkB,MAAhD,IAA0D,EAAE,kBAAkB,MAApB,CAAjE;AACH;;AAED,aAAK,GAAL,IAAY,QAAZ,EAAsB;AAClB,gBAAI,SAAS,cAAT,CAAwB,GAAxB,CAAJ,EAAkC;AAC9B,sBAAM,SAAS,GAAT,CAAN;AACA,oBAAI,aAAa,GAAb,CAAJ,EAAuB;AACnB,wBAAI,aAAa,OAAO,GAAP,CAAb,CAAJ,EAA+B;AAC3B,qCAAa,OAAO,GAAP,CAAb,EAA0B,GAA1B;AACH,qBAFD,MAEO;AACH,+BAAO,GAAP,IAAc,aAAa,EAAb,EAAiB,GAAjB,CAAd;AACH;AACJ,iBAND,MAMO;AACH,2BAAO,GAAP,IAAc,GAAd;AACH;AACJ;AACJ;AACD,eAAO,MAAP;AACH;;AAED,aAAS,cAAT,CAAwB,KAAxB,EAA+B;AAC3B,YAAI,MAAJ,EAAY,KAAZ,EAAmB,IAAnB,EAAyB,QAAzB,EAAmC,GAAnC;;AAEA,YAAI,UAAU,KAAd,EAAqB;AACjB,kBAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AACH;AACD,YAAI,QAAQ,CAAR,IAAc,UAAU,CAAV,IAAe,IAAI,KAAJ,GAAY,CAA7C,EAAiD;AAC7C,kBAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACH;;AAED,YAAI,UAAU,IAAI,CAAlB,EAAqB;AACjB,mBAAO,OAAO,MAAP,GAAgB,WAAW,OAAX,GAAqB,QAA5C;AACH;;AAED,iBAAS,KAAK,KAAd;AACA,YAAI,CAAC,QAAD,IAAa,OAAO,MAAP,GAAgB,CAAjC,EAAoC;AAChC,mBAAO,MAAP;AACH;;AAED,gBAAQ,OAAO,OAAP,CAAe,GAAf,CAAR;AACA,YAAI,CAAC,IAAD,IAAS,OAAO,MAAP,CAAc,CAAd,MAAqB,GAA9B,IAAqC,UAAU,CAAnD,EAAsD;AAClD,oBAAQ,CAAR;AACA,qBAAS,OAAO,KAAP,CAAa,CAAb,CAAT;AACH;AACD,eAAO,MAAP;AACA,iBAAS,OAAO,OAAP,CAAe,IAAf,EAAqB,GAArB,CAAT;AACA,mBAAW,CAAX;AACA,YAAI,CAAC,MAAM,KAAK,OAAL,CAAa,GAAb,CAAP,IAA4B,CAAhC,EAAmC;AAC/B,uBAAW,CAAC,KAAK,KAAL,CAAW,MAAM,CAAjB,CAAZ;AACA,mBAAO,KAAK,KAAL,CAAW,CAAX,EAAc,GAAd,CAAP;AACH;AACD,YAAI,SAAS,CAAb,EAAgB;AACZ,wBAAY,KAAK,MAAL,GAAc,KAAd,GAAsB,CAAlC;AACA,mBAAO,EAAE,KAAK,KAAL,CAAW,CAAX,EAAc,KAAd,IAAuB,KAAK,KAAL,CAAW,QAAQ,CAAnB,CAAzB,IAAkD,EAAzD;AACH;AACD,cAAM,CAAN;AACA,eAAO,KAAK,MAAL,CAAY,KAAK,MAAL,GAAc,GAAd,GAAoB,CAAhC,MAAuC,GAA9C,EAAmD;AAC/C,mBAAO,CAAP;AACH;AACD,YAAI,QAAQ,CAAZ,EAAe;AACX,wBAAY,GAAZ;AACA,mBAAO,KAAK,KAAL,CAAW,CAAX,EAAc,GAAd,CAAP;AACH;AACD,YAAI,aAAa,CAAjB,EAAoB;AAChB,oBAAQ,MAAM,QAAd;AACH;AACD,YAAI,CAAC,KAAK,MAAL,GAAc,OAAO,MAArB,IACQ,eAAe,QAAQ,IAAvB,IAA+B,KAAK,KAAL,CAAW,KAAX,MAAsB,KAArD,IAA8D,CAAC,OAAO,OAAO,MAAM,QAAN,CAAe,EAAf,CAAf,EAAmC,MAAnC,GAA4C,OAAO,MAD1H,KAEI,CAAC,IAAD,KAAU,KAFlB,EAEyB;AACrB,qBAAS,IAAT;AACH;;AAED,eAAO,MAAP;AACH;;;;;AAKD,aAAS,qBAAT,CAA+B,EAA/B,EAAmC,mBAAnC,EAAwD;;AAEpD,YAAI,CAAC,KAAK,CAAC,CAAP,MAAc,MAAlB,EAA0B;AACtB,mBAAO,CAAC,sBAAsB,GAAtB,GAA4B,KAA7B,KAAwC,OAAO,MAAR,GAAkB,MAAlB,GAA2B,MAAlE,CAAP;AACH,SAFD,MAEO,IAAI,OAAO,EAAP,IAAa,OAAO,EAAxB,EAA4B;;AAC/B,mBAAO,CAAC,sBAAsB,EAAtB,GAA2B,IAA5B,KAAsC,OAAO,EAAR,GAAc,GAAd,GAAoB,GAAzD,CAAP;AACH;AACD,eAAO,OAAO,YAAP,CAAoB,EAApB,CAAP;AACH;;AAED,aAAS,cAAT,CAAwB,GAAxB,EAA6B;AACzB,YAAI,KAAJ,EAAW,MAAX,EAAmB,KAAnB,EAA0B,CAA1B,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,gBAArC,EAAuD,mBAAvD;;AAEA,iBAAS,IAAI,QAAJ,EAAT;;AAEA,YAAI,IAAI,MAAR,EAAgB;;AAEZ,oBAAQ,OAAO,KAAP,CAAa,YAAb,CAAR;AACA,gBAAI,CAAC,KAAL,EAAY;AACR,uBAAO,MAAP;AACH;;AAED,oBAAQ,MAAM,CAAN,CAAR;AACA,qBAAS,EAAT;;AAEA,+BAAmB,KAAnB;AACA,kCAAsB,KAAtB;AACA,iBAAK,IAAI,CAAJ,EAAO,KAAK,IAAI,MAAJ,CAAW,MAA5B,EAAoC,IAAI,EAAxC,EAA4C,EAAE,CAA9C,EAAiD;AAC7C,qBAAK,IAAI,MAAJ,CAAW,UAAX,CAAsB,CAAtB,CAAL;;AAEA,oBAAI,CAAC,mBAAL,EAA0B;AACtB,wBAAI,gBAAJ,EAAsB;AAClB,4BAAI,OAAO,EAAX,EAAe;;AACX,+CAAmB,KAAnB;AACH;AACJ,qBAJD,MAIO;AACH,4BAAI,OAAO,EAAX,EAAe;;AACX,sCAAU,IAAV;AACH,yBAFD,MAEO,IAAI,OAAO,EAAX,EAAe;;AAClB,+CAAmB,IAAnB;AACH;AACJ;AACD,8BAAU,sBAAsB,EAAtB,EAA0B,mBAA1B,CAAV;AACA,0CAAsB,OAAO,EAA7B,C;AACH,iBAdD,MAcO;;AAEH,8BAAU,sBAAsB,EAAtB,EAA0B,mBAA1B,CAAV;;AAEA,0CAAsB,KAAtB;AACH;AACJ;;AAED,mBAAO,MAAM,MAAN,GAAe,GAAf,GAAqB,KAA5B;AACH;;AAED,eAAO,MAAP;AACH;;AAED,aAAS,sBAAT,CAAgC,EAAhC,EAAoC,IAApC,EAA0C;AACtC,YAAI,OAAO,GAAG,UAAH,CAAc,CAAd,CAAX;AAAA,YAA6B,MAAM,KAAK,QAAL,CAAc,EAAd,CAAnC;AAAA,YAAsD,SAAS,IAA/D;;AAEA,gBAAQ,EAAR;AACA,iBAAK,IAAL;AACI,0BAAU,GAAV;AACA;AACJ,iBAAK,IAAL;AACI,0BAAU,GAAV;AACA;AACJ,iBAAK,IAAL;AACI,0BAAU,GAAV;AACA;AACJ;AACI,oBAAI,QAAQ,OAAO,IAAnB,EAAyB;AACrB,8BAAU,MAAM,OAAO,KAAP,CAAa,IAAI,MAAjB,CAAN,GAAiC,GAA3C;AACH,iBAFD,MAEO,IAAI,OAAO,QAAP,IAAmB,aAAa,OAAb,CAAqB,IAArB,IAA6B,CAApD,EAAuD;AAC1D,8BAAU,GAAV;AACH,iBAFM,MAEA,IAAI,OAAO,MAAX,EAAmB;;AACtB,8BAAU,KAAV;AACH,iBAFM,MAEA;AACH,8BAAU,MAAM,KAAK,KAAL,CAAW,IAAI,MAAf,CAAN,GAA+B,GAAzC;AACH;AACD;AApBJ;;AAuBA,eAAO,MAAP;AACH;;AAED,aAAS,yBAAT,CAAmC,EAAnC,EAAuC;AACnC,YAAI,SAAS,IAAb;AACA,gBAAQ,EAAR;AACA,iBAAK,IAAL;AACI,0BAAU,IAAV;AACA;AACJ,iBAAK,IAAL;AACI,0BAAU,GAAV;AACA;AACJ,iBAAK,IAAL;AACI,0BAAU,GAAV;AACA;AACJ,iBAAK,QAAL;AACI,0BAAU,OAAV;AACA;AACJ,iBAAK,QAAL;AACI,0BAAU,OAAV;AACA;AACJ;AACI,sBAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AAjBJ;;AAoBA,eAAO,MAAP;AACH;;AAED,aAAS,eAAT,CAAyB,GAAzB,EAA8B;AAC1B,YAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAe,GAAf,EAAoB,KAApB;;AAEA,cAAM,GAAN;AACA,YAAI,OAAO,IAAI,CAAJ,CAAP,KAAkB,WAAtB,EAAmC;AAC/B,kBAAM,cAAc,GAAd,CAAN;AACH;;AAED,gBAAQ,WAAW,QAAX,GAAsB,GAAtB,GAA4B,IAApC;AACA,aAAK,IAAI,CAAJ,EAAO,KAAK,IAAI,MAArB,EAA6B,IAAI,EAAjC,EAAqC,KAAK,CAA1C,EAA6C;AACzC,iBAAK,IAAI,CAAJ,CAAL;AACA,gBAAI,OAAO,IAAX,EAAiB;AACb,wBAAQ,GAAR;AACA;AACH,aAHD,MAGO,IAAI,OAAO,GAAX,EAAgB;AACnB,wBAAQ,IAAR;AACA;AACH,aAHM,MAGA,IAAI,OAAO,IAAX,EAAiB;AACpB,qBAAK,CAAL;AACH;AACJ;;AAED,eAAO,QAAQ,GAAR,GAAc,KAArB;AACH;;AAED,aAAS,YAAT,CAAsB,GAAtB,EAA2B;AACvB,YAAI,SAAS,EAAb;AAAA,YAAiB,CAAjB;AAAA,YAAoB,GAApB;AAAA,YAAyB,EAAzB;AAAA,YAA6B,eAAe,CAA5C;AAAA,YAA+C,eAAe,CAA9D;AAAA,YAAiE,MAAjE;;AAEA,YAAI,OAAO,IAAI,CAAJ,CAAP,KAAkB,WAAtB,EAAmC;AAC/B,kBAAM,cAAc,GAAd,CAAN;AACH;;AAED,aAAK,IAAI,CAAJ,EAAO,MAAM,IAAI,MAAtB,EAA8B,IAAI,GAAlC,EAAuC,KAAK,CAA5C,EAA+C;AAC3C,iBAAK,IAAI,CAAJ,CAAL;AACA,gBAAI,OAAO,IAAX,EAAiB;AACb,gCAAgB,CAAhB;AACH,aAFD,MAEO,IAAI,OAAO,GAAX,EAAgB;AACnB,gCAAgB,CAAhB;AACH,aAFM,MAEA,IAAI,OAAO,GAAP,IAAc,IAAlB,EAAwB;AAC3B,0BAAU,IAAV;AACH,aAFM,MAEA,IAAI,qBAAqB,OAArB,CAA6B,EAA7B,KAAoC,CAAxC,EAA2C;AAC9C,0BAAU,0BAA0B,EAA1B,CAAV;AACA;AACH,aAHM,MAGA,IAAK,QAAQ,KAAK,GAAd,IAAsB,EAAE,QAAQ,UAAR,IAAuB,MAAM,GAAN,IAAa,MAAM,GAA5C,CAA1B,EAA6E;AAChF,0BAAU,uBAAuB,EAAvB,EAA2B,IAAI,IAAI,CAAR,CAA3B,CAAV;AACA;AACH;AACD,sBAAU,EAAV;AACH;;AAED,iBAAS,EAAE,WAAW,QAAX,IAAwB,WAAW,MAAX,IAAqB,eAAe,YAA9D,CAAT;AACA,cAAM,MAAN;AACA,iBAAS,SAAS,IAAT,GAAgB,GAAzB;;AAEA,YAAI,OAAO,IAAI,CAAJ,CAAP,KAAkB,WAAtB,EAAmC;AAC/B,kBAAM,cAAc,GAAd,CAAN;AACH;;AAED,aAAK,IAAI,CAAJ,EAAO,MAAM,IAAI,MAAtB,EAA8B,IAAI,GAAlC,EAAuC,KAAK,CAA5C,EAA+C;AAC3C,iBAAK,IAAI,CAAJ,CAAL;AACA,gBAAK,OAAO,IAAP,IAAe,MAAhB,IAA4B,OAAO,GAAP,IAAc,CAAC,MAA/C,EAAwD;AACpD,0BAAU,IAAV;AACH;AACD,sBAAU,EAAV;AACH;;AAED,eAAO,UAAU,SAAS,IAAT,GAAgB,GAA1B,CAAP;AACH;;AAED,aAAS,YAAT,CAAsB,EAAtB,EAA0B;;AAEtB,eAAO,gBAAgB,OAAhB,CAAwB,EAAxB,KAA+B,CAA/B,IAAqC,GAAG,UAAH,CAAc,CAAd,KAAoB,MAApB,IAA8B,oBAAyG,OAAzG,CAAiH,EAAjH,KAAwH,CAAlM;AACH;;AAED,aAAS,gBAAT,CAA0B,EAA1B,EAA8B;AAC1B,eAAO,mBAAmB,OAAnB,CAA2B,EAA3B,KAAkC,CAAzC;AACH;;AAED,aAAS,gBAAT,CAA0B,EAA1B,EAA8B;AAC1B,eAAQ,OAAO,GAAR,IAAiB,OAAO,GAAxB,IAAiC,OAAO,IAAxC,IACF,MAAM,GAAN,IAAa,MAAM,GADjB,IAC0B,MAAM,GAAN,IAAa,MAAM,GAD7C,IAED,MAAM,GAAP,IAAgB,MAAM,GAFpB,IAGD,GAAG,UAAH,CAAc,CAAd,KAAoB,IAArB,IAA8B,MAAM,sBAAN,CAA6B,IAA7B,CAAkC,EAAlC,CAHnC;AAIH;;;AAGD,aAAS,cAAT,CAAwB,EAAxB,EAA4B;AACxB,eAAQ,MAAM,EAAN,IAAY,MAAM,EAA1B,C;AACH;;AAED,aAAS,YAAT,CAAsB,SAAtB,EAAiC,IAAjC,EAAuC;AACnC,YAAI,QAAQ,IAAZ,EAAkB;AACd,gBAAI,qBAAqB,UAAzB,EAAqC;AACjC,uBAAO,SAAP;AACH,aAFD,MAEO;AACH,uBAAO,EAAP;AACH;AACJ;AACD,YAAI,KAAK,GAAL,IAAY,IAAhB,EAAsB;AAClB,mBAAO,IAAI,UAAJ,CAAe,IAAf,EAAqB,IAArB,EAA2B,SAA3B,EAAsC,SAAtC,EAAiD,KAAK,IAAL,IAAa,IAA9D,CAAP;AACH;AACD,eAAO,IAAI,UAAJ,CAAe,KAAK,GAAL,CAAS,KAAT,CAAe,IAA9B,EAAoC,KAAK,GAAL,CAAS,KAAT,CAAe,MAAnD,EAA4D,cAAc,IAAd,GAAqB,KAAK,GAAL,CAAS,MAAT,IAAmB,IAAxC,GAA+C,SAA3G,EAAuH,SAAvH,EAAkI,KAAK,IAAL,IAAa,IAA/I,CAAP;AACH;;AAED,aAAS,YAAT,GAAwB;AACpB,eAAQ,KAAD,GAAU,KAAV,GAAkB,GAAzB;AACH;;AAED,aAAS,IAAT,CAAc,IAAd,EAAoB,KAApB,EAA2B;AACvB,YAAI,aAAa,aAAa,IAAb,EAAmB,QAAnB,EAAjB;AAAA,YACI,cAAc,aAAa,KAAb,EAAoB,QAApB,EADlB;AAAA,YAEI,WAAW,WAAW,MAAX,CAAkB,WAAW,MAAX,GAAoB,CAAtC,CAFf;AAAA,YAGI,YAAY,YAAY,MAAZ,CAAmB,CAAnB,CAHhB;;AAKA,YAAI,CAAC,aAAa,GAAb,IAAoB,aAAa,GAAlC,KAA0C,aAAa,SAAvD,IACJ,iBAAiB,QAAjB,KAA8B,iBAAiB,SAAjB,CAD1B,IAEJ,aAAa,GAAb,IAAoB,cAAc,GAFlC,EAEuC;;AACnC,mBAAO,CAAC,IAAD,EAAO,cAAP,EAAuB,KAAvB,CAAP;AACH,SAJD,MAIO,IAAI,aAAa,QAAb,KAA0B,iBAAiB,QAAjB,CAA1B,IAAwD,aAAa,SAAb,CAAxD,IAAmF,iBAAiB,SAAjB,CAAvF,EAAoH;AACvH,mBAAO,CAAC,IAAD,EAAO,KAAP,CAAP;AACH;AACD,eAAO,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAAP;AACH;;AAED,aAAS,SAAT,CAAmB,IAAnB,EAAyB;AACrB,eAAO,CAAC,IAAD,EAAO,IAAP,CAAP;AACH;;AAED,aAAS,UAAT,CAAoB,EAApB,EAAwB;AACpB,YAAI,YAAJ,EAAkB,MAAlB;AACA,uBAAe,IAAf;AACA,gBAAQ,MAAR;AACA,iBAAS,GAAG,IAAH,CAAQ,IAAR,EAAc,IAAd,CAAT;AACA,eAAO,YAAP;AACA,eAAO,MAAP;AACH;;AAED,aAAS,eAAT,CAAyB,GAAzB,EAA8B;AAC1B,YAAI,CAAJ;AACA,aAAK,IAAI,IAAI,MAAJ,GAAa,CAAtB,EAAyB,KAAK,CAA9B,EAAiC,KAAK,CAAtC,EAAyC;AACrC,gBAAI,iBAAiB,IAAI,MAAJ,CAAW,CAAX,CAAjB,CAAJ,EAAqC;AACjC;AACH;AACJ;AACD,eAAQ,IAAI,MAAJ,GAAa,CAAd,GAAmB,CAA1B;AACH;;AAED,aAAS,sBAAT,CAAgC,KAAhC,EAAuC,WAAvC,EAAoD;AAChD,YAAI,KAAJ,EAAW,CAAX,EAAc,GAAd,EAAmB,IAAnB,EAAyB,CAAzB,EAA4B,MAA5B,EAAoC,YAApC;;AAEA,gBAAQ,MAAM,KAAN,CAAY,aAAZ,CAAR;AACA,iBAAS,OAAO,SAAhB;;;AAGA,aAAK,IAAI,CAAJ,EAAO,MAAM,MAAM,MAAxB,EAAgC,IAAI,GAApC,EAAyC,KAAK,CAA9C,EAAiD;AAC7C,mBAAO,MAAM,CAAN,CAAP;AACA,gBAAI,CAAJ;AACA,mBAAO,IAAI,KAAK,MAAT,IAAmB,aAAa,KAAK,CAAL,CAAb,CAA1B,EAAiD;AAC7C,qBAAK,CAAL;AACH;AACD,gBAAI,SAAS,CAAb,EAAgB;AACZ,yBAAS,CAAT;AACH;AACJ;;AAED,YAAI,OAAO,WAAP,KAAuB,WAA3B,EAAwC;;;;;;;AAOpC,2BAAe,IAAf;AACA,gBAAI,MAAM,CAAN,EAAS,MAAT,MAAqB,GAAzB,EAA8B;AAC1B,+BAAe,GAAf;AACH;AACD,mBAAO,WAAP;AACH,SAZD,MAYO;AACH,gBAAI,SAAS,CAAb,EAAgB;;;;;;AAMZ,0BAAU,CAAV;AACH;AACD,2BAAe,IAAf;AACH;;AAED,aAAK,IAAI,CAAJ,EAAO,MAAM,MAAM,MAAxB,EAAgC,IAAI,GAApC,EAAyC,KAAK,CAA9C,EAAiD;AAC7C,kBAAM,CAAN,IAAW,aAAa,UAAU,MAAM,CAAN,EAAS,KAAT,CAAe,MAAf,CAAV,CAAb,EAAgD,IAAhD,CAAqD,EAArD,CAAX;AACH;;AAED,eAAO,YAAP;;AAEA,eAAO,MAAM,IAAN,CAAW,IAAX,CAAP;AACH;;AAED,aAAS,eAAT,CAAyB,OAAzB,EAAkC,WAAlC,EAA+C;AAC3C,YAAI,QAAQ,IAAR,KAAiB,MAArB,EAA6B;AACzB,gBAAI,uBAAuB,QAAQ,KAA/B,CAAJ,EAA2C;AACvC,uBAAO,OAAO,QAAQ,KAAtB;AACH,aAFD,MAEO;;AAEH,uBAAO,OAAO,QAAQ,KAAf,GAAuB,IAA9B;AACH;AACJ;AACD,YAAI,MAAM,MAAN,CAAa,MAAb,CAAoB,sBAApB,IAA8C,SAAS,IAAT,CAAc,QAAQ,KAAtB,CAAlD,EAAgF;AAC5E,mBAAO,uBAAuB,OAAO,QAAQ,KAAf,GAAuB,IAA9C,EAAoD,WAApD,CAAP;AACH;AACD,eAAO,OAAO,QAAQ,KAAf,GAAuB,IAA9B;AACH;;AAED,aAAS,sBAAT,CAAgC,IAAhC,EAAsC,MAAtC,EAA8C;AAC1C,YAAI,CAAJ,EAAO,GAAP,EAAY,OAAZ,EAAqB,IAArB,EAA2B,kBAA3B,EAA+C,WAA/C,EAA4D,QAA5D;;AAEA,YAAI,KAAK,eAAL,IAAwB,KAAK,eAAL,CAAqB,MAArB,GAA8B,CAA1D,EAA6D;AACzD,mBAAO,MAAP;;AAEA,sBAAU,KAAK,eAAL,CAAqB,CAArB,CAAV;AACA,qBAAS,EAAT;AACA,gBAAI,qBAAqB,KAAK,IAAL,KAAc,OAAO,OAA1C,IAAqD,KAAK,IAAL,CAAU,MAAV,KAAqB,CAA9E,EAAiF;AAC7E,uBAAO,IAAP,CAAY,IAAZ;AACH;AACD,mBAAO,IAAP,CAAY,gBAAgB,OAAhB,CAAZ;AACA,gBAAI,CAAC,uBAAuB,aAAa,MAAb,EAAqB,QAArB,EAAvB,CAAL,EAA8D;AAC1D,uBAAO,IAAP,CAAY,IAAZ;AACH;;AAED,iBAAK,IAAI,CAAJ,EAAO,MAAM,KAAK,eAAL,CAAqB,MAAvC,EAA+C,IAAI,GAAnD,EAAwD,KAAK,CAA7D,EAAgE;AAC5D,0BAAU,KAAK,eAAL,CAAqB,CAArB,CAAV;AACA,2BAAW,CAAC,gBAAgB,OAAhB,CAAD,CAAX;AACA,oBAAI,CAAC,uBAAuB,aAAa,QAAb,EAAuB,QAAvB,EAAvB,CAAL,EAAgE;AAC5D,6BAAS,IAAT,CAAc,IAAd;AACH;AACD,uBAAO,IAAP,CAAY,UAAU,QAAV,CAAZ;AACH;;AAED,mBAAO,IAAP,CAAY,UAAU,IAAV,CAAZ;AACH;;AAED,YAAI,KAAK,gBAAT,EAA2B;AACvB,iCAAqB,CAAC,uBAAuB,aAAa,MAAb,EAAqB,QAArB,EAAvB,CAAtB;AACA,0BAAc,aAAa,GAAb,EAAkB,gBAAgB,aAAa,CAAC,IAAD,EAAO,MAAP,EAAe,MAAf,CAAb,EAAqC,QAArC,EAAhB,CAAlB,CAAd;AACA,iBAAK,IAAI,CAAJ,EAAO,MAAM,KAAK,gBAAL,CAAsB,MAAxC,EAAgD,IAAI,GAApD,EAAyD,KAAK,CAA9D,EAAiE;AAC7D,0BAAU,KAAK,gBAAL,CAAsB,CAAtB,CAAV;AACA,oBAAI,kBAAJ,EAAwB;;;;;;AAMpB,wBAAI,MAAM,CAAV,EAAa;;AAET,iCAAS,CAAC,MAAD,EAAS,MAAT,CAAT;AACH,qBAHD,MAGO;AACH,iCAAS,CAAC,MAAD,EAAS,WAAT,CAAT;AACH;AACD,2BAAO,IAAP,CAAY,gBAAgB,OAAhB,EAAyB,WAAzB,CAAZ;AACH,iBAbD,MAaO;AACH,6BAAS,CAAC,MAAD,EAAS,UAAU,gBAAgB,OAAhB,CAAV,CAAT,CAAT;AACH;AACD,oBAAI,MAAM,MAAM,CAAZ,IAAiB,CAAC,uBAAuB,aAAa,MAAb,EAAqB,QAArB,EAAvB,CAAtB,EAA+E;AAC3E,6BAAS,CAAC,MAAD,EAAS,IAAT,CAAT;AACH;AACJ;AACJ;;AAED,eAAO,MAAP;AACH;;AAED,aAAS,YAAT,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC,MAArC,EAA6C;AACzC,YAAI,UAAU,MAAd,EAAsB;AAClB,mBAAO,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,CAAP;AACH;AACD,eAAO,IAAP;AACH;;AAED,aAAS,UAAT,CAAoB,IAApB,EAA0B,iBAA1B,EAA6C,YAA7C,EAA2D;AACvD,YAAI,MAAJ,EAAY,gBAAZ;;AAEA,2BAAmB,CAAC,MAAM,OAAP,IAAkB,CAAC,KAAK,eAA3C;;AAEA,YAAI,KAAK,IAAL,KAAc,OAAO,cAArB,IAAuC,gBAA3C,EAA6D;AACzD,mBAAO,CAAC,KAAD,EAAQ,kBAAkB,IAAlB,EAAwB,EAAE,cAAc,YAAhB,EAAxB,CAAR,CAAP;AACH;;AAED,YAAI,KAAK,IAAL,KAAc,OAAO,cAArB,IAAuC,gBAA3C,EAA6D;AACzD,mBAAO,GAAP;AACH;;AAED,mBAAW,YAAY;AACnB,qBAAS,CAAC,OAAD,EAAU,UAAU,kBAAkB,IAAlB,EAAwB,EAAE,mBAAmB,iBAArB,EAAwC,cAAc,YAAtD,EAAxB,CAAV,CAAV,CAAT;AACH,SAFD;;AAIA,eAAO,MAAP;AACH;;AAED,aAAS,gBAAT,CAA0B,IAA1B,EAAgC,MAAhC,EAAwC;AACpC,YAAI,OAAO,uBAAuB,aAAa,MAAb,EAAqB,QAArB,EAAvB,CAAX;AACA,YAAI,KAAK,IAAL,KAAc,OAAO,cAArB,KAAwC,CAAC,MAAM,OAAP,IAAkB,CAAC,KAAK,eAAhE,KAAoF,CAAC,IAAzF,EAA+F;AAC3F,mBAAO,CAAC,MAAD,EAAS,KAAT,CAAP;AACH;AACD,YAAI,IAAJ,EAAU;AACN,mBAAO,CAAC,MAAD,EAAS,IAAT,CAAP;AACH;AACD,eAAO,CAAC,MAAD,EAAS,OAAT,EAAkB,IAAlB,CAAP;AACH;;AAED,aAAS,gBAAT,CAA0B,IAA1B,EAAgC,MAAhC,EAAwC;AACpC,YAAI,CAAJ,EAAO,MAAP;AACA,iBAAS,KAAK,MAAM,QAAX,EAAqB,KAArB,CAA2B,SAA3B,CAAT;AACA,aAAK,IAAI,CAAT,EAAY,IAAI,OAAO,MAAvB,EAA+B,GAA/B,EAAoC;AAChC,mBAAO,CAAP,IAAY,UAAU,IAAV,GAAiB,OAAO,CAAP,CAA7B;AACH;;AAED,iBAAS,aAAa,MAAb,EAAqB,WAAW,QAAhC,EAA0C,OAAO,UAAjD,CAAT;AACA,eAAO,aAAa,MAAb,EAAqB,IAArB,CAAP;AACH;;AAED,aAAS,kBAAT,CAA4B,IAA5B,EAAkC;AAC9B,eAAO,aAAa,KAAK,IAAlB,EAAwB,IAAxB,CAAP;AACH;;AAED,aAAS,oBAAT,CAA8B,IAA9B,EAAoC;AAChC,YAAI,MAAJ,EAAY,CAAZ,EAAe,GAAf,EAAoB,IAApB,EAA0B,KAA1B;;AAEA,gBAAQ,KAAK,IAAL,KAAc,OAAO,uBAA7B;;AAEA,YAAI,SAAS,KAAK,MAAL,CAAY,MAAZ,KAAuB,CAAhC,IAAqC,KAAK,MAAL,CAAY,CAAZ,EAAe,IAAf,KAAwB,OAAO,UAAxE,EAAoF;;AAEhF,qBAAS,CAAC,mBAAmB,KAAK,MAAL,CAAY,CAAZ,CAAnB,CAAD,CAAT;AACH,SAHD,MAGO;AACH,qBAAS,CAAC,GAAD,CAAT;AACA,iBAAK,IAAI,CAAJ,EAAO,MAAM,KAAK,MAAL,CAAY,MAA9B,EAAsC,IAAI,GAA1C,EAA+C,KAAK,CAApD,EAAuD;AACnD,uBAAO,IAAP,CAAY,mBAAmB,KAAK,MAAL,CAAY,CAAZ,CAAnB,CAAZ;AACA,oBAAI,IAAI,CAAJ,GAAQ,GAAZ,EAAiB;AACb,2BAAO,IAAP,CAAY,MAAM,KAAlB;AACH;AACJ;AACD,mBAAO,IAAP,CAAY,GAAZ;AACH;;AAED,YAAI,KAAJ,EAAW;AACP,mBAAO,IAAP,CAAY,KAAZ,EAAmB,IAAnB;AACH;;AAED,YAAI,KAAK,UAAT,EAAqB;AACjB,mBAAO,IAAP,CAAY,KAAZ;AACA,mBAAO,mBAAmB,KAAK,IAAxB,EAA8B;AACjC,4BAAY,WAAW,UADU;AAEjC,yBAAS,IAFwB;AAGjC,2BAAW;AAHsB,aAA9B,CAAP;AAKA,gBAAI,KAAK,QAAL,GAAgB,MAAhB,CAAuB,CAAvB,MAA8B,GAAlC,EAAuC;AACnC,uBAAO,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,CAAP;AACH;AACD,mBAAO,IAAP,CAAY,IAAZ;AACH,SAXD,MAWO;AACH,mBAAO,IAAP,CAAY,WAAW,KAAK,IAAhB,EAAsB,KAAtB,EAA6B,IAA7B,CAAZ;AACH;AACD,eAAO,MAAP;AACH;;AAED,aAAS,kBAAT,CAA4B,IAA5B,EAAkC,MAAlC,EAA0C;AACtC,YAAI,MAAJ,EACI,UADJ,EAEI,IAFJ,EAGI,iBAHJ,EAII,CAJJ,EAKI,GALJ,EAMI,GANJ,EAOI,QAPJ,EAQI,SARJ,EASI,QATJ,EAUI,UAVJ,EAWI,SAXJ,EAYI,OAZJ,EAaI,SAbJ,EAcI,uBAdJ,EAeI,QAfJ;;AAiBA,qBAAa,OAAO,UAApB;AACA,kBAAU,OAAO,OAAjB;AACA,oBAAY,OAAO,SAAnB;AACA,eAAO,KAAK,IAAL,IAAa,OAAO,IAA3B;;AAEA,YAAI,MAAM,QAAN,IAAkB,KAAK,cAAL,CAAoB,MAAM,QAA1B,CAAtB,EAA2D;AACvD,mBAAO,iBAAiB,IAAjB,EAAuB,MAAvB,CAAP;AACH;;AAED,gBAAQ,IAAR;AACA,iBAAK,OAAO,kBAAZ;AACI,yBAAS,EAAT;AACA,2BAAY,WAAW,QAAX,GAAsB,UAAlC;AACA,qBAAK,IAAI,CAAJ,EAAO,MAAM,KAAK,WAAL,CAAiB,MAAnC,EAA2C,IAAI,GAA/C,EAAoD,KAAK,CAAzD,EAA4D;AACxD,2BAAO,IAAP,CAAY,mBAAmB,KAAK,WAAL,CAAiB,CAAjB,CAAnB,EAAwC;AAChD,oCAAY,WAAW,UADyB;AAEhD,iCAAS,OAFuC;AAGhD,mCAAW;AAHqC,qBAAxC,CAAZ;AAKA,wBAAI,IAAI,CAAJ,GAAQ,GAAZ,EAAiB;AACb,+BAAO,IAAP,CAAY,MAAM,KAAlB;AACH;AACJ;AACD,yBAAS,aAAa,MAAb,EAAqB,WAAW,QAAhC,EAA0C,UAA1C,CAAT;AACA;;AAEJ,iBAAK,OAAO,oBAAZ;AACI,2BAAY,WAAW,UAAX,GAAwB,UAApC;AACA,yBAAS,aACL,CACI,mBAAmB,KAAK,IAAxB,EAA8B;AAC1B,gCAAY,WAAW,IADG;AAE1B,6BAAS,OAFiB;AAG1B,+BAAW;AAHe,iBAA9B,CADJ,EAMI,QAAQ,KAAK,QAAb,GAAwB,KAN5B,EAOI,mBAAmB,KAAK,KAAxB,EAA+B;AAC3B,gCAAY,WAAW,UADI;AAE3B,6BAAS,OAFkB;AAG3B,+BAAW;AAHgB,iBAA/B,CAPJ,CADK,EAcL,WAAW,UAdN,EAeL,UAfK,CAAT;AAiBA;;AAEJ,iBAAK,OAAO,uBAAZ;AACI,2BAAY,WAAW,aAAX,GAA2B,UAAvC;AACA,yBAAS,aAAa,qBAAqB,IAArB,CAAb,EAAyC,WAAW,aAApD,EAAmE,UAAnE,CAAT;AACA;;AAEJ,iBAAK,OAAO,qBAAZ;AACI,2BAAY,WAAW,WAAX,GAAyB,UAArC;AACA,yBAAS,aACL,CACI,mBAAmB,KAAK,IAAxB,EAA8B;AAC1B,gCAAY,WAAW,SADG;AAE1B,6BAAS,OAFiB;AAG1B,+BAAW;AAHe,iBAA9B,CADJ,EAMI,QAAQ,GAAR,GAAc,KANlB,EAOI,mBAAmB,KAAK,UAAxB,EAAoC;AAChC,gCAAY,WAAW,UADS;AAEhC,6BAAS,OAFuB;AAGhC,+BAAW;AAHqB,iBAApC,CAPJ,EAYI,QAAQ,GAAR,GAAc,KAZlB,EAaI,mBAAmB,KAAK,SAAxB,EAAmC;AAC/B,gCAAY,WAAW,UADQ;AAE/B,6BAAS,OAFsB;AAG/B,+BAAW;AAHoB,iBAAnC,CAbJ,CADK,EAoBL,WAAW,WApBN,EAqBL,UArBK,CAAT;AAuBA;;AAEJ,iBAAK,OAAO,iBAAZ;AACA,iBAAK,OAAO,gBAAZ;AACI,oCAAoB,iBAAiB,KAAK,QAAtB,CAApB;;AAEA,2BAAY,oBAAoB,UAAhC;;AAEA,2BAAW,mBAAmB,KAAK,IAAxB,EAA8B;AACrC,gCAAY,iBADyB;AAErC,6BAAS,OAF4B;AAGrC,+BAAW;AAH0B,iBAA9B,CAAX;;AAMA,6BAAa,SAAS,QAAT,EAAb;;AAEA,oBAAI,WAAW,MAAX,CAAkB,WAAW,MAAX,GAAoB,CAAtC,MAA6C,GAA7C,IAAoD,iBAAiB,KAAK,QAAL,CAAc,MAAd,CAAqB,CAArB,CAAjB,CAAxD,EAAmG;AAC/F,6BAAS,CAAC,QAAD,EAAW,cAAX,EAA2B,KAAK,QAAhC,CAAT;AACH,iBAFD,MAEO;AACH,6BAAS,KAAK,QAAL,EAAe,KAAK,QAApB,CAAT;AACH;;AAED,2BAAW,mBAAmB,KAAK,KAAxB,EAA+B;AACtC,gCAAY,oBAAoB,CADM;AAEtC,6BAAS,OAF6B;AAGtC,+BAAW;AAH2B,iBAA/B,CAAX;;AAMA,oBAAI,KAAK,QAAL,KAAkB,GAAlB,IAAyB,SAAS,QAAT,GAAoB,MAApB,CAA2B,CAA3B,MAAkC,GAA3D,IACJ,KAAK,QAAL,CAAc,KAAd,CAAoB,CAAC,CAArB,MAA4B,GAA5B,IAAmC,SAAS,QAAT,GAAoB,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,MAAoC,KADvE,EAC8E;;AAE1E,2BAAO,IAAP,CAAY,cAAZ,EAA4B,QAA5B;AACH,iBAJD,MAIO;AACH,6BAAS,KAAK,MAAL,EAAa,QAAb,CAAT;AACH;;AAED,oBAAI,KAAK,QAAL,KAAkB,IAAlB,IAA0B,CAAC,OAA/B,EAAwC;AACpC,6BAAS,CAAC,GAAD,EAAM,MAAN,EAAc,GAAd,CAAT;AACH,iBAFD,MAEO;AACH,6BAAS,aAAa,MAAb,EAAqB,iBAArB,EAAwC,UAAxC,CAAT;AACH;;AAED;;AAEJ,iBAAK,OAAO,cAAZ;AACI,yBAAS,CAAC,mBAAmB,KAAK,MAAxB,EAAgC;AACtC,gCAAY,WAAW,IADe;AAEtC,6BAAS,IAF6B;AAGtC,+BAAW,IAH2B;AAItC,6CAAyB;AAJa,iBAAhC,CAAD,CAAT;;AAOA,uBAAO,IAAP,CAAY,GAAZ;AACA,qBAAK,IAAI,CAAJ,EAAO,MAAM,KAAK,WAAL,EAAkB,MAApC,EAA4C,IAAI,GAAhD,EAAqD,KAAK,CAA1D,EAA6D;AACzD,2BAAO,IAAP,CAAY,mBAAmB,KAAK,WAAL,EAAkB,CAAlB,CAAnB,EAAyC;AACjD,oCAAY,WAAW,UAD0B;AAEjD,iCAAS,IAFwC;AAGjD,mCAAW;AAHsC,qBAAzC,CAAZ;AAKA,wBAAI,IAAI,CAAJ,GAAQ,GAAZ,EAAiB;AACb,+BAAO,IAAP,CAAY,MAAM,KAAlB;AACH;AACJ;AACD,uBAAO,IAAP,CAAY,GAAZ;;AAEA,oBAAI,CAAC,SAAL,EAAgB;AACZ,6BAAS,CAAC,GAAD,EAAM,MAAN,EAAc,GAAd,CAAT;AACH,iBAFD,MAEO;AACH,6BAAS,aAAa,MAAb,EAAqB,WAAW,IAAhC,EAAsC,UAAtC,CAAT;AACH;AACD;;AAEJ,iBAAK,OAAO,aAAZ;AACI,sBAAM,KAAK,WAAL,EAAkB,MAAxB;AACA,0CAA0B,OAAO,uBAAP,KAAmC,SAAnC,IAAgD,OAAO,uBAAjF;;AAEA,yBAAS,KACL,KADK,EAEL,mBAAmB,KAAK,MAAxB,EAAgC;AAC5B,gCAAY,WAAW,GADK;AAE5B,6BAAS,IAFmB;AAG5B,+BAAW,KAHiB;AAI5B,6CAAyB,2BAA2B,CAAC,WAA5B,IAA2C,QAAQ;AAJhD,iBAAhC,CAFK,CAAT;;AAUA,oBAAI,CAAC,uBAAD,IAA4B,WAA5B,IAA2C,MAAM,CAArD,EAAwD;AACpD,2BAAO,IAAP,CAAY,GAAZ;AACA,yBAAK,IAAI,CAAT,EAAY,IAAI,GAAhB,EAAqB,KAAK,CAA1B,EAA6B;AACzB,+BAAO,IAAP,CAAY,mBAAmB,KAAK,WAAL,EAAkB,CAAlB,CAAnB,EAAyC;AACjD,wCAAY,WAAW,UAD0B;AAEjD,qCAAS,IAFwC;AAGjD,uCAAW;AAHsC,yBAAzC,CAAZ;AAKA,4BAAI,IAAI,CAAJ,GAAQ,GAAZ,EAAiB;AACb,mCAAO,IAAP,CAAY,MAAM,KAAlB;AACH;AACJ;AACD,2BAAO,IAAP,CAAY,GAAZ;AACH;;AAED,yBAAS,aAAa,MAAb,EAAqB,WAAW,GAAhC,EAAqC,UAArC,CAAT;AACA;;AAEJ,iBAAK,OAAO,gBAAZ;AACI,yBAAS,CAAC,mBAAmB,KAAK,MAAxB,EAAgC;AACtC,gCAAY,WAAW,IADe;AAEtC,6BAAS,IAF6B;AAGtC,+BAAW,SAH2B;AAItC,6CAAyB;AAJa,iBAAhC,CAAD,CAAT;;AAOA,oBAAI,KAAK,QAAT,EAAmB;AACf,2BAAO,IAAP,CAAY,GAAZ,EAAiB,mBAAmB,KAAK,QAAxB,EAAkC;AAC/C,oCAAY,WAAW,QADwB;AAE/C,iCAAS,IAFsC;AAG/C,mCAAW;AAHoC,qBAAlC,CAAjB,EAII,GAJJ;AAKH,iBAND,MAMO;AACH,wBAAI,KAAK,MAAL,CAAY,IAAZ,KAAqB,OAAO,OAA5B,IAAuC,OAAO,KAAK,MAAL,CAAY,KAAnB,KAA6B,QAAxE,EAAkF;AAC9E,mCAAW,aAAa,MAAb,EAAqB,QAArB,EAAX;;;;;;;AAOA,4BACQ,SAAS,OAAT,CAAiB,GAAjB,IAAwB,CAAxB,IACA,CAAC,SAAS,IAAT,CAAc,QAAd,CADD,IAEA,eAAe,SAAS,UAAT,CAAoB,SAAS,MAAT,GAAkB,CAAtC,CAAf,CAFA,IAGA,EAAE,SAAS,MAAT,IAAmB,CAAnB,IAAwB,SAAS,UAAT,CAAoB,CAApB,MAA2B,EAArD,C;AAJR,0BAKU;AACN,uCAAO,IAAP,CAAY,GAAZ;AACH;AACJ;AACD,2BAAO,IAAP,CAAY,GAAZ,EAAiB,mBAAmB,KAAK,QAAxB,CAAjB;AACH;;AAED,yBAAS,aAAa,MAAb,EAAqB,WAAW,MAAhC,EAAwC,UAAxC,CAAT;AACA;;AAEJ,iBAAK,OAAO,eAAZ;AACI,2BAAW,mBAAmB,KAAK,QAAxB,EAAkC;AACzC,gCAAY,WAAW,KADkB;AAEzC,6BAAS,IAFgC;AAGzC,+BAAW;AAH8B,iBAAlC,CAAX;;AAMA,oBAAI,UAAU,EAAd,EAAkB;AACd,6BAAS,KAAK,KAAK,QAAV,EAAoB,QAApB,CAAT;AACH,iBAFD,MAEO;AACH,6BAAS,CAAC,KAAK,QAAN,CAAT;AACA,wBAAI,KAAK,QAAL,CAAc,MAAd,GAAuB,CAA3B,EAA8B;;;AAG1B,iCAAS,KAAK,MAAL,EAAa,QAAb,CAAT;AACH,qBAJD,MAIO;;;AAGH,qCAAa,aAAa,MAAb,EAAqB,QAArB,EAAb;AACA,mCAAW,WAAW,MAAX,CAAkB,WAAW,MAAX,GAAoB,CAAtC,CAAX;AACA,oCAAY,SAAS,QAAT,GAAoB,MAApB,CAA2B,CAA3B,CAAZ;;AAEA,4BAAK,CAAC,aAAa,GAAb,IAAoB,aAAa,GAAlC,KAA0C,aAAa,SAAxD,IAAuE,iBAAiB,QAAjB,KAA8B,iBAAiB,SAAjB,CAAzG,EAAuI;AACnI,mCAAO,IAAP,CAAY,cAAZ,EAA4B,QAA5B;AACH,yBAFD,MAEO;AACH,mCAAO,IAAP,CAAY,QAAZ;AACH;AACJ;AACJ;AACD,yBAAS,aAAa,MAAb,EAAqB,WAAW,KAAhC,EAAuC,UAAvC,CAAT;AACA;;AAEJ,iBAAK,OAAO,eAAZ;AACI,oBAAI,KAAK,QAAT,EAAmB;AACf,6BAAS,QAAT;AACH,iBAFD,MAEO;AACH,6BAAS,OAAT;AACH;AACD,oBAAI,KAAK,QAAT,EAAmB;AACf,6BAAS,KACL,MADK,EAEL,mBAAmB,KAAK,QAAxB,EAAkC;AAC9B,oCAAY,WAAW,UADO;AAE9B,iCAAS,IAFqB;AAG9B,mCAAW;AAHmB,qBAAlC,CAFK,CAAT;AAQH;AACD;;AAEJ,iBAAK,OAAO,gBAAZ;AACI,oBAAI,KAAK,MAAT,EAAiB;AACb,6BAAS,aACL,CACI,KAAK,QADT,EAEI,mBAAmB,KAAK,QAAxB,EAAkC;AAC9B,oCAAY,WAAW,KADO;AAE9B,iCAAS,IAFqB;AAG9B,mCAAW;AAHmB,qBAAlC,CAFJ,CADK,EASL,WAAW,KATN,EAUL,UAVK,CAAT;AAYH,iBAbD,MAaO;AACH,6BAAS,aACL,CACI,mBAAmB,KAAK,QAAxB,EAAkC;AAC9B,oCAAY,WAAW,OADO;AAE9B,iCAAS,IAFqB;AAG9B,mCAAW;AAHmB,qBAAlC,CADJ,EAMI,KAAK,QANT,CADK,EASL,WAAW,OATN,EAUL,UAVK,CAAT;AAYH;AACD;;AAEJ,iBAAK,OAAO,kBAAZ;AACI,yBAAS,UAAT;;AAEA,oBAAI,KAAK,EAAT,EAAa;AACT,6BAAS,CAAC,MAAD,EAAS,cAAT,EACC,mBAAmB,KAAK,EAAxB,CADD,EAEC,qBAAqB,IAArB,CAFD,CAAT;AAGH,iBAJD,MAIO;AACH,6BAAS,CAAC,SAAS,KAAV,EAAiB,qBAAqB,IAArB,CAAjB,CAAT;AACH;;AAED;;AAEJ,iBAAK,OAAO,YAAZ;AACA,iBAAK,OAAO,eAAZ;AACI,oBAAI,CAAC,KAAK,QAAL,CAAc,MAAnB,EAA2B;AACvB,6BAAS,IAAT;AACA;AACH;AACD,4BAAY,KAAK,QAAL,CAAc,MAAd,GAAuB,CAAnC;AACA,yBAAS,CAAC,GAAD,EAAM,YAAY,OAAZ,GAAsB,EAA5B,CAAT;AACA,2BAAW,UAAU,MAAV,EAAkB;AACzB,yBAAK,IAAI,CAAJ,EAAO,MAAM,KAAK,QAAL,CAAc,MAAhC,EAAwC,IAAI,GAA5C,EAAiD,KAAK,CAAtD,EAAyD;AACrD,4BAAI,CAAC,KAAK,QAAL,CAAc,CAAd,CAAL,EAAuB;AACnB,gCAAI,SAAJ,EAAe;AACX,uCAAO,IAAP,CAAY,MAAZ;AACH;AACD,gCAAI,IAAI,CAAJ,KAAU,GAAd,EAAmB;AACf,uCAAO,IAAP,CAAY,GAAZ;AACH;AACJ,yBAPD,MAOO;AACH,mCAAO,IAAP,CAAY,YAAY,MAAZ,GAAqB,EAAjC,EAAqC,mBAAmB,KAAK,QAAL,CAAc,CAAd,CAAnB,EAAqC;AACtE,4CAAY,WAAW,UAD+C;AAEtE,yCAAS,IAF6D;AAGtE,2CAAW;AAH2D,6BAArC,CAArC;AAKH;AACD,4BAAI,IAAI,CAAJ,GAAQ,GAAZ,EAAiB;AACb,mCAAO,IAAP,CAAY,OAAO,YAAY,OAAZ,GAAsB,KAA7B,CAAZ;AACH;AACJ;AACJ,iBApBD;AAqBA,oBAAI,aAAa,CAAC,uBAAuB,aAAa,MAAb,EAAqB,QAArB,EAAvB,CAAlB,EAA2E;AACvE,2BAAO,IAAP,CAAY,OAAZ;AACH;AACD,uBAAO,IAAP,CAAY,YAAY,IAAZ,GAAmB,EAA/B,EAAmC,GAAnC;AACA;;AAEJ,iBAAK,OAAO,QAAZ;AACI,oBAAI,KAAK,IAAL,KAAc,KAAd,IAAuB,KAAK,IAAL,KAAc,KAAzC,EAAgD;AAC5C,6BAAS,CACL,KAAK,IADA,EACM,cADN,EAEL,mBAAmB,KAAK,GAAxB,EAA6B;AACzB,oCAAY,WAAW,QADE;AAEzB,iCAAS,IAFgB;AAGzB,mCAAW;AAHc,qBAA7B,CAFK,EAOL,qBAAqB,KAAK,KAA1B,CAPK,CAAT;AASH,iBAVD,MAUO;AACH,wBAAI,KAAK,SAAT,EAAoB;AAChB,iCAAS,mBAAmB,KAAK,GAAxB,EAA6B;AAClC,wCAAY,WAAW,QADW;AAElC,qCAAS,IAFyB;AAGlC,uCAAW;AAHuB,yBAA7B,CAAT;AAKH,qBAND,MAMO,IAAI,KAAK,MAAT,EAAiB;AACpB,iCAAS,EAAT;AACA,4BAAI,KAAK,KAAL,CAAW,SAAf,EAA0B;AACtB,mCAAO,IAAP,CAAY,GAAZ;AACH;AACD,+BAAO,IAAP,CAAY,mBAAmB,KAAK,GAAxB,EAA6B;AACrC,wCAAY,WAAW,QADc;AAErC,qCAAS,IAF4B;AAGrC,uCAAW;AAH0B,yBAA7B,CAAZ,EAII,qBAAqB,KAAK,KAA1B,CAJJ;AAKH,qBAVM,MAUA;AACH,iCAAS,CACL,mBAAmB,KAAK,GAAxB,EAA6B;AACzB,wCAAY,WAAW,QADE;AAEzB,qCAAS,IAFgB;AAGzB,uCAAW;AAHc,yBAA7B,CADK,EAML,MAAM,KAND,EAOL,mBAAmB,KAAK,KAAxB,EAA+B;AAC3B,wCAAY,WAAW,UADI;AAE3B,qCAAS,IAFkB;AAG3B,uCAAW;AAHgB,yBAA/B,CAPK,CAAT;AAaH;AACJ;AACD;;AAEJ,iBAAK,OAAO,gBAAZ;AACI,oBAAI,CAAC,KAAK,UAAL,CAAgB,MAArB,EAA6B;AACzB,6BAAS,IAAT;AACA;AACH;AACD,4BAAY,KAAK,UAAL,CAAgB,MAAhB,GAAyB,CAArC;;AAEA,2BAAW,YAAY;AACnB,+BAAW,mBAAmB,KAAK,UAAL,CAAgB,CAAhB,CAAnB,EAAuC;AAC9C,oCAAY,WAAW,QADuB;AAE9C,iCAAS,IAFqC;AAG9C,mCAAW,IAHmC;AAI9C,8BAAM,OAAO;AAJiC,qBAAvC,CAAX;AAMH,iBAPD;;AASA,oBAAI,CAAC,SAAL,EAAgB;;;;;;;;;AASZ,wBAAI,CAAC,kBAAkB,aAAa,QAAb,EAAuB,QAAvB,EAAlB,CAAL,EAA2D;AACvD,iCAAS,CAAE,GAAF,EAAO,KAAP,EAAc,QAAd,EAAwB,KAAxB,EAA+B,GAA/B,CAAT;AACA;AACH;AACJ;;AAED,2BAAW,UAAU,MAAV,EAAkB;AACzB,6BAAS,CAAE,GAAF,EAAO,OAAP,EAAgB,MAAhB,EAAwB,QAAxB,CAAT;;AAEA,wBAAI,SAAJ,EAAe;AACX,+BAAO,IAAP,CAAY,MAAM,OAAlB;AACA,6BAAK,IAAI,CAAJ,EAAO,MAAM,KAAK,UAAL,CAAgB,MAAlC,EAA0C,IAAI,GAA9C,EAAmD,KAAK,CAAxD,EAA2D;AACvD,mCAAO,IAAP,CAAY,MAAZ,EAAoB,mBAAmB,KAAK,UAAL,CAAgB,CAAhB,CAAnB,EAAuC;AACvD,4CAAY,WAAW,QADgC;AAEvD,yCAAS,IAF8C;AAGvD,2CAAW,IAH4C;AAIvD,sCAAM,OAAO;AAJ0C,6BAAvC,CAApB;AAMA,gCAAI,IAAI,CAAJ,GAAQ,GAAZ,EAAiB;AACb,uCAAO,IAAP,CAAY,MAAM,OAAlB;AACH;AACJ;AACJ;AACJ,iBAjBD;;AAmBA,oBAAI,CAAC,uBAAuB,aAAa,MAAb,EAAqB,QAArB,EAAvB,CAAL,EAA8D;AAC1D,2BAAO,IAAP,CAAY,OAAZ;AACH;AACD,uBAAO,IAAP,CAAY,IAAZ,EAAkB,GAAlB;AACA;;AAEJ,iBAAK,OAAO,aAAZ;AACI,oBAAI,CAAC,KAAK,UAAL,CAAgB,MAArB,EAA6B;AACzB,6BAAS,IAAT;AACA;AACH;;AAED,4BAAY,KAAZ;AACA,oBAAI,KAAK,UAAL,CAAgB,MAAhB,KAA2B,CAA/B,EAAkC;AAC9B,+BAAW,KAAK,UAAL,CAAgB,CAAhB,CAAX;AACA,wBAAI,SAAS,KAAT,CAAe,IAAf,KAAwB,OAAO,UAAnC,EAA+C;AAC3C,oCAAY,IAAZ;AACH;AACJ,iBALD,MAKO;AACH,yBAAK,IAAI,CAAJ,EAAO,MAAM,KAAK,UAAL,CAAgB,MAAlC,EAA0C,IAAI,GAA9C,EAAmD,KAAK,CAAxD,EAA2D;AACvD,mCAAW,KAAK,UAAL,CAAgB,CAAhB,CAAX;AACA,4BAAI,CAAC,SAAS,SAAd,EAAyB;AACrB,wCAAY,IAAZ;AACA;AACH;AACJ;AACJ;AACD,yBAAS,CAAC,GAAD,EAAM,YAAY,OAAZ,GAAsB,EAA5B,CAAT;;AAEA,2BAAW,UAAU,MAAV,EAAkB;AACzB,yBAAK,IAAI,CAAJ,EAAO,MAAM,KAAK,UAAL,CAAgB,MAAlC,EAA0C,IAAI,GAA9C,EAAmD,KAAK,CAAxD,EAA2D;AACvD,+BAAO,IAAP,CAAY,YAAY,MAAZ,GAAqB,EAAjC,EAAqC,mBAAmB,KAAK,UAAL,CAAgB,CAAhB,CAAnB,EAAuC;AACxE,wCAAY,WAAW,QADiD;AAExE,qCAAS,IAF+D;AAGxE,uCAAW;AAH6D,yBAAvC,CAArC;AAKA,4BAAI,IAAI,CAAJ,GAAQ,GAAZ,EAAiB;AACb,mCAAO,IAAP,CAAY,OAAO,YAAY,OAAZ,GAAsB,KAA7B,CAAZ;AACH;AACJ;AACJ,iBAXD;;AAaA,oBAAI,aAAa,CAAC,uBAAuB,aAAa,MAAb,EAAqB,QAArB,EAAvB,CAAlB,EAA2E;AACvE,2BAAO,IAAP,CAAY,OAAZ;AACH;AACD,uBAAO,IAAP,CAAY,YAAY,IAAZ,GAAmB,EAA/B,EAAmC,GAAnC;AACA;;AAEJ,iBAAK,OAAO,cAAZ;AACI,yBAAS,MAAT;AACA;;AAEJ,iBAAK,OAAO,UAAZ;AACI,yBAAS,mBAAmB,IAAnB,CAAT;AACA;;AAEJ,iBAAK,OAAO,OAAZ;AACI,oBAAI,KAAK,cAAL,CAAoB,KAApB,KAA8B,KAAlC,EAAyC;AACrC,wBAAI;AACA,8BAAM,MAAM,KAAK,GAAX,EAAgB,IAAhB,CAAqB,CAArB,EAAwB,UAA9B;AACA,4BAAI,IAAI,IAAJ,KAAa,OAAO,OAAxB,EAAiC;AAC7B,gCAAI,IAAI,KAAJ,KAAc,KAAK,KAAvB,EAA8B;AAC1B,yCAAS,KAAK,GAAd;AACA;AACH;AACJ;AACJ,qBARD,CAQE,OAAO,CAAP,EAAU;;AAEX;AACJ;;AAED,oBAAI,KAAK,KAAL,KAAe,IAAnB,EAAyB;AACrB,6BAAS,MAAT;AACA;AACH;;AAED,oBAAI,OAAO,KAAK,KAAZ,KAAsB,QAA1B,EAAoC;AAChC,6BAAS,aAAa,KAAK,KAAlB,CAAT;AACA;AACH;;AAED,oBAAI,OAAO,KAAK,KAAZ,KAAsB,QAA1B,EAAoC;AAChC,6BAAS,eAAe,KAAK,KAApB,CAAT;AACA;AACH;;AAED,oBAAI,OAAO,KAAK,KAAZ,KAAsB,SAA1B,EAAqC;AACjC,6BAAS,KAAK,KAAL,GAAa,MAAb,GAAsB,OAA/B;AACA;AACH;;AAED,yBAAS,eAAe,KAAK,KAApB,CAAT;AACA;;AAEJ,iBAAK,OAAO,uBAAZ;AACI,yBAAS,CACL,GADK,EAEL,mBAAmB,KAAK,IAAxB,EAA8B;AAC1B,gCAAY,WAAW,UADG;AAE1B,6BAAS,IAFiB;AAG1B,+BAAW;AAHe,iBAA9B,CAFK,CAAT;;AASA,oBAAI,KAAK,MAAT,EAAiB;AACb,yBAAK,IAAI,CAAJ,EAAO,MAAM,KAAK,MAAL,CAAY,MAA9B,EAAsC,IAAI,GAA1C,EAA+C,KAAK,CAApD,EAAuD;AACnD,mCAAW,mBAAmB,KAAK,MAAL,CAAY,CAAZ,CAAnB,EAAmC;AAC1C,wCAAY,WAAW,QADmB;AAE1C,qCAAS,IAFiC;AAG1C,uCAAW;AAH+B,yBAAnC,CAAX;AAKA,iCAAS,KAAK,MAAL,EAAa,QAAb,CAAT;AACH;AACJ;;AAED,oBAAI,KAAK,MAAT,EAAiB;AACb,6BAAS,KAAK,MAAL,EAAa,OAAO,KAApB,CAAT;AACA,+BAAW,mBAAmB,KAAK,MAAxB,EAAgC;AACvC,oCAAY,WAAW,QADgB;AAEvC,iCAAS,IAF8B;AAGvC,mCAAW;AAH4B,qBAAhC,CAAX;AAKA,wBAAI,MAAM,GAAN,CAAU,+BAAd,EAA+C;AAC3C,iCAAS,KAAK,MAAL,EAAa,CAAE,GAAF,EAAO,QAAP,EAAiB,GAAjB,CAAb,CAAT;AACH,qBAFD,MAEO;AACH,iCAAS,KAAK,MAAL,EAAa,QAAb,CAAT;AACH;AACJ;AACD,uBAAO,IAAP,CAAY,GAAZ;AACA;;AAEJ,iBAAK,OAAO,kBAAZ;AACI,oBAAI,KAAK,IAAL,CAAU,IAAV,KAAmB,OAAO,mBAA9B,EAAmD;AAC/C,+BAAW,CACP,KAAK,IAAL,CAAU,IADH,EACS,cADT,EAEP,kBAAkB,KAAK,IAAL,CAAU,YAAV,CAAuB,CAAvB,CAAlB,EAA6C;AACzC,iCAAS;AADgC,qBAA7C,CAFO,CAAX;AAMH,iBAPD,MAOO;AACH,+BAAW,mBAAmB,KAAK,IAAxB,EAA8B;AACrC,oCAAY,WAAW,IADc;AAErC,iCAAS,IAF4B;AAGrC,mCAAW;AAH0B,qBAA9B,CAAX;AAKH;;AAED,2BAAW,KAAK,QAAL,EAAe,KAAK,EAAL,GAAU,IAAV,GAAiB,IAAhC,CAAX;AACA,2BAAW,KAAK,QAAL,EAAe,mBAAmB,KAAK,KAAxB,EAA+B;AACrD,gCAAY,WAAW,QAD8B;AAErD,6BAAS,IAF4C;AAGrD,+BAAW;AAH0C,iBAA/B,CAAf,CAAX;;AAMA,oBAAI,MAAM,GAAN,CAAU,+BAAd,EAA+C;AAC3C,6BAAS,CAAE,QAAQ,KAAR,GAAgB,GAAlB,EAAuB,QAAvB,EAAiC,GAAjC,CAAT;AACH,iBAFD,MAEO;AACH,6BAAS,KAAK,QAAQ,KAAb,EAAoB,QAApB,CAAT;AACH;AACD;;AAEJ;AACI,sBAAM,IAAI,KAAJ,CAAU,8BAA8B,KAAK,IAA7C,CAAN;AAplBJ;;AAulBA,eAAO,aAAa,MAAb,EAAqB,IAArB,CAAP;AACH;;AAED,aAAS,iBAAT,CAA2B,IAA3B,EAAiC,MAAjC,EAAyC;AACrC,YAAI,CAAJ,EAAO,GAAP,EAAY,MAAZ,EAAoB,IAApB,EAA0B,OAA1B,EAAmC,YAAnC,EAAiD,gBAAjD,EAAmE,QAAnE,EAA6E,SAA7E;;AAEA,kBAAU,IAAV;AACA,oBAAY,GAAZ;AACA,uBAAe,KAAf;AACA,2BAAmB,KAAnB;AACA,YAAI,MAAJ,EAAY;AACR,sBAAU,OAAO,OAAP,KAAmB,SAAnB,IAAgC,OAAO,OAAjD;AACA,gBAAI,CAAC,UAAD,IAAe,OAAO,iBAAP,KAA6B,IAAhD,EAAsD;AAClD,4BAAY,EAAZ;AACH;AACD,2BAAe,OAAO,YAAtB;AACA,+BAAmB,OAAO,gBAA1B;AACH;;AAED,gBAAQ,KAAK,IAAb;AACA,iBAAK,OAAO,cAAZ;AACI,yBAAS,CAAC,GAAD,EAAM,OAAN,CAAT;;AAEA,2BAAW,YAAY;AACnB,yBAAK,IAAI,CAAJ,EAAO,MAAM,KAAK,IAAL,CAAU,MAA5B,EAAoC,IAAI,GAAxC,EAA6C,KAAK,CAAlD,EAAqD;AACjD,mCAAW,UAAU,kBAAkB,KAAK,IAAL,CAAU,CAAV,CAAlB,EAAgC;AACjD,+CAAmB,MAAM,MAAM,CADkB;AAEjD,8CAAkB;AAF+B,yBAAhC,CAAV,CAAX;AAIA,+BAAO,IAAP,CAAY,QAAZ;AACA,4BAAI,CAAC,uBAAuB,aAAa,QAAb,EAAuB,QAAvB,EAAvB,CAAL,EAAgE;AAC5D,mCAAO,IAAP,CAAY,OAAZ;AACH;AACJ;AACJ,iBAXD;;AAaA,uBAAO,IAAP,CAAY,UAAU,GAAV,CAAZ;AACA;;AAEJ,iBAAK,OAAO,cAAZ;AACI,oBAAI,KAAK,KAAT,EAAgB;AACZ,6BAAS,WAAW,KAAK,KAAL,CAAW,IAAtB,GAA6B,SAAtC;AACH,iBAFD,MAEO;AACH,6BAAS,UAAU,SAAnB;AACH;AACD;;AAEJ,iBAAK,OAAO,iBAAZ;AACI,oBAAI,KAAK,KAAT,EAAgB;AACZ,6BAAS,cAAc,KAAK,KAAL,CAAW,IAAzB,GAAgC,SAAzC;AACH,iBAFD,MAEO;AACH,6BAAS,aAAa,SAAtB;AACH;AACD;;AAEJ,iBAAK,OAAO,kBAAZ;AACI,oBAAI,KAAK,GAAT,EAAc;AACV,6BAAS,KAAK,GAAL,GAAW,SAApB;AACH,iBAFD,MAEO;AACH,6BAAS,gBAAgB,KAAK,SAArB,IAAkC,SAA3C;AACH;AACD;;AAEJ,iBAAK,OAAO,gBAAZ;;AAEI,yBAAS,KAAK,IAAL,EAAW,WAAW,KAAK,IAAhB,CAAX,CAAT;AACA,yBAAS,iBAAiB,KAAK,IAAtB,EAA4B,MAA5B,CAAT;AACA,yBAAS,KAAK,MAAL,EAAa,CAClB,UAAU,KAAV,GAAkB,GADA,EAElB,mBAAmB,KAAK,IAAxB,EAA8B;AAC1B,gCAAY,WAAW,QADG;AAE1B,6BAAS,IAFiB;AAG1B,+BAAW;AAHe,iBAA9B,CAFkB,EAOlB,MAAM,SAPY,CAAb,CAAT;AASA;;AAEJ,iBAAK,OAAO,WAAZ;AACI,2BAAW,YAAY;AACnB,6BAAS,CACL,UAAU,KAAV,GAAkB,GADb,EAEL,mBAAmB,KAAK,KAAxB,EAA+B;AAC3B,oCAAY,WAAW,QADI;AAE3B,iCAAS,IAFkB;AAG3B,mCAAW;AAHgB,qBAA/B,CAFK,EAOL,GAPK,CAAT;AASH,iBAVD;AAWA,uBAAO,IAAP,CAAY,WAAW,KAAK,IAAhB,CAAZ;AACA;;AAEJ,iBAAK,OAAO,iBAAZ;AACI,yBAAS,aAAa,SAAtB;AACA;;AAEJ,iBAAK,OAAO,cAAZ;AACI,yBAAS,GAAT;AACA;;AAEJ,iBAAK,OAAO,mBAAZ;AACI,yBAAS,CAAC,mBAAmB,KAAK,UAAxB,EAAoC;AAC1C,gCAAY,WAAW,QADmB;AAE1C,6BAAS,IAFiC;AAG1C,+BAAW;AAH+B,iBAApC,CAAD,CAAT;;;AAOA,2BAAW,aAAa,MAAb,EAAqB,QAArB,EAAX;AACA,oBAAI,SAAS,MAAT,CAAgB,CAAhB,MAAuB,GAAvB,IAA+B,SAAS,KAAT,CAAe,CAAf,EAAkB,CAAlB,MAAyB,UAAzB,IAAuC,KAAK,OAAL,CAAa,SAAS,MAAT,CAAgB,CAAhB,CAAb,KAAoC,CAA1G,IAAiH,aAAa,gBAAb,IAAiC,KAAK,UAAL,CAAgB,IAAhB,KAAyB,OAAO,OAAjE,IAA4E,OAAO,KAAK,UAAL,CAAgB,KAAvB,KAAiC,QAAlO,EAA6O;AACzO,6BAAS,CAAC,GAAD,EAAM,MAAN,EAAc,MAAM,SAApB,CAAT;AACH,iBAFD,MAEO;AACH,2BAAO,IAAP,CAAY,SAAZ;AACH;AACD;;AAEJ,iBAAK,OAAO,kBAAZ;AACI,oBAAI,KAAK,IAAT,EAAe;AACX,6BAAS,CACL,mBAAmB,KAAK,EAAxB,EAA4B;AACxB,oCAAY,WAAW,UADC;AAExB,iCAAS,OAFe;AAGxB,mCAAW;AAHa,qBAA5B,CADK,EAML,KANK,EAOL,GAPK,EAQL,KARK,EASL,mBAAmB,KAAK,IAAxB,EAA8B;AAC1B,oCAAY,WAAW,UADG;AAE1B,iCAAS,OAFiB;AAG1B,mCAAW;AAHe,qBAA9B,CATK,CAAT;AAeH,iBAhBD,MAgBO;AACH,6BAAS,mBAAmB,KAAK,EAAxB,CAAT;AACH;AACD;;AAEJ,iBAAK,OAAO,mBAAZ;AACI,yBAAS,CAAC,KAAK,IAAN,CAAT;;;;AAIA,oBAAI,KAAK,YAAL,CAAkB,MAAlB,KAA6B,CAA7B,IAAkC,KAAK,YAAL,CAAkB,CAAlB,EAAqB,IAAvD,IACI,KAAK,YAAL,CAAkB,CAAlB,EAAqB,IAArB,CAA0B,IAA1B,KAAmC,OAAO,kBADlD,EACsE;AAClE,2BAAO,IAAP,CAAY,cAAZ,EAA4B,kBAAkB,KAAK,YAAL,CAAkB,CAAlB,CAAlB,EAAwC;AAChE,iCAAS;AADuD,qBAAxC,CAA5B;AAGH,iBALD,MAKO;;;;AAIH,+BAAW,YAAY;AACnB,+BAAO,KAAK,YAAL,CAAkB,CAAlB,CAAP;AACA,4BAAI,MAAM,OAAN,IAAiB,KAAK,eAA1B,EAA2C;AACvC,mCAAO,IAAP,CAAY,IAAZ,EAAkB,UAAU,kBAAkB,IAAlB,EAAwB;AAChD,yCAAS;AADuC,6BAAxB,CAAV,CAAlB;AAGH,yBAJD,MAIO;AACH,mCAAO,IAAP,CAAY,cAAZ,EAA4B,kBAAkB,IAAlB,EAAwB;AAChD,yCAAS;AADuC,6BAAxB,CAA5B;AAGH;;AAED,6BAAK,IAAI,CAAJ,EAAO,MAAM,KAAK,YAAL,CAAkB,MAApC,EAA4C,IAAI,GAAhD,EAAqD,KAAK,CAA1D,EAA6D;AACzD,mCAAO,KAAK,YAAL,CAAkB,CAAlB,CAAP;AACA,gCAAI,MAAM,OAAN,IAAiB,KAAK,eAA1B,EAA2C;AACvC,uCAAO,IAAP,CAAY,MAAM,OAAlB,EAA2B,UAAU,kBAAkB,IAAlB,EAAwB;AACzD,6CAAS;AADgD,iCAAxB,CAAV,CAA3B;AAGH,6BAJD,MAIO;AACH,uCAAO,IAAP,CAAY,MAAM,KAAlB,EAAyB,kBAAkB,IAAlB,EAAwB;AAC7C,6CAAS;AADoC,iCAAxB,CAAzB;AAGH;AACJ;AACJ,qBAxBD;AAyBH;AACD,uBAAO,IAAP,CAAY,SAAZ;AACA;;AAEJ,iBAAK,OAAO,cAAZ;AACI,yBAAS,CAAC,KACN,OADM,EAEN,mBAAmB,KAAK,QAAxB,EAAkC;AAC9B,gCAAY,WAAW,QADO;AAE9B,6BAAS,IAFqB;AAG9B,+BAAW;AAHmB,iBAAlC,CAFM,CAAD,EAON,SAPM,CAAT;AAQA;;AAEJ,iBAAK,OAAO,YAAZ;AACI,yBAAS,CAAC,KAAD,EAAQ,WAAW,KAAK,KAAhB,CAAR,CAAT;AACA,yBAAS,iBAAiB,KAAK,KAAtB,EAA6B,MAA7B,CAAT;AACA,oBAAI,KAAK,QAAT,EAAmB;;AAEf,yBAAK,IAAI,CAAJ,EAAO,MAAM,KAAK,QAAL,CAAc,MAAhC,EAAwC,IAAI,GAA5C,EAAiD,KAAK,CAAtD,EAAyD;AACrD,iCAAS,KAAK,MAAL,EAAa,kBAAkB,KAAK,QAAL,CAAc,CAAd,CAAlB,CAAb,CAAT;AACA,4BAAI,KAAK,SAAL,IAAkB,IAAI,CAAJ,KAAU,GAAhC,EAAqC;AACjC,qCAAS,iBAAiB,KAAK,QAAL,CAAc,CAAd,EAAiB,IAAlC,EAAwC,MAAxC,CAAT;AACH;AACJ;AACJ,iBARD,MAQO;;AAEH,wBAAI,KAAK,OAAT,EAAkB;AACd,iCAAS,KAAK,MAAL,EAAa,kBAAkB,KAAK,OAAvB,CAAb,CAAT;AACA,4BAAI,KAAK,SAAL,IAAkB,KAAK,eAAL,CAAqB,MAArB,GAA8B,CAApD,EAAuD;AACnD,qCAAS,iBAAiB,KAAK,OAAL,CAAa,IAA9B,EAAoC,MAApC,CAAT;AACH;AACJ;;AAED,yBAAK,IAAI,CAAJ,EAAO,MAAM,KAAK,eAAL,CAAqB,MAAvC,EAA+C,IAAI,GAAnD,EAAwD,KAAK,CAA7D,EAAgE;AAC5D,iCAAS,KAAK,MAAL,EAAa,kBAAkB,KAAK,eAAL,CAAqB,CAArB,CAAlB,CAAb,CAAT;AACA,4BAAI,KAAK,SAAL,IAAkB,IAAI,CAAJ,KAAU,GAAhC,EAAqC;AACjC,qCAAS,iBAAiB,KAAK,eAAL,CAAqB,CAArB,EAAwB,IAAzC,EAA+C,MAA/C,CAAT;AACH;AACJ;AACJ;AACD,oBAAI,KAAK,SAAT,EAAoB;AAChB,6BAAS,KAAK,MAAL,EAAa,CAAC,SAAD,EAAY,WAAW,KAAK,SAAhB,CAAZ,CAAb,CAAT;AACH;AACD;;AAEJ,iBAAK,OAAO,eAAZ;AACI,2BAAW,YAAY;AACnB,6BAAS,CACL,WAAW,KAAX,GAAmB,GADd,EAEL,mBAAmB,KAAK,YAAxB,EAAsC;AAClC,oCAAY,WAAW,QADW;AAElC,iCAAS,IAFyB;AAGlC,mCAAW;AAHuB,qBAAtC,CAFK,EAOL,MAAM,KAAN,GAAc,GAAd,GAAoB,OAPf,CAAT;AASH,iBAVD;AAWA,oBAAI,KAAK,KAAT,EAAgB;AACZ,yBAAK,IAAI,CAAJ,EAAO,MAAM,KAAK,KAAL,CAAW,MAA7B,EAAqC,IAAI,GAAzC,EAA8C,KAAK,CAAnD,EAAsD;AAClD,mCAAW,UAAU,kBAAkB,KAAK,KAAL,CAAW,CAAX,CAAlB,EAAiC,EAAC,mBAAmB,MAAM,MAAM,CAAhC,EAAjC,CAAV,CAAX;AACA,+BAAO,IAAP,CAAY,QAAZ;AACA,4BAAI,CAAC,uBAAuB,aAAa,QAAb,EAAuB,QAAvB,EAAvB,CAAL,EAAgE;AAC5D,mCAAO,IAAP,CAAY,OAAZ;AACH;AACJ;AACJ;AACD,uBAAO,IAAP,CAAY,UAAU,GAAV,CAAZ;AACA;;AAEJ,iBAAK,OAAO,UAAZ;AACI,2BAAW,YAAY;AACnB,wBAAI,KAAK,IAAT,EAAe;AACX,iCAAS,CACL,KAAK,MAAL,EAAa,mBAAmB,KAAK,IAAxB,EAA8B;AACvC,wCAAY,WAAW,QADgB;AAEvC,qCAAS,IAF8B;AAGvC,uCAAW;AAH4B,yBAA9B,CAAb,CADK,EAML,GANK,CAAT;AAQH,qBATD,MASO;AACH,iCAAS,CAAC,UAAD,CAAT;AACH;;AAED,wBAAI,CAAJ;AACA,0BAAM,KAAK,UAAL,CAAgB,MAAtB;AACA,wBAAI,OAAO,KAAK,UAAL,CAAgB,CAAhB,EAAmB,IAAnB,KAA4B,OAAO,cAA9C,EAA8D;AAC1D,mCAAW,WAAW,KAAK,UAAL,CAAgB,CAAhB,CAAX,CAAX;AACA,+BAAO,IAAP,CAAY,QAAZ;AACA,4BAAI,CAAJ;AACH;;AAED,wBAAI,MAAM,GAAN,IAAa,CAAC,uBAAuB,aAAa,MAAb,EAAqB,QAArB,EAAvB,CAAlB,EAA2E;AACvE,+BAAO,IAAP,CAAY,OAAZ;AACH;;AAED,2BAAO,IAAI,GAAX,EAAgB,KAAK,CAArB,EAAwB;AACpB,mCAAW,UAAU,kBAAkB,KAAK,UAAL,CAAgB,CAAhB,CAAlB,EAAsC,EAAC,mBAAmB,MAAM,MAAM,CAAZ,IAAiB,cAAc,EAAnD,EAAtC,CAAV,CAAX;AACA,+BAAO,IAAP,CAAY,QAAZ;AACA,4BAAI,IAAI,CAAJ,KAAU,GAAV,IAAiB,CAAC,uBAAuB,aAAa,QAAb,EAAuB,QAAvB,EAAvB,CAAtB,EAAiF;AAC7E,mCAAO,IAAP,CAAY,OAAZ;AACH;AACJ;AACJ,iBAjCD;AAkCA;;AAEJ,iBAAK,OAAO,WAAZ;AACI,2BAAW,YAAY;AACnB,6BAAS,CACL,OAAO,KAAP,GAAe,GADV,EAEL,mBAAmB,KAAK,IAAxB,EAA8B;AAC1B,oCAAY,WAAW,QADG;AAE1B,iCAAS,IAFiB;AAG1B,mCAAW;AAHe,qBAA9B,CAFK,EAOL,GAPK,CAAT;AASH,iBAVD;AAWA,oBAAI,KAAK,SAAT,EAAoB;AAChB,2BAAO,IAAP,CAAY,WAAW,KAAK,UAAhB,CAAZ;AACA,6BAAS,iBAAiB,KAAK,UAAtB,EAAkC,MAAlC,CAAT;AACA,wBAAI,KAAK,SAAL,CAAe,IAAf,KAAwB,OAAO,WAAnC,EAAgD;AAC5C,iCAAS,KAAK,MAAL,EAAa,CAAC,OAAD,EAAU,kBAAkB,KAAK,SAAvB,EAAkC,EAAC,mBAAmB,cAAc,EAAlC,EAAlC,CAAV,CAAb,CAAT;AACH,qBAFD,MAEO;AACH,iCAAS,KAAK,MAAL,EAAa,KAAK,MAAL,EAAa,WAAW,KAAK,SAAhB,EAA2B,cAAc,EAAzC,CAAb,CAAb,CAAT;AACH;AACJ,iBARD,MAQO;AACH,2BAAO,IAAP,CAAY,WAAW,KAAK,UAAhB,EAA4B,cAAc,EAA1C,CAAZ;AACH;AACD;;AAEJ,iBAAK,OAAO,YAAZ;AACI,2BAAW,YAAY;AACnB,6BAAS,CAAC,QAAQ,KAAR,GAAgB,GAAjB,CAAT;AACA,wBAAI,KAAK,IAAT,EAAe;AACX,4BAAI,KAAK,IAAL,CAAU,IAAV,KAAmB,OAAO,mBAA9B,EAAmD;AAC/C,mCAAO,IAAP,CAAY,kBAAkB,KAAK,IAAvB,EAA6B,EAAC,SAAS,KAAV,EAA7B,CAAZ;AACH,yBAFD,MAEO;AACH,mCAAO,IAAP,CAAY,mBAAmB,KAAK,IAAxB,EAA8B;AACtC,4CAAY,WAAW,QADe;AAEtC,yCAAS,KAF6B;AAGtC,2CAAW;AAH2B,6BAA9B,CAAZ,EAII,GAJJ;AAKH;AACJ,qBAVD,MAUO;AACH,+BAAO,IAAP,CAAY,GAAZ;AACH;;AAED,wBAAI,KAAK,IAAT,EAAe;AACX,+BAAO,IAAP,CAAY,KAAZ,EAAmB,mBAAmB,KAAK,IAAxB,EAA8B;AAC7C,wCAAY,WAAW,QADsB;AAE7C,qCAAS,IAFoC;AAG7C,uCAAW;AAHkC,yBAA9B,CAAnB,EAII,GAJJ;AAKH,qBAND,MAMO;AACH,+BAAO,IAAP,CAAY,GAAZ;AACH;;AAED,wBAAI,KAAK,MAAT,EAAiB;AACb,+BAAO,IAAP,CAAY,KAAZ,EAAmB,mBAAmB,KAAK,MAAxB,EAAgC;AAC/C,wCAAY,WAAW,QADwB;AAE/C,qCAAS,IAFsC;AAG/C,uCAAW;AAHoC,yBAAhC,CAAnB,EAII,GAJJ;AAKH,qBAND,MAMO;AACH,+BAAO,IAAP,CAAY,GAAZ;AACH;AACJ,iBAnCD;;AAqCA,uBAAO,IAAP,CAAY,WAAW,KAAK,IAAhB,EAAsB,cAAc,EAApC,CAAZ;AACA;;AAEJ,iBAAK,OAAO,cAAZ;AACI,yBAAS,CAAC,QAAQ,KAAR,GAAgB,GAAjB,CAAT;AACA,2BAAW,YAAY;AACnB,wBAAI,KAAK,IAAL,CAAU,IAAV,KAAmB,OAAO,mBAA9B,EAAmD;AAC/C,mCAAW,YAAY;AACnB,mCAAO,IAAP,CAAY,KAAK,IAAL,CAAU,IAAV,GAAiB,cAA7B,EAA6C,kBAAkB,KAAK,IAAL,CAAU,YAAV,CAAuB,CAAvB,CAAlB,EAA6C;AACtF,yCAAS;AAD6E,6BAA7C,CAA7C;AAGH,yBAJD;AAKH,qBAND,MAMO;AACH,+BAAO,IAAP,CAAY,mBAAmB,KAAK,IAAxB,EAA8B;AACtC,wCAAY,WAAW,IADe;AAEtC,qCAAS,IAF6B;AAGtC,uCAAW;AAH2B,yBAA9B,CAAZ;AAKH;;AAED,6BAAS,KAAK,MAAL,EAAa,IAAb,CAAT;AACA,6BAAS,CAAC,KACN,MADM,EAEN,mBAAmB,KAAK,KAAxB,EAA+B;AAC3B,oCAAY,WAAW,QADI;AAE3B,iCAAS,IAFkB;AAG3B,mCAAW;AAHgB,qBAA/B,CAFM,CAAD,EAON,GAPM,CAAT;AAQH,iBAxBD;AAyBA,uBAAO,IAAP,CAAY,WAAW,KAAK,IAAhB,EAAsB,cAAc,EAApC,CAAZ;AACA;;AAEJ,iBAAK,OAAO,gBAAZ;AACI,yBAAS,CAAC,KAAK,KAAL,CAAW,IAAX,GAAkB,GAAnB,EAAwB,WAAW,KAAK,IAAhB,EAAsB,cAAc,EAApC,CAAxB,CAAT;AACA;;AAEJ,iBAAK,OAAO,OAAZ;AACI,sBAAM,KAAK,IAAL,CAAU,MAAhB;AACA,yBAAS,CAAC,qBAAqB,MAAM,CAA3B,GAA+B,IAA/B,GAAsC,EAAvC,CAAT;AACA,qBAAK,IAAI,CAAT,EAAY,IAAI,GAAhB,EAAqB,KAAK,CAA1B,EAA6B;AACzB,+BAAW,UACP,kBAAkB,KAAK,IAAL,CAAU,CAAV,CAAlB,EAAgC;AAC5B,2CAAmB,CAAC,iBAAD,IAAsB,MAAM,MAAM,CADzB;AAE5B,0CAAkB;AAFU,qBAAhC,CADO,CAAX;AAMA,2BAAO,IAAP,CAAY,QAAZ;AACA,wBAAI,IAAI,CAAJ,GAAQ,GAAR,IAAe,CAAC,uBAAuB,aAAa,QAAb,EAAuB,QAAvB,EAAvB,CAApB,EAA+E;AAC3E,+BAAO,IAAP,CAAY,OAAZ;AACH;AACJ;AACD;;AAEJ,iBAAK,OAAO,mBAAZ;AACI,yBAAS,CAAE,KAAK,SAAL,IAAkB,CAAC,MAAM,GAAN,CAAU,iBAA7B,GAAiD,YAAjD,GAAgE,WAAlE,EACC,mBAAmB,KAAK,EAAxB,CADD,EAEC,qBAAqB,IAArB,CAFD,CAAT;AAGA;;AAEJ,iBAAK,OAAO,eAAZ;AACI,oBAAI,KAAK,QAAT,EAAmB;AACf,6BAAS,CAAC,KACN,QADM,EAEN,mBAAmB,KAAK,QAAxB,EAAkC;AAC9B,oCAAY,WAAW,QADO;AAE9B,iCAAS,IAFqB;AAG9B,mCAAW;AAHmB,qBAAlC,CAFM,CAAD,EAON,SAPM,CAAT;AAQH,iBATD,MASO;AACH,6BAAS,CAAC,WAAW,SAAZ,CAAT;AACH;AACD;;AAEJ,iBAAK,OAAO,cAAZ;AACI,2BAAW,YAAY;AACnB,6BAAS,CACL,UAAU,KAAV,GAAkB,GADb,EAEL,mBAAmB,KAAK,IAAxB,EAA8B;AAC1B,oCAAY,WAAW,QADG;AAE1B,iCAAS,IAFiB;AAG1B,mCAAW;AAHe,qBAA9B,CAFK,EAOL,GAPK,CAAT;AASH,iBAVD;AAWA,uBAAO,IAAP,CAAY,WAAW,KAAK,IAAhB,EAAsB,cAAc,EAApC,CAAZ;AACA;;AAEJ,iBAAK,OAAO,aAAZ;AACI,2BAAW,YAAY;AACnB,6BAAS,CACL,SAAS,KAAT,GAAiB,GADZ,EAEL,mBAAmB,KAAK,MAAxB,EAAgC;AAC5B,oCAAY,WAAW,QADK;AAE5B,iCAAS,IAFmB;AAG5B,mCAAW;AAHiB,qBAAhC,CAFK,EAOL,GAPK,CAAT;AASH,iBAVD;AAWA,uBAAO,IAAP,CAAY,WAAW,KAAK,IAAhB,EAAsB,cAAc,EAApC,CAAZ;AACA;;AAEJ;AACI,sBAAM,IAAI,KAAJ,CAAU,6BAA6B,KAAK,IAA5C,CAAN;AApbJ;;;;AAybA,YAAI,MAAM,OAAV,EAAmB;AACf,qBAAS,uBAAuB,IAAvB,EAA6B,MAA7B,CAAT;AACH;;AAED,mBAAW,aAAa,MAAb,EAAqB,QAArB,EAAX;AACA,YAAI,KAAK,IAAL,KAAc,OAAO,OAArB,IAAgC,CAAC,iBAAjC,IAAsD,YAAY,EAAlE,IAAyE,SAAS,MAAT,CAAgB,SAAS,MAAT,GAAkB,CAAlC,MAAyC,IAAtH,EAA4H;AACxH,qBAAS,aAAa,MAAb,EAAqB,YAArB,CAAkC,MAAlC,EAA0C,EAA1C,CAAT;AACH;;AAED,eAAO,aAAa,MAAb,EAAqB,IAArB,CAAP;AACH;;AAED,aAAS,QAAT,CAAkB,IAAlB,EAAwB,OAAxB,EAAiC;AAC7B,YAAI,iBAAiB,mBAArB;AAAA,YAA0C,MAA1C;AAAA,YAAkD,IAAlD;;AAEA,YAAI,WAAW,IAAf,EAAqB;;;;;;;AAOjB,gBAAI,OAAO,QAAQ,MAAf,KAA0B,QAA9B,EAAwC;AACpC,+BAAe,MAAf,CAAsB,MAAtB,CAA6B,KAA7B,GAAqC,QAAQ,MAA7C;AACH;AACD,gBAAI,OAAO,QAAQ,IAAf,KAAwB,QAA5B,EAAsC;AAClC,+BAAe,MAAf,CAAsB,MAAtB,CAA6B,IAA7B,GAAoC,QAAQ,IAA5C;AACH;AACD,sBAAU,aAAa,cAAb,EAA6B,OAA7B,CAAV;AACA,qBAAS,QAAQ,MAAR,CAAe,MAAf,CAAsB,KAA/B;AACA,gBAAI,OAAO,QAAQ,IAAf,KAAwB,QAA5B,EAAsC;AAClC,uBAAO,QAAQ,IAAf;AACH,aAFD,MAEO;AACH,uBAAO,aAAa,MAAb,EAAqB,QAAQ,MAAR,CAAe,MAAf,CAAsB,IAA3C,CAAP;AACH;AACJ,SApBD,MAoBO;AACH,sBAAU,cAAV;AACA,qBAAS,QAAQ,MAAR,CAAe,MAAf,CAAsB,KAA/B;AACA,mBAAO,aAAa,MAAb,EAAqB,QAAQ,MAAR,CAAe,MAAf,CAAsB,IAA3C,CAAP;AACH;AACD,eAAO,QAAQ,MAAR,CAAe,IAAtB;AACA,mBAAW,QAAQ,MAAR,CAAe,QAA1B;AACA,sBAAc,OAAO,KAAP,GAAe,QAAQ,MAAR,CAAe,WAA5C;AACA,iBAAS,OAAO,QAAP,GAAkB,QAAQ,MAAR,CAAe,MAA1C;AACA,qBAAa,QAAQ,MAAR,CAAe,UAA5B;AACA,kBAAU,QAAQ,MAAR,CAAe,OAAzB;AACA,gBAAQ,QAAQ,MAAR,CAAe,KAAvB;AACA,YAAI,QAAQ,MAAR,CAAe,OAAnB,EAA4B;AACxB,sBAAU,QAAQ,SAAS,OAAO,EAAlC;AACH;AACD,sBAAc,QAAQ,MAAR,CAAe,WAA7B;AACA,qBAAa,QAAQ,MAAR,CAAe,UAA5B;AACA,4BAAoB,QAAQ,MAAR,CAAe,iBAAnC;AACA,oBAAY,QAAQ,SAApB;AACA,gBAAQ,OAAO,IAAP,GAAc,QAAQ,KAA9B;AACA,oBAAY,QAAQ,SAApB;AACA,gBAAQ,OAAR;;AAEA,YAAI,SAAJ,EAAe;AACX,gBAAI,CAAC,QAAQ,OAAb,EAAsB;;;AAGlB,6BAAa,QAAQ,YAAR,EAAsB,UAAnC;AACH,aAJD,MAIO;AACH,6BAAa,OAAO,SAAP,CAAiB,UAA9B;AACH;AACJ,SARD,MAQO;AACH,yBAAa,cAAb;AACH;;AAED,gBAAQ,KAAK,IAAb;AACA,iBAAK,OAAO,cAAZ;AACA,iBAAK,OAAO,cAAZ;AACA,iBAAK,OAAO,WAAZ;AACA,iBAAK,OAAO,iBAAZ;AACA,iBAAK,OAAO,kBAAZ;AACA,iBAAK,OAAO,gBAAZ;AACA,iBAAK,OAAO,iBAAZ;AACA,iBAAK,OAAO,cAAZ;AACA,iBAAK,OAAO,mBAAZ;AACA,iBAAK,OAAO,YAAZ;AACA,iBAAK,OAAO,cAAZ;AACA,iBAAK,OAAO,mBAAZ;AACA,iBAAK,OAAO,WAAZ;AACA,iBAAK,OAAO,gBAAZ;AACA,iBAAK,OAAO,OAAZ;AACA,iBAAK,OAAO,eAAZ;AACA,iBAAK,OAAO,eAAZ;AACA,iBAAK,OAAO,UAAZ;AACA,iBAAK,OAAO,cAAZ;AACA,iBAAK,OAAO,YAAZ;AACA,iBAAK,OAAO,mBAAZ;AACA,iBAAK,OAAO,kBAAZ;AACA,iBAAK,OAAO,cAAZ;AACA,iBAAK,OAAO,aAAZ;AACI,yBAAS,kBAAkB,IAAlB,CAAT;AACA;;AAEJ,iBAAK,OAAO,oBAAZ;AACA,iBAAK,OAAO,eAAZ;AACA,iBAAK,OAAO,YAAZ;AACA,iBAAK,OAAO,gBAAZ;AACA,iBAAK,OAAO,cAAZ;AACA,iBAAK,OAAO,qBAAZ;AACA,iBAAK,OAAO,kBAAZ;AACA,iBAAK,OAAO,UAAZ;AACA,iBAAK,OAAO,OAAZ;AACA,iBAAK,OAAO,iBAAZ;AACA,iBAAK,OAAO,gBAAZ;AACA,iBAAK,OAAO,aAAZ;AACA,iBAAK,OAAO,gBAAZ;AACA,iBAAK,OAAO,aAAZ;AACA,iBAAK,OAAO,QAAZ;AACA,iBAAK,OAAO,kBAAZ;AACA,iBAAK,OAAO,cAAZ;AACA,iBAAK,OAAO,eAAZ;AACA,iBAAK,OAAO,gBAAZ;AACA,iBAAK,OAAO,eAAZ;;AAEI,yBAAS,mBAAmB,IAAnB,EAAyB;AAC9B,gCAAY,WAAW,QADO;AAE9B,6BAAS,IAFqB;AAG9B,+BAAW;AAHmB,iBAAzB,CAAT;AAKA;;AAEJ;AACI,sBAAM,IAAI,KAAJ,CAAU,wBAAwB,KAAK,IAAvC,CAAN;AAzDJ;;AA4DA,YAAI,CAAC,SAAL,EAAgB;AACZ,mBAAO,OAAO,QAAP,EAAP;AACH;;AAED,eAAO,OAAO,qBAAP,CAA6B;AAChC,kBAAM,QAAQ,IADkB;AAEhC,wBAAY,QAAQ;AAFY,SAA7B,CAAP;;AAKA,YAAI,QAAQ,iBAAZ,EAA+B;AAC3B,mBAAO,IAAP;AACH;AACD,eAAO,KAAK,GAAL,CAAS,QAAT,EAAP;AACH;;AAED,oBAAgB;AACZ,gBAAQ;AACJ,mBAAO,EADH;AAEJ,kBAAM;AAFF,SADI;AAKZ,kBAAU,IALE;AAMZ,qBAAa,IAND;AAOZ,gBAAQ,MAPI;AAQZ,oBAAY,IARA;AASZ,iBAAS,IATG;AAUZ,qBAAa,KAVD;AAWZ,oBAAY;AAXA,KAAhB;;AAcA,sBAAkB,oBAAoB,MAAtC;;AAEA,YAAQ,OAAR,GAAkB,QAAQ,gBAAR,EAA0B,OAA5C;AACA,YAAQ,QAAR,GAAmB,QAAnB;AACA,YAAQ,cAAR,GAAyB,WAAW,cAApC;AACA,YAAQ,OAAR,GAAkB,KAAlB;AACA,YAAQ,aAAR,GAAwB,aAAxB;AACA,YAAQ,eAAR,GAA0B,eAA1B;AACH,CAniEA,GAAD","file":"escodegen-compiled.js","sourcesContent":["/*\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>\n  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>\n  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>\n  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>\n  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*global exports:true, generateStatement:true, generateExpression:true, require:true, global:true*/\n(function () {\n    'use strict';\n\n    var Syntax,\n        Precedence,\n        BinaryPrecedence,\n        Regex,\n        SourceNode,\n        estraverse,\n        isArray,\n        base,\n        indent,\n        json,\n        renumber,\n        hexadecimal,\n        quotes,\n        escapeless,\n        newline,\n        space,\n        parentheses,\n        semicolons,\n        safeConcatenation,\n        directive,\n        extra,\n        parse,\n        sourceMap,\n        FORMAT_MINIFY,\n        FORMAT_DEFAULTS;\n\n    estraverse = require('estraverse');\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ComprehensionBlock: 'ComprehensionBlock',\n        ComprehensionExpression: 'ComprehensionExpression',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DirectiveStatement: 'DirectiveStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n\n    };\n\n    Precedence = {\n        Sequence: 0,\n        Assignment: 1,\n        Conditional: 2,\n        ArrowFunction: 2,\n        LogicalOR: 3,\n        LogicalAND: 4,\n        BitwiseOR: 5,\n        BitwiseXOR: 6,\n        BitwiseAND: 7,\n        Equality: 8,\n        Relational: 9,\n        BitwiseSHIFT: 10,\n        Additive: 11,\n        Multiplicative: 12,\n        Unary: 13,\n        Postfix: 14,\n        Call: 15,\n        New: 16,\n        Member: 17,\n        Primary: 18\n    };\n\n    BinaryPrecedence = {\n        '||': Precedence.LogicalOR,\n        '&&': Precedence.LogicalAND,\n        '|': Precedence.BitwiseOR,\n        '^': Precedence.BitwiseXOR,\n        '&': Precedence.BitwiseAND,\n        '==': Precedence.Equality,\n        '!=': Precedence.Equality,\n        '===': Precedence.Equality,\n        '!==': Precedence.Equality,\n        'is': Precedence.Equality,\n        'isnt': Precedence.Equality,\n        '<': Precedence.Relational,\n        '>': Precedence.Relational,\n        '<=': Precedence.Relational,\n        '>=': Precedence.Relational,\n        'in': Precedence.Relational,\n        'instanceof': Precedence.Relational,\n        '<<': Precedence.BitwiseSHIFT,\n        '>>': Precedence.BitwiseSHIFT,\n        '>>>': Precedence.BitwiseSHIFT,\n        '+': Precedence.Additive,\n        '-': Precedence.Additive,\n        '*': Precedence.Multiplicative,\n        '%': Precedence.Multiplicative,\n        '/': Precedence.Multiplicative\n    };\n\n    Regex = {\n        NonAsciiIdentifierPart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u0487\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0610-\\u061a\\u0620-\\u0669\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07c0-\\u07f5\\u07fa\\u0800-\\u082d\\u0840-\\u085b\\u08a0\\u08a2-\\u08ac\\u08e4-\\u08fe\\u0900-\\u0963\\u0966-\\u096f\\u0971-\\u0977\\u0979-\\u097f\\u0981-\\u0983\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc\\u09dd\\u09df-\\u09e3\\u09e6-\\u09f1\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5c\\u0b5d\\u0b5f-\\u0b63\\u0b66-\\u0b6f\\u0b71\\u0b82\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c58\\u0c59\\u0c60-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0ce6-\\u0cef\\u0cf1\\u0cf2\\u0d02\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d57\\u0d60-\\u0d63\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d82\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e50-\\u0e59\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb9\\u0ebb-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1049\\u1050-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772\\u1773\\u1780-\\u17d3\\u17d7\\u17dc\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1aa7\\u1b00-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1bf3\\u1c00-\\u1c37\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1cd0-\\u1cd2\\u1cd4-\\u1cf6\\u1d00-\\u1de6\\u1dfc-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u200c\\u200d\\u203f\\u2040\\u2054\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u2e2f\\u3005-\\u3007\\u3021-\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u3099\\u309a\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66f\\ua674-\\ua67d\\ua67f-\\ua697\\ua69f-\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua827\\ua840-\\ua873\\ua880-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f7\\ua8fb\\ua900-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf-\\ua9d9\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa50-\\uaa59\\uaa60-\\uaa76\\uaa7a\\uaa7b\\uaa80-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]')\n    };\n\n    function getDefaultOptions() {\n        // default options\n        return {\n            indent: null,\n            base: null,\n            parse: null,\n            comment: false,\n            format: {\n                indent: {\n                    style: '    ',\n                    base: 0,\n                    adjustMultilineComment: false\n                },\n                newline: '\\n',\n                space: ' ',\n                json: false,\n                renumber: false,\n                hexadecimal: false,\n                quotes: 'single',\n                escapeless: false,\n                compact: false,\n                parentheses: true,\n                semicolons: true,\n                safeConcatenation: false\n            },\n            moz: {\n                starlessGenerator: false,\n                parenthesizedComprehensionBlock: false\n            },\n            sourceMap: null,\n            sourceMapRoot: null,\n            sourceMapWithCode: false,\n            directive: false,\n            verbatim: null\n        };\n    }\n\n    function stringToArray(str) {\n        var length = str.length,\n            result = [],\n            i;\n        for (i = 0; i < length; i += 1) {\n            result[i] = str.charAt(i);\n        }\n        return result;\n    }\n\n    function stringRepeat(str, num) {\n        var result = '';\n\n        for (num |= 0; num > 0; num >>>= 1, str += str) {\n            if (num & 1) {\n                result += str;\n            }\n        }\n\n        return result;\n    }\n\n    isArray = Array.isArray;\n    if (!isArray) {\n        isArray = function isArray(array) {\n            return Object.prototype.toString.call(array) === '[object Array]';\n        };\n    }\n\n    // Fallback for the non SourceMap environment\n    function SourceNodeMock(line, column, filename, chunk) {\n        var result = [];\n\n        function flatten(input) {\n            var i, iz;\n            if (isArray(input)) {\n                for (i = 0, iz = input.length; i < iz; ++i) {\n                    flatten(input[i]);\n                }\n            } else if (input instanceof SourceNodeMock) {\n                result.push(input);\n            } else if (typeof input === 'string' && input) {\n                result.push(input);\n            }\n        }\n\n        flatten(chunk);\n        this.children = result;\n    }\n\n    SourceNodeMock.prototype.toString = function toString() {\n        var res = '', i, iz, node;\n        for (i = 0, iz = this.children.length; i < iz; ++i) {\n            node = this.children[i];\n            if (node instanceof SourceNodeMock) {\n                res += node.toString();\n            } else {\n                res += node;\n            }\n        }\n        return res;\n    };\n\n    SourceNodeMock.prototype.replaceRight = function replaceRight(pattern, replacement) {\n        var last = this.children[this.children.length - 1];\n        if (last instanceof SourceNodeMock) {\n            last.replaceRight(pattern, replacement);\n        } else if (typeof last === 'string') {\n            this.children[this.children.length - 1] = last.replace(pattern, replacement);\n        } else {\n            this.children.push(''.replace(pattern, replacement));\n        }\n        return this;\n    };\n\n    SourceNodeMock.prototype.join = function join(sep) {\n        var i, iz, result;\n        result = [];\n        iz = this.children.length;\n        if (iz > 0) {\n            for (i = 0, iz -= 1; i < iz; ++i) {\n                result.push(this.children[i], sep);\n            }\n            result.push(this.children[iz]);\n            this.children = result;\n        }\n        return this;\n    };\n\n    function hasLineTerminator(str) {\n        return (/[\\r\\n]/g).test(str);\n    }\n\n    function endsWithLineTerminator(str) {\n        var ch = str.charAt(str.length - 1);\n        return ch && isLineTerminator(ch);\n    }\n\n    function updateDeeply(target, override) {\n        var key, val;\n\n        function isHashObject(target) {\n            return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);\n        }\n\n        for (key in override) {\n            if (override.hasOwnProperty(key)) {\n                val = override[key];\n                if (isHashObject(val)) {\n                    if (isHashObject(target[key])) {\n                        updateDeeply(target[key], val);\n                    } else {\n                        target[key] = updateDeeply({}, val);\n                    }\n                } else {\n                    target[key] = val;\n                }\n            }\n        }\n        return target;\n    }\n\n    function generateNumber(value) {\n        var result, point, temp, exponent, pos;\n\n        if (value !== value) {\n            throw new Error('Numeric literal whose value is NaN');\n        }\n        if (value < 0 || (value === 0 && 1 / value < 0)) {\n            throw new Error('Numeric literal whose value is negative');\n        }\n\n        if (value === 1 / 0) {\n            return json ? 'null' : renumber ? '1e400' : '1e+400';\n        }\n\n        result = '' + value;\n        if (!renumber || result.length < 3) {\n            return result;\n        }\n\n        point = result.indexOf('.');\n        if (!json && result.charAt(0) === '0' && point === 1) {\n            point = 0;\n            result = result.slice(1);\n        }\n        temp = result;\n        result = result.replace('e+', 'e');\n        exponent = 0;\n        if ((pos = temp.indexOf('e')) > 0) {\n            exponent = +temp.slice(pos + 1);\n            temp = temp.slice(0, pos);\n        }\n        if (point >= 0) {\n            exponent -= temp.length - point - 1;\n            temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';\n        }\n        pos = 0;\n        while (temp.charAt(temp.length + pos - 1) === '0') {\n            pos -= 1;\n        }\n        if (pos !== 0) {\n            exponent -= pos;\n            temp = temp.slice(0, pos);\n        }\n        if (exponent !== 0) {\n            temp += 'e' + exponent;\n        }\n        if ((temp.length < result.length ||\n                    (hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length)) &&\n                +temp === value) {\n            result = temp;\n        }\n\n        return result;\n    }\n\n    // Generate valid RegExp expression.\n    // This function is based on https://github.com/Constellation/iv Engine\n\n    function escapeRegExpCharacter(ch, previousIsBackslash) {\n        // not handling '\\' and handling \\u2028 or \\u2029 to unicode escape sequence\n        if ((ch & ~1) === 0x2028) {\n            return (previousIsBackslash ? 'u' : '\\\\u') + ((ch === 0x2028) ? '2028' : '2029');\n        } else if (ch === 10 || ch === 13) {  // \\n, \\r\n            return (previousIsBackslash ? '' : '\\\\') + ((ch === 10) ? 'n' : 'r');\n        }\n        return String.fromCharCode(ch);\n    }\n\n    function generateRegExp(reg) {\n        var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;\n\n        result = reg.toString();\n\n        if (reg.source) {\n            // extract flag from toString result\n            match = result.match(/\\/([^/]*)$/);\n            if (!match) {\n                return result;\n            }\n\n            flags = match[1];\n            result = '';\n\n            characterInBrack = false;\n            previousIsBackslash = false;\n            for (i = 0, iz = reg.source.length; i < iz; ++i) {\n                ch = reg.source.charCodeAt(i);\n\n                if (!previousIsBackslash) {\n                    if (characterInBrack) {\n                        if (ch === 93) {  // ]\n                            characterInBrack = false;\n                        }\n                    } else {\n                        if (ch === 47) {  // /\n                            result += '\\\\';\n                        } else if (ch === 91) {  // [\n                            characterInBrack = true;\n                        }\n                    }\n                    result += escapeRegExpCharacter(ch, previousIsBackslash);\n                    previousIsBackslash = ch === 92;  // \\\n                } else {\n                    // if new RegExp(\"\\\\\\n') is provided, create /\\n/\n                    result += escapeRegExpCharacter(ch, previousIsBackslash);\n                    // prevent like /\\\\[/]/\n                    previousIsBackslash = false;\n                }\n            }\n\n            return '/' + result + '/' + flags;\n        }\n\n        return result;\n    }\n\n    function escapeAllowedCharacter(ch, next) {\n        var code = ch.charCodeAt(0), hex = code.toString(16), result = '\\\\';\n\n        switch (ch) {\n        case '\\b':\n            result += 'b';\n            break;\n        case '\\f':\n            result += 'f';\n            break;\n        case '\\t':\n            result += 't';\n            break;\n        default:\n            if (json || code > 0xff) {\n                result += 'u' + '0000'.slice(hex.length) + hex;\n            } else if (ch === '\\u0000' && '0123456789'.indexOf(next) < 0) {\n                result += '0';\n            } else if (ch === '\\x0B') { // '\\v'\n                result += 'x0B';\n            } else {\n                result += 'x' + '00'.slice(hex.length) + hex;\n            }\n            break;\n        }\n\n        return result;\n    }\n\n    function escapeDisallowedCharacter(ch) {\n        var result = '\\\\';\n        switch (ch) {\n        case '\\\\':\n            result += '\\\\';\n            break;\n        case '\\n':\n            result += 'n';\n            break;\n        case '\\r':\n            result += 'r';\n            break;\n        case '\\u2028':\n            result += 'u2028';\n            break;\n        case '\\u2029':\n            result += 'u2029';\n            break;\n        default:\n            throw new Error('Incorrectly classified character');\n        }\n\n        return result;\n    }\n\n    function escapeDirective(str) {\n        var i, iz, ch, buf, quote;\n\n        buf = str;\n        if (typeof buf[0] === 'undefined') {\n            buf = stringToArray(buf);\n        }\n\n        quote = quotes === 'double' ? '\"' : '\\'';\n        for (i = 0, iz = buf.length; i < iz; i += 1) {\n            ch = buf[i];\n            if (ch === '\\'') {\n                quote = '\"';\n                break;\n            } else if (ch === '\"') {\n                quote = '\\'';\n                break;\n            } else if (ch === '\\\\') {\n                i += 1;\n            }\n        }\n\n        return quote + str + quote;\n    }\n\n    function escapeString(str) {\n        var result = '', i, len, ch, singleQuotes = 0, doubleQuotes = 0, single;\n\n        if (typeof str[0] === 'undefined') {\n            str = stringToArray(str);\n        }\n\n        for (i = 0, len = str.length; i < len; i += 1) {\n            ch = str[i];\n            if (ch === '\\'') {\n                singleQuotes += 1;\n            } else if (ch === '\"') {\n                doubleQuotes += 1;\n            } else if (ch === '/' && json) {\n                result += '\\\\';\n            } else if ('\\\\\\n\\r\\u2028\\u2029'.indexOf(ch) >= 0) {\n                result += escapeDisallowedCharacter(ch);\n                continue;\n            } else if ((json && ch < ' ') || !(json || escapeless || (ch >= ' ' && ch <= '~'))) {\n                result += escapeAllowedCharacter(ch, str[i + 1]);\n                continue;\n            }\n            result += ch;\n        }\n\n        single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));\n        str = result;\n        result = single ? '\\'' : '\"';\n\n        if (typeof str[0] === 'undefined') {\n            str = stringToArray(str);\n        }\n\n        for (i = 0, len = str.length; i < len; i += 1) {\n            ch = str[i];\n            if ((ch === '\\'' && single) || (ch === '\"' && !single)) {\n                result += '\\\\';\n            }\n            result += ch;\n        }\n\n        return result + (single ? '\\'' : '\"');\n    }\n\n    function isWhiteSpace(ch) {\n        // Use `\\x0B` instead of `\\v` for IE < 9 compatibility\n        return '\\t\\x0B\\f \\xa0'.indexOf(ch) >= 0 || (ch.charCodeAt(0) >= 0x1680 && '\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\ufeff'.indexOf(ch) >= 0);\n    }\n\n    function isLineTerminator(ch) {\n        return '\\n\\r\\u2028\\u2029'.indexOf(ch) >= 0;\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch >= '0') && (ch <= '9')) ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierPart.test(ch));\n    }\n\n    // takes char code\n    function isDecimalDigit(ch) {\n        return (ch >= 48 && ch <= 57);   // 0..9\n    }\n\n    function toSourceNode(generated, node) {\n        if (node == null) {\n            if (generated instanceof SourceNode) {\n                return generated;\n            } else {\n                node = {};\n            }\n        }\n        if (node.loc == null) {\n            return new SourceNode(null, null, sourceMap, generated, node.name || null);\n        }\n        return new SourceNode(node.loc.start.line, node.loc.start.column, (sourceMap === true ? node.loc.source || null : sourceMap), generated, node.name || null);\n    }\n\n    function noEmptySpace() {\n        return (space) ? space : ' ';\n    }\n\n    function join(left, right) {\n        var leftSource = toSourceNode(left).toString(),\n            rightSource = toSourceNode(right).toString(),\n            leftChar = leftSource.charAt(leftSource.length - 1),\n            rightChar = rightSource.charAt(0);\n\n        if ((leftChar === '+' || leftChar === '-') && leftChar === rightChar ||\n        isIdentifierPart(leftChar) && isIdentifierPart(rightChar) ||\n        leftChar === '/' && rightChar === 'i') { // infix word operators all start with `i`\n            return [left, noEmptySpace(), right];\n        } else if (isWhiteSpace(leftChar) || isLineTerminator(leftChar) || isWhiteSpace(rightChar) || isLineTerminator(rightChar)) {\n            return [left, right];\n        }\n        return [left, space, right];\n    }\n\n    function addIndent(stmt) {\n        return [base, stmt];\n    }\n\n    function withIndent(fn) {\n        var previousBase, result;\n        previousBase = base;\n        base += indent;\n        result = fn.call(this, base);\n        base = previousBase;\n        return result;\n    }\n\n    function calculateSpaces(str) {\n        var i;\n        for (i = str.length - 1; i >= 0; i -= 1) {\n            if (isLineTerminator(str.charAt(i))) {\n                break;\n            }\n        }\n        return (str.length - 1) - i;\n    }\n\n    function adjustMultilineComment(value, specialBase) {\n        var array, i, len, line, j, spaces, previousBase;\n\n        array = value.split(/\\r\\n|[\\r\\n]/);\n        spaces = Number.MAX_VALUE;\n\n        // first line doesn't have indentation\n        for (i = 1, len = array.length; i < len; i += 1) {\n            line = array[i];\n            j = 0;\n            while (j < line.length && isWhiteSpace(line[j])) {\n                j += 1;\n            }\n            if (spaces > j) {\n                spaces = j;\n            }\n        }\n\n        if (typeof specialBase !== 'undefined') {\n            // pattern like\n            // {\n            //   var t = 20;  /*\n            //                 * this is comment\n            //                 */\n            // }\n            previousBase = base;\n            if (array[1][spaces] === '*') {\n                specialBase += ' ';\n            }\n            base = specialBase;\n        } else {\n            if (spaces & 1) {\n                // /*\n                //  *\n                //  */\n                // If spaces are odd number, above pattern is considered.\n                // We waste 1 space.\n                spaces -= 1;\n            }\n            previousBase = base;\n        }\n\n        for (i = 1, len = array.length; i < len; i += 1) {\n            array[i] = toSourceNode(addIndent(array[i].slice(spaces))).join('');\n        }\n\n        base = previousBase;\n\n        return array.join('\\n');\n    }\n\n    function generateComment(comment, specialBase) {\n        if (comment.type === 'Line') {\n            if (endsWithLineTerminator(comment.value)) {\n                return '//' + comment.value;\n            } else {\n                // Always use LineTerminator\n                return '//' + comment.value + '\\n';\n            }\n        }\n        if (extra.format.indent.adjustMultilineComment && /[\\n\\r]/.test(comment.value)) {\n            return adjustMultilineComment('/*' + comment.value + '*/', specialBase);\n        }\n        return '/*' + comment.value + '*/';\n    }\n\n    function addCommentsToStatement(stmt, result) {\n        var i, len, comment, save, tailingToStatement, specialBase, fragment;\n\n        if (stmt.leadingComments && stmt.leadingComments.length > 0) {\n            save = result;\n\n            comment = stmt.leadingComments[0];\n            result = [];\n            if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {\n                result.push('\\n');\n            }\n            result.push(generateComment(comment));\n            if (!endsWithLineTerminator(toSourceNode(result).toString())) {\n                result.push('\\n');\n            }\n\n            for (i = 1, len = stmt.leadingComments.length; i < len; i += 1) {\n                comment = stmt.leadingComments[i];\n                fragment = [generateComment(comment)];\n                if (!endsWithLineTerminator(toSourceNode(fragment).toString())) {\n                    fragment.push('\\n');\n                }\n                result.push(addIndent(fragment));\n            }\n\n            result.push(addIndent(save));\n        }\n\n        if (stmt.trailingComments) {\n            tailingToStatement = !endsWithLineTerminator(toSourceNode(result).toString());\n            specialBase = stringRepeat(' ', calculateSpaces(toSourceNode([base, result, indent]).toString()));\n            for (i = 0, len = stmt.trailingComments.length; i < len; i += 1) {\n                comment = stmt.trailingComments[i];\n                if (tailingToStatement) {\n                    // We assume target like following script\n                    //\n                    // var t = 20;  /**\n                    //               * This is comment of t\n                    //               */\n                    if (i === 0) {\n                        // first case\n                        result = [result, indent];\n                    } else {\n                        result = [result, specialBase];\n                    }\n                    result.push(generateComment(comment, specialBase));\n                } else {\n                    result = [result, addIndent(generateComment(comment))];\n                }\n                if (i !== len - 1 && !endsWithLineTerminator(toSourceNode(result).toString())) {\n                    result = [result, '\\n'];\n                }\n            }\n        }\n\n        return result;\n    }\n\n    function parenthesize(text, current, should) {\n        if (current < should) {\n            return ['(', text, ')'];\n        }\n        return text;\n    }\n\n    function maybeBlock(stmt, semicolonOptional, functionBody) {\n        var result, noLeadingComment;\n\n        noLeadingComment = !extra.comment || !stmt.leadingComments;\n\n        if (stmt.type === Syntax.BlockStatement && noLeadingComment) {\n            return [space, generateStatement(stmt, { functionBody: functionBody })];\n        }\n\n        if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {\n            return ';';\n        }\n\n        withIndent(function () {\n            result = [newline, addIndent(generateStatement(stmt, { semicolonOptional: semicolonOptional, functionBody: functionBody }))];\n        });\n\n        return result;\n    }\n\n    function maybeBlockSuffix(stmt, result) {\n        var ends = endsWithLineTerminator(toSourceNode(result).toString());\n        if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {\n            return [result, space];\n        }\n        if (ends) {\n            return [result, base];\n        }\n        return [result, newline, base];\n    }\n\n    function generateVerbatim(expr, option) {\n        var i, result;\n        result = expr[extra.verbatim].split(/\\r\\n|\\n/);\n        for (i = 1; i < result.length; i++) {\n            result[i] = newline + base + result[i];\n        }\n\n        result = parenthesize(result, Precedence.Sequence, option.precedence);\n        return toSourceNode(result, expr);\n    }\n\n    function generateIdentifier(node) {\n        return toSourceNode(node.name, node);\n    }\n\n    function generateFunctionBody(node) {\n        var result, i, len, expr, arrow;\n\n        arrow = node.type === Syntax.ArrowFunctionExpression;\n\n        if (arrow && node.params.length === 1 && node.params[0].type === Syntax.Identifier) {\n            // arg => { } case\n            result = [generateIdentifier(node.params[0])];\n        } else {\n            result = ['('];\n            for (i = 0, len = node.params.length; i < len; i += 1) {\n                result.push(generateIdentifier(node.params[i]));\n                if (i + 1 < len) {\n                    result.push(',' + space);\n                }\n            }\n            result.push(')');\n        }\n\n        if (arrow) {\n            result.push(space, '=>');\n        }\n\n        if (node.expression) {\n            result.push(space);\n            expr = generateExpression(node.body, {\n                precedence: Precedence.Assignment,\n                allowIn: true,\n                allowCall: true\n            });\n            if (expr.toString().charAt(0) === '{') {\n                expr = ['(', expr, ')'];\n            }\n            result.push(expr);\n        } else {\n            result.push(maybeBlock(node.body, false, true));\n        }\n        return result;\n    }\n\n    function generateExpression(expr, option) {\n        var result,\n            precedence,\n            type,\n            currentPrecedence,\n            i,\n            len,\n            raw,\n            fragment,\n            multiline,\n            leftChar,\n            leftSource,\n            rightChar,\n            allowIn,\n            allowCall,\n            allowUnparenthesizedNew,\n            property;\n\n        precedence = option.precedence;\n        allowIn = option.allowIn;\n        allowCall = option.allowCall;\n        type = expr.type || option.type;\n\n        if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {\n            return generateVerbatim(expr, option);\n        }\n\n        switch (type) {\n        case Syntax.SequenceExpression:\n            result = [];\n            allowIn |= (Precedence.Sequence < precedence);\n            for (i = 0, len = expr.expressions.length; i < len; i += 1) {\n                result.push(generateExpression(expr.expressions[i], {\n                    precedence: Precedence.Assignment,\n                    allowIn: allowIn,\n                    allowCall: true\n                }));\n                if (i + 1 < len) {\n                    result.push(',' + space);\n                }\n            }\n            result = parenthesize(result, Precedence.Sequence, precedence);\n            break;\n\n        case Syntax.AssignmentExpression:\n            allowIn |= (Precedence.Assignment < precedence);\n            result = parenthesize(\n                [\n                    generateExpression(expr.left, {\n                        precedence: Precedence.Call,\n                        allowIn: allowIn,\n                        allowCall: true\n                    }),\n                    space + expr.operator + space,\n                    generateExpression(expr.right, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    })\n                ],\n                Precedence.Assignment,\n                precedence\n            );\n            break;\n\n        case Syntax.ArrowFunctionExpression:\n            allowIn |= (Precedence.ArrowFunction < precedence);\n            result = parenthesize(generateFunctionBody(expr), Precedence.ArrowFunction, precedence);\n            break;\n\n        case Syntax.ConditionalExpression:\n            allowIn |= (Precedence.Conditional < precedence);\n            result = parenthesize(\n                [\n                    generateExpression(expr.test, {\n                        precedence: Precedence.LogicalOR,\n                        allowIn: allowIn,\n                        allowCall: true\n                    }),\n                    space + '?' + space,\n                    generateExpression(expr.consequent, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    }),\n                    space + ':' + space,\n                    generateExpression(expr.alternate, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    })\n                ],\n                Precedence.Conditional,\n                precedence\n            );\n            break;\n\n        case Syntax.LogicalExpression:\n        case Syntax.BinaryExpression:\n            currentPrecedence = BinaryPrecedence[expr.operator];\n\n            allowIn |= (currentPrecedence < precedence);\n\n            fragment = generateExpression(expr.left, {\n                precedence: currentPrecedence,\n                allowIn: allowIn,\n                allowCall: true\n            });\n\n            leftSource = fragment.toString();\n\n            if (leftSource.charAt(leftSource.length - 1) === '/' && isIdentifierPart(expr.operator.charAt(0))) {\n                result = [fragment, noEmptySpace(), expr.operator];\n            } else {\n                result = join(fragment, expr.operator);\n            }\n\n            fragment = generateExpression(expr.right, {\n                precedence: currentPrecedence + 1,\n                allowIn: allowIn,\n                allowCall: true\n            });\n\n            if (expr.operator === '/' && fragment.toString().charAt(0) === '/' ||\n            expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {\n                // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start\n                result.push(noEmptySpace(), fragment);\n            } else {\n                result = join(result, fragment);\n            }\n\n            if (expr.operator === 'in' && !allowIn) {\n                result = ['(', result, ')'];\n            } else {\n                result = parenthesize(result, currentPrecedence, precedence);\n            }\n\n            break;\n\n        case Syntax.CallExpression:\n            result = [generateExpression(expr.callee, {\n                precedence: Precedence.Call,\n                allowIn: true,\n                allowCall: true,\n                allowUnparenthesizedNew: false\n            })];\n\n            result.push('(');\n            for (i = 0, len = expr['arguments'].length; i < len; i += 1) {\n                result.push(generateExpression(expr['arguments'][i], {\n                    precedence: Precedence.Assignment,\n                    allowIn: true,\n                    allowCall: true\n                }));\n                if (i + 1 < len) {\n                    result.push(',' + space);\n                }\n            }\n            result.push(')');\n\n            if (!allowCall) {\n                result = ['(', result, ')'];\n            } else {\n                result = parenthesize(result, Precedence.Call, precedence);\n            }\n            break;\n\n        case Syntax.NewExpression:\n            len = expr['arguments'].length;\n            allowUnparenthesizedNew = option.allowUnparenthesizedNew === undefined || option.allowUnparenthesizedNew;\n\n            result = join(\n                'new',\n                generateExpression(expr.callee, {\n                    precedence: Precedence.New,\n                    allowIn: true,\n                    allowCall: false,\n                    allowUnparenthesizedNew: allowUnparenthesizedNew && !parentheses && len === 0\n                })\n            );\n\n            if (!allowUnparenthesizedNew || parentheses || len > 0) {\n                result.push('(');\n                for (i = 0; i < len; i += 1) {\n                    result.push(generateExpression(expr['arguments'][i], {\n                        precedence: Precedence.Assignment,\n                        allowIn: true,\n                        allowCall: true\n                    }));\n                    if (i + 1 < len) {\n                        result.push(',' + space);\n                    }\n                }\n                result.push(')');\n            }\n\n            result = parenthesize(result, Precedence.New, precedence);\n            break;\n\n        case Syntax.MemberExpression:\n            result = [generateExpression(expr.object, {\n                precedence: Precedence.Call,\n                allowIn: true,\n                allowCall: allowCall,\n                allowUnparenthesizedNew: false\n            })];\n\n            if (expr.computed) {\n                result.push('[', generateExpression(expr.property, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: allowCall\n                }), ']');\n            } else {\n                if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {\n                    fragment = toSourceNode(result).toString();\n                    // When the following conditions are all true,\n                    //   1. No floating point\n                    //   2. Don't have exponents\n                    //   3. The last character is a decimal digit\n                    //   4. Not hexadecimal OR octal number literal\n                    // we should add a floating point.\n                    if (\n                            fragment.indexOf('.') < 0 &&\n                            !/[eExX]/.test(fragment) &&\n                            isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) &&\n                            !(fragment.length >= 2 && fragment.charCodeAt(0) === 48)  // '0'\n                            ) {\n                        result.push('.');\n                    }\n                }\n                result.push('.', generateIdentifier(expr.property));\n            }\n\n            result = parenthesize(result, Precedence.Member, precedence);\n            break;\n\n        case Syntax.UnaryExpression:\n            fragment = generateExpression(expr.argument, {\n                precedence: Precedence.Unary,\n                allowIn: true,\n                allowCall: true\n            });\n\n            if (space === '') {\n                result = join(expr.operator, fragment);\n            } else {\n                result = [expr.operator];\n                if (expr.operator.length > 2) {\n                    // delete, void, typeof\n                    // get `typeof []`, not `typeof[]`\n                    result = join(result, fragment);\n                } else {\n                    // Prevent inserting spaces between operator and argument if it is unnecessary\n                    // like, `!cond`\n                    leftSource = toSourceNode(result).toString();\n                    leftChar = leftSource.charAt(leftSource.length - 1);\n                    rightChar = fragment.toString().charAt(0);\n\n                    if (((leftChar === '+' || leftChar === '-') && leftChar === rightChar) || (isIdentifierPart(leftChar) && isIdentifierPart(rightChar))) {\n                        result.push(noEmptySpace(), fragment);\n                    } else {\n                        result.push(fragment);\n                    }\n                }\n            }\n            result = parenthesize(result, Precedence.Unary, precedence);\n            break;\n\n        case Syntax.YieldExpression:\n            if (expr.delegate) {\n                result = 'yield*';\n            } else {\n                result = 'yield';\n            }\n            if (expr.argument) {\n                result = join(\n                    result,\n                    generateExpression(expr.argument, {\n                        precedence: Precedence.Assignment,\n                        allowIn: true,\n                        allowCall: true\n                    })\n                );\n            }\n            break;\n\n        case Syntax.UpdateExpression:\n            if (expr.prefix) {\n                result = parenthesize(\n                    [\n                        expr.operator,\n                        generateExpression(expr.argument, {\n                            precedence: Precedence.Unary,\n                            allowIn: true,\n                            allowCall: true\n                        })\n                    ],\n                    Precedence.Unary,\n                    precedence\n                );\n            } else {\n                result = parenthesize(\n                    [\n                        generateExpression(expr.argument, {\n                            precedence: Precedence.Postfix,\n                            allowIn: true,\n                            allowCall: true\n                        }),\n                        expr.operator\n                    ],\n                    Precedence.Postfix,\n                    precedence\n                );\n            }\n            break;\n\n        case Syntax.FunctionExpression:\n            result = 'function';\n\n            if (expr.id) {\n                result = [result, noEmptySpace(),\n                          generateIdentifier(expr.id),\n                          generateFunctionBody(expr)];\n            } else {\n                result = [result + space, generateFunctionBody(expr)];\n            }\n\n            break;\n\n        case Syntax.ArrayPattern:\n        case Syntax.ArrayExpression:\n            if (!expr.elements.length) {\n                result = '[]';\n                break;\n            }\n            multiline = expr.elements.length > 1;\n            result = ['[', multiline ? newline : ''];\n            withIndent(function (indent) {\n                for (i = 0, len = expr.elements.length; i < len; i += 1) {\n                    if (!expr.elements[i]) {\n                        if (multiline) {\n                            result.push(indent);\n                        }\n                        if (i + 1 === len) {\n                            result.push(',');\n                        }\n                    } else {\n                        result.push(multiline ? indent : '', generateExpression(expr.elements[i], {\n                            precedence: Precedence.Assignment,\n                            allowIn: true,\n                            allowCall: true\n                        }));\n                    }\n                    if (i + 1 < len) {\n                        result.push(',' + (multiline ? newline : space));\n                    }\n                }\n            });\n            if (multiline && !endsWithLineTerminator(toSourceNode(result).toString())) {\n                result.push(newline);\n            }\n            result.push(multiline ? base : '', ']');\n            break;\n\n        case Syntax.Property:\n            if (expr.kind === 'get' || expr.kind === 'set') {\n                result = [\n                    expr.kind, noEmptySpace(),\n                    generateExpression(expr.key, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    generateFunctionBody(expr.value)\n                ];\n            } else {\n                if (expr.shorthand) {\n                    result = generateExpression(expr.key, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    });\n                } else if (expr.method) {\n                    result = [];\n                    if (expr.value.generator) {\n                        result.push('*');\n                    }\n                    result.push(generateExpression(expr.key, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }), generateFunctionBody(expr.value));\n                } else {\n                    result = [\n                        generateExpression(expr.key, {\n                            precedence: Precedence.Sequence,\n                            allowIn: true,\n                            allowCall: true\n                        }),\n                        ':' + space,\n                        generateExpression(expr.value, {\n                            precedence: Precedence.Assignment,\n                            allowIn: true,\n                            allowCall: true\n                        })\n                    ];\n                }\n            }\n            break;\n\n        case Syntax.ObjectExpression:\n            if (!expr.properties.length) {\n                result = '{}';\n                break;\n            }\n            multiline = expr.properties.length > 1;\n\n            withIndent(function () {\n                fragment = generateExpression(expr.properties[0], {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true,\n                    type: Syntax.Property\n                });\n            });\n\n            if (!multiline) {\n                // issues 4\n                // Do not transform from\n                //   dejavu.Class.declare({\n                //       method2: function () {}\n                //   });\n                // to\n                //   dejavu.Class.declare({method2: function () {\n                //       }});\n                if (!hasLineTerminator(toSourceNode(fragment).toString())) {\n                    result = [ '{', space, fragment, space, '}' ];\n                    break;\n                }\n            }\n\n            withIndent(function (indent) {\n                result = [ '{', newline, indent, fragment ];\n\n                if (multiline) {\n                    result.push(',' + newline);\n                    for (i = 1, len = expr.properties.length; i < len; i += 1) {\n                        result.push(indent, generateExpression(expr.properties[i], {\n                            precedence: Precedence.Sequence,\n                            allowIn: true,\n                            allowCall: true,\n                            type: Syntax.Property\n                        }));\n                        if (i + 1 < len) {\n                            result.push(',' + newline);\n                        }\n                    }\n                }\n            });\n\n            if (!endsWithLineTerminator(toSourceNode(result).toString())) {\n                result.push(newline);\n            }\n            result.push(base, '}');\n            break;\n\n        case Syntax.ObjectPattern:\n            if (!expr.properties.length) {\n                result = '{}';\n                break;\n            }\n\n            multiline = false;\n            if (expr.properties.length === 1) {\n                property = expr.properties[0];\n                if (property.value.type !== Syntax.Identifier) {\n                    multiline = true;\n                }\n            } else {\n                for (i = 0, len = expr.properties.length; i < len; i += 1) {\n                    property = expr.properties[i];\n                    if (!property.shorthand) {\n                        multiline = true;\n                        break;\n                    }\n                }\n            }\n            result = ['{', multiline ? newline : '' ];\n\n            withIndent(function (indent) {\n                for (i = 0, len = expr.properties.length; i < len; i += 1) {\n                    result.push(multiline ? indent : '', generateExpression(expr.properties[i], {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }));\n                    if (i + 1 < len) {\n                        result.push(',' + (multiline ? newline : space));\n                    }\n                }\n            });\n\n            if (multiline && !endsWithLineTerminator(toSourceNode(result).toString())) {\n                result.push(newline);\n            }\n            result.push(multiline ? base : '', '}');\n            break;\n\n        case Syntax.ThisExpression:\n            result = 'this';\n            break;\n\n        case Syntax.Identifier:\n            result = generateIdentifier(expr);\n            break;\n\n        case Syntax.Literal:\n            if (expr.hasOwnProperty('raw') && parse) {\n                try {\n                    raw = parse(expr.raw).body[0].expression;\n                    if (raw.type === Syntax.Literal) {\n                        if (raw.value === expr.value) {\n                            result = expr.raw;\n                            break;\n                        }\n                    }\n                } catch (e) {\n                    // not use raw property\n                }\n            }\n\n            if (expr.value === null) {\n                result = 'null';\n                break;\n            }\n\n            if (typeof expr.value === 'string') {\n                result = escapeString(expr.value);\n                break;\n            }\n\n            if (typeof expr.value === 'number') {\n                result = generateNumber(expr.value);\n                break;\n            }\n\n            if (typeof expr.value === 'boolean') {\n                result = expr.value ? 'true' : 'false';\n                break;\n            }\n\n            result = generateRegExp(expr.value);\n            break;\n\n        case Syntax.ComprehensionExpression:\n            result = [\n                '[',\n                generateExpression(expr.body, {\n                    precedence: Precedence.Assignment,\n                    allowIn: true,\n                    allowCall: true\n                })\n            ];\n\n            if (expr.blocks) {\n                for (i = 0, len = expr.blocks.length; i < len; i += 1) {\n                    fragment = generateExpression(expr.blocks[i], {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    });\n                    result = join(result, fragment);\n                }\n            }\n\n            if (expr.filter) {\n                result = join(result, 'if' + space);\n                fragment = generateExpression(expr.filter, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true\n                });\n                if (extra.moz.parenthesizedComprehensionBlock) {\n                    result = join(result, [ '(', fragment, ')' ]);\n                } else {\n                    result = join(result, fragment);\n                }\n            }\n            result.push(']');\n            break;\n\n        case Syntax.ComprehensionBlock:\n            if (expr.left.type === Syntax.VariableDeclaration) {\n                fragment = [\n                    expr.left.kind, noEmptySpace(),\n                    generateStatement(expr.left.declarations[0], {\n                        allowIn: false\n                    })\n                ];\n            } else {\n                fragment = generateExpression(expr.left, {\n                    precedence: Precedence.Call,\n                    allowIn: true,\n                    allowCall: true\n                });\n            }\n\n            fragment = join(fragment, expr.of ? 'of' : 'in');\n            fragment = join(fragment, generateExpression(expr.right, {\n                precedence: Precedence.Sequence,\n                allowIn: true,\n                allowCall: true\n            }));\n\n            if (extra.moz.parenthesizedComprehensionBlock) {\n                result = [ 'for' + space + '(', fragment, ')' ];\n            } else {\n                result = join('for' + space, fragment);\n            }\n            break;\n\n        default:\n            throw new Error('Unknown expression type: ' + expr.type);\n        }\n\n        return toSourceNode(result, expr);\n    }\n\n    function generateStatement(stmt, option) {\n        var i, len, result, node, allowIn, functionBody, directiveContext, fragment, semicolon;\n\n        allowIn = true;\n        semicolon = ';';\n        functionBody = false;\n        directiveContext = false;\n        if (option) {\n            allowIn = option.allowIn === undefined || option.allowIn;\n            if (!semicolons && option.semicolonOptional === true) {\n                semicolon = '';\n            }\n            functionBody = option.functionBody;\n            directiveContext = option.directiveContext;\n        }\n\n        switch (stmt.type) {\n        case Syntax.BlockStatement:\n            result = ['{', newline];\n\n            withIndent(function () {\n                for (i = 0, len = stmt.body.length; i < len; i += 1) {\n                    fragment = addIndent(generateStatement(stmt.body[i], {\n                        semicolonOptional: i === len - 1,\n                        directiveContext: functionBody\n                    }));\n                    result.push(fragment);\n                    if (!endsWithLineTerminator(toSourceNode(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            });\n\n            result.push(addIndent('}'));\n            break;\n\n        case Syntax.BreakStatement:\n            if (stmt.label) {\n                result = 'break ' + stmt.label.name + semicolon;\n            } else {\n                result = 'break' + semicolon;\n            }\n            break;\n\n        case Syntax.ContinueStatement:\n            if (stmt.label) {\n                result = 'continue ' + stmt.label.name + semicolon;\n            } else {\n                result = 'continue' + semicolon;\n            }\n            break;\n\n        case Syntax.DirectiveStatement:\n            if (stmt.raw) {\n                result = stmt.raw + semicolon;\n            } else {\n                result = escapeDirective(stmt.directive) + semicolon;\n            }\n            break;\n\n        case Syntax.DoWhileStatement:\n            // Because `do 42 while (cond)` is Syntax Error. We need semicolon.\n            result = join('do', maybeBlock(stmt.body));\n            result = maybeBlockSuffix(stmt.body, result);\n            result = join(result, [\n                'while' + space + '(',\n                generateExpression(stmt.test, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true\n                }),\n                ')' + semicolon\n            ]);\n            break;\n\n        case Syntax.CatchClause:\n            withIndent(function () {\n                result = [\n                    'catch' + space + '(',\n                    generateExpression(stmt.param, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')'\n                ];\n            });\n            result.push(maybeBlock(stmt.body));\n            break;\n\n        case Syntax.DebuggerStatement:\n            result = 'debugger' + semicolon;\n            break;\n\n        case Syntax.EmptyStatement:\n            result = ';';\n            break;\n\n        case Syntax.ExpressionStatement:\n            result = [generateExpression(stmt.expression, {\n                precedence: Precedence.Sequence,\n                allowIn: true,\n                allowCall: true\n            })];\n            // 12.4 '{', 'function' is not allowed in this position.\n            // wrap expression with parentheses\n            fragment = toSourceNode(result).toString();\n            if (fragment.charAt(0) === '{' || (fragment.slice(0, 8) === 'function' && ' ('.indexOf(fragment.charAt(8)) >= 0) || (directive && directiveContext && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string')) {\n                result = ['(', result, ')' + semicolon];\n            } else {\n                result.push(semicolon);\n            }\n            break;\n\n        case Syntax.VariableDeclarator:\n            if (stmt.init) {\n                result = [\n                    generateExpression(stmt.id, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    }),\n                    space,\n                    '=',\n                    space,\n                    generateExpression(stmt.init, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    })\n                ];\n            } else {\n                result = generateIdentifier(stmt.id);\n            }\n            break;\n\n        case Syntax.VariableDeclaration:\n            result = [stmt.kind];\n            // special path for\n            // var x = function () {\n            // };\n            if (stmt.declarations.length === 1 && stmt.declarations[0].init &&\n                    stmt.declarations[0].init.type === Syntax.FunctionExpression) {\n                result.push(noEmptySpace(), generateStatement(stmt.declarations[0], {\n                    allowIn: allowIn\n                }));\n            } else {\n                // VariableDeclarator is typed as Statement,\n                // but joined with comma (not LineTerminator).\n                // So if comment is attached to target node, we should specialize.\n                withIndent(function () {\n                    node = stmt.declarations[0];\n                    if (extra.comment && node.leadingComments) {\n                        result.push('\\n', addIndent(generateStatement(node, {\n                            allowIn: allowIn\n                        })));\n                    } else {\n                        result.push(noEmptySpace(), generateStatement(node, {\n                            allowIn: allowIn\n                        }));\n                    }\n\n                    for (i = 1, len = stmt.declarations.length; i < len; i += 1) {\n                        node = stmt.declarations[i];\n                        if (extra.comment && node.leadingComments) {\n                            result.push(',' + newline, addIndent(generateStatement(node, {\n                                allowIn: allowIn\n                            })));\n                        } else {\n                            result.push(',' + space, generateStatement(node, {\n                                allowIn: allowIn\n                            }));\n                        }\n                    }\n                });\n            }\n            result.push(semicolon);\n            break;\n\n        case Syntax.ThrowStatement:\n            result = [join(\n                'throw',\n                generateExpression(stmt.argument, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true\n                })\n            ), semicolon];\n            break;\n\n        case Syntax.TryStatement:\n            result = ['try', maybeBlock(stmt.block)];\n            result = maybeBlockSuffix(stmt.block, result);\n            if (stmt.handlers) {\n                // old interface\n                for (i = 0, len = stmt.handlers.length; i < len; i += 1) {\n                    result = join(result, generateStatement(stmt.handlers[i]));\n                    if (stmt.finalizer || i + 1 !== len) {\n                        result = maybeBlockSuffix(stmt.handlers[i].body, result);\n                    }\n                }\n            } else {\n                // new interface\n                if (stmt.handler) {\n                    result = join(result, generateStatement(stmt.handler));\n                    if (stmt.finalizer || stmt.guardedHandlers.length > 0) {\n                        result = maybeBlockSuffix(stmt.handler.body, result);\n                    }\n                }\n\n                for (i = 0, len = stmt.guardedHandlers.length; i < len; i += 1) {\n                    result = join(result, generateStatement(stmt.guardedHandlers[i]));\n                    if (stmt.finalizer || i + 1 !== len) {\n                        result = maybeBlockSuffix(stmt.guardedHandlers[i].body, result);\n                    }\n                }\n            }\n            if (stmt.finalizer) {\n                result = join(result, ['finally', maybeBlock(stmt.finalizer)]);\n            }\n            break;\n\n        case Syntax.SwitchStatement:\n            withIndent(function () {\n                result = [\n                    'switch' + space + '(',\n                    generateExpression(stmt.discriminant, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')' + space + '{' + newline\n                ];\n            });\n            if (stmt.cases) {\n                for (i = 0, len = stmt.cases.length; i < len; i += 1) {\n                    fragment = addIndent(generateStatement(stmt.cases[i], {semicolonOptional: i === len - 1}));\n                    result.push(fragment);\n                    if (!endsWithLineTerminator(toSourceNode(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            }\n            result.push(addIndent('}'));\n            break;\n\n        case Syntax.SwitchCase:\n            withIndent(function () {\n                if (stmt.test) {\n                    result = [\n                        join('case', generateExpression(stmt.test, {\n                            precedence: Precedence.Sequence,\n                            allowIn: true,\n                            allowCall: true\n                        })),\n                        ':'\n                    ];\n                } else {\n                    result = ['default:'];\n                }\n\n                i = 0;\n                len = stmt.consequent.length;\n                if (len && stmt.consequent[0].type === Syntax.BlockStatement) {\n                    fragment = maybeBlock(stmt.consequent[0]);\n                    result.push(fragment);\n                    i = 1;\n                }\n\n                if (i !== len && !endsWithLineTerminator(toSourceNode(result).toString())) {\n                    result.push(newline);\n                }\n\n                for (; i < len; i += 1) {\n                    fragment = addIndent(generateStatement(stmt.consequent[i], {semicolonOptional: i === len - 1 && semicolon === ''}));\n                    result.push(fragment);\n                    if (i + 1 !== len && !endsWithLineTerminator(toSourceNode(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            });\n            break;\n\n        case Syntax.IfStatement:\n            withIndent(function () {\n                result = [\n                    'if' + space + '(',\n                    generateExpression(stmt.test, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')'\n                ];\n            });\n            if (stmt.alternate) {\n                result.push(maybeBlock(stmt.consequent));\n                result = maybeBlockSuffix(stmt.consequent, result);\n                if (stmt.alternate.type === Syntax.IfStatement) {\n                    result = join(result, ['else ', generateStatement(stmt.alternate, {semicolonOptional: semicolon === ''})]);\n                } else {\n                    result = join(result, join('else', maybeBlock(stmt.alternate, semicolon === '')));\n                }\n            } else {\n                result.push(maybeBlock(stmt.consequent, semicolon === ''));\n            }\n            break;\n\n        case Syntax.ForStatement:\n            withIndent(function () {\n                result = ['for' + space + '('];\n                if (stmt.init) {\n                    if (stmt.init.type === Syntax.VariableDeclaration) {\n                        result.push(generateStatement(stmt.init, {allowIn: false}));\n                    } else {\n                        result.push(generateExpression(stmt.init, {\n                            precedence: Precedence.Sequence,\n                            allowIn: false,\n                            allowCall: true\n                        }), ';');\n                    }\n                } else {\n                    result.push(';');\n                }\n\n                if (stmt.test) {\n                    result.push(space, generateExpression(stmt.test, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }), ';');\n                } else {\n                    result.push(';');\n                }\n\n                if (stmt.update) {\n                    result.push(space, generateExpression(stmt.update, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }), ')');\n                } else {\n                    result.push(')');\n                }\n            });\n\n            result.push(maybeBlock(stmt.body, semicolon === ''));\n            break;\n\n        case Syntax.ForInStatement:\n            result = ['for' + space + '('];\n            withIndent(function () {\n                if (stmt.left.type === Syntax.VariableDeclaration) {\n                    withIndent(function () {\n                        result.push(stmt.left.kind + noEmptySpace(), generateStatement(stmt.left.declarations[0], {\n                            allowIn: false\n                        }));\n                    });\n                } else {\n                    result.push(generateExpression(stmt.left, {\n                        precedence: Precedence.Call,\n                        allowIn: true,\n                        allowCall: true\n                    }));\n                }\n\n                result = join(result, 'in');\n                result = [join(\n                    result,\n                    generateExpression(stmt.right, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    })\n                ), ')'];\n            });\n            result.push(maybeBlock(stmt.body, semicolon === ''));\n            break;\n\n        case Syntax.LabeledStatement:\n            result = [stmt.label.name + ':', maybeBlock(stmt.body, semicolon === '')];\n            break;\n\n        case Syntax.Program:\n            len = stmt.body.length;\n            result = [safeConcatenation && len > 0 ? '\\n' : ''];\n            for (i = 0; i < len; i += 1) {\n                fragment = addIndent(\n                    generateStatement(stmt.body[i], {\n                        semicolonOptional: !safeConcatenation && i === len - 1,\n                        directiveContext: true\n                    })\n                );\n                result.push(fragment);\n                if (i + 1 < len && !endsWithLineTerminator(toSourceNode(fragment).toString())) {\n                    result.push(newline);\n                }\n            }\n            break;\n\n        case Syntax.FunctionDeclaration:\n            result = [(stmt.generator && !extra.moz.starlessGenerator ? 'function* ' : 'function '),\n                      generateIdentifier(stmt.id),\n                      generateFunctionBody(stmt)];\n            break;\n\n        case Syntax.ReturnStatement:\n            if (stmt.argument) {\n                result = [join(\n                    'return',\n                    generateExpression(stmt.argument, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    })\n                ), semicolon];\n            } else {\n                result = ['return' + semicolon];\n            }\n            break;\n\n        case Syntax.WhileStatement:\n            withIndent(function () {\n                result = [\n                    'while' + space + '(',\n                    generateExpression(stmt.test, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')'\n                ];\n            });\n            result.push(maybeBlock(stmt.body, semicolon === ''));\n            break;\n\n        case Syntax.WithStatement:\n            withIndent(function () {\n                result = [\n                    'with' + space + '(',\n                    generateExpression(stmt.object, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')'\n                ];\n            });\n            result.push(maybeBlock(stmt.body, semicolon === ''));\n            break;\n\n        default:\n            throw new Error('Unknown statement type: ' + stmt.type);\n        }\n\n        // Attach comments\n\n        if (extra.comment) {\n            result = addCommentsToStatement(stmt, result);\n        }\n\n        fragment = toSourceNode(result).toString();\n        if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' &&  fragment.charAt(fragment.length - 1) === '\\n') {\n            result = toSourceNode(result).replaceRight(/\\s+$/, '');\n        }\n\n        return toSourceNode(result, stmt);\n    }\n\n    function generate(node, options) {\n        var defaultOptions = getDefaultOptions(), result, pair;\n\n        if (options != null) {\n            // Obsolete options\n            //\n            //   `options.indent`\n            //   `options.base`\n            //\n            // Instead of them, we can use `option.format.indent`.\n            if (typeof options.indent === 'string') {\n                defaultOptions.format.indent.style = options.indent;\n            }\n            if (typeof options.base === 'number') {\n                defaultOptions.format.indent.base = options.base;\n            }\n            options = updateDeeply(defaultOptions, options);\n            indent = options.format.indent.style;\n            if (typeof options.base === 'string') {\n                base = options.base;\n            } else {\n                base = stringRepeat(indent, options.format.indent.base);\n            }\n        } else {\n            options = defaultOptions;\n            indent = options.format.indent.style;\n            base = stringRepeat(indent, options.format.indent.base);\n        }\n        json = options.format.json;\n        renumber = options.format.renumber;\n        hexadecimal = json ? false : options.format.hexadecimal;\n        quotes = json ? 'double' : options.format.quotes;\n        escapeless = options.format.escapeless;\n        newline = options.format.newline;\n        space = options.format.space;\n        if (options.format.compact) {\n            newline = space = indent = base = '';\n        }\n        parentheses = options.format.parentheses;\n        semicolons = options.format.semicolons;\n        safeConcatenation = options.format.safeConcatenation;\n        directive = options.directive;\n        parse = json ? null : options.parse;\n        sourceMap = options.sourceMap;\n        extra = options;\n\n        if (sourceMap) {\n            if (!exports.browser) {\n                // We assume environment is node.js\n                // And prevent from including source-map by browserify\n                SourceNode = require('source-map').SourceNode;\n            } else {\n                SourceNode = global.sourceMap.SourceNode;\n            }\n        } else {\n            SourceNode = SourceNodeMock;\n        }\n\n        switch (node.type) {\n        case Syntax.BlockStatement:\n        case Syntax.BreakStatement:\n        case Syntax.CatchClause:\n        case Syntax.ContinueStatement:\n        case Syntax.DirectiveStatement:\n        case Syntax.DoWhileStatement:\n        case Syntax.DebuggerStatement:\n        case Syntax.EmptyStatement:\n        case Syntax.ExpressionStatement:\n        case Syntax.ForStatement:\n        case Syntax.ForInStatement:\n        case Syntax.FunctionDeclaration:\n        case Syntax.IfStatement:\n        case Syntax.LabeledStatement:\n        case Syntax.Program:\n        case Syntax.ReturnStatement:\n        case Syntax.SwitchStatement:\n        case Syntax.SwitchCase:\n        case Syntax.ThrowStatement:\n        case Syntax.TryStatement:\n        case Syntax.VariableDeclaration:\n        case Syntax.VariableDeclarator:\n        case Syntax.WhileStatement:\n        case Syntax.WithStatement:\n            result = generateStatement(node);\n            break;\n\n        case Syntax.AssignmentExpression:\n        case Syntax.ArrayExpression:\n        case Syntax.ArrayPattern:\n        case Syntax.BinaryExpression:\n        case Syntax.CallExpression:\n        case Syntax.ConditionalExpression:\n        case Syntax.FunctionExpression:\n        case Syntax.Identifier:\n        case Syntax.Literal:\n        case Syntax.LogicalExpression:\n        case Syntax.MemberExpression:\n        case Syntax.NewExpression:\n        case Syntax.ObjectExpression:\n        case Syntax.ObjectPattern:\n        case Syntax.Property:\n        case Syntax.SequenceExpression:\n        case Syntax.ThisExpression:\n        case Syntax.UnaryExpression:\n        case Syntax.UpdateExpression:\n        case Syntax.YieldExpression:\n\n            result = generateExpression(node, {\n                precedence: Precedence.Sequence,\n                allowIn: true,\n                allowCall: true\n            });\n            break;\n\n        default:\n            throw new Error('Unknown node type: ' + node.type);\n        }\n\n        if (!sourceMap) {\n            return result.toString();\n        }\n\n        pair = result.toStringWithSourceMap({\n            file: options.file,\n            sourceRoot: options.sourceMapRoot\n        });\n\n        if (options.sourceMapWithCode) {\n            return pair;\n        }\n        return pair.map.toString();\n    }\n\n    FORMAT_MINIFY = {\n        indent: {\n            style: '',\n            base: 0\n        },\n        renumber: true,\n        hexadecimal: true,\n        quotes: 'auto',\n        escapeless: true,\n        compact: true,\n        parentheses: false,\n        semicolons: false\n    };\n\n    FORMAT_DEFAULTS = getDefaultOptions().format;\n\n    exports.version = require('./package.json').version;\n    exports.generate = generate;\n    exports.attachComments = estraverse.attachComments;\n    exports.browser = false;\n    exports.FORMAT_MINIFY = FORMAT_MINIFY;\n    exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;\n}());\n/* vim: set sw=4 ts=4 et tw=80 : */\n"]}