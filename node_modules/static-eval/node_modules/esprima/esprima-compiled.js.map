{"version":3,"sources":["esprima.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDAuCC,UAAU,IAAV,CAAgB,OAAhB,CAAyB,CACtB,a;;AAIA,GAAI,MAAO,OAAP,GAAkB,UAAlB,EAAgC,OAAO,GAA3C,CAAgD,CAC5C,OAAO,CAAC,SAAD,CAAP,CAAoB,OAApB,EACH,CAFD,IAEO,IAAI,MAAO,QAAP,GAAmB,WAAvB,CAAoC,CACvC,QAAQ,OAAR,EACH,CAFM,IAEA,CACH,QAAS,KAAK,OAAL,CAAe,EAAxB,EACH,CACJ,CAZA,YAYO,SAAU,OAAV,CAAmB,CACvB,aAEA,GAAI,MAAJ,CACI,SADJ,CAEI,MAFJ,CAGI,YAHJ,CAII,QAJJ,CAKI,KALJ,CAMI,MANJ,CAOI,MAPJ,CAQI,KARJ,CASI,UATJ,CAUI,SAVJ,CAWI,MAXJ,CAYI,MAZJ,CAaI,KAbJ,CAcI,KAdJ,CAgBA,MAAQ,CACJ,eAAgB,CADZ,CAEJ,IAAK,CAFD,CAGJ,WAAY,CAHR,CAIJ,QAAS,CAJL,CAKJ,YAAa,CALT,CAMJ,eAAgB,CANZ,CAOJ,WAAY,CAPR,CAQJ,cAAe,CARX,CAAR,CAWA,UAAY,EAAZ,CACA,UAAU,MAAM,cAAhB,EAAkC,SAAlC,CACA,UAAU,MAAM,GAAhB,EAAuB,OAAvB,CACA,UAAU,MAAM,UAAhB,EAA8B,YAA9B,CACA,UAAU,MAAM,OAAhB,EAA2B,SAA3B,CACA,UAAU,MAAM,WAAhB,EAA+B,MAA/B,CACA,UAAU,MAAM,cAAhB,EAAkC,SAAlC,CACA,UAAU,MAAM,UAAhB,EAA8B,YAA9B,CACA,UAAU,MAAM,aAAhB,EAAiC,QAAjC,CAEA,OAAS,CACL,qBAAsB,sBADjB,CAEL,gBAAiB,iBAFZ,CAGL,eAAgB,gBAHX,CAIL,iBAAkB,kBAJb,CAKL,eAAgB,gBALX,CAML,eAAgB,gBANX,CAOL,YAAa,aAPR,CAQL,sBAAuB,uBARlB,CASL,kBAAmB,mBATd,CAUL,iBAAkB,kBAVb,CAWL,kBAAmB,mBAXd,CAYL,eAAgB,gBAZX,CAaL,oBAAqB,qBAbhB,CAcL,aAAc,cAdT,CAeL,eAAgB,gBAfX,CAgBL,oBAAqB,qBAhBhB,CAiBL,mBAAoB,oBAjBf,CAkBL,WAAY,YAlBP,CAmBL,YAAa,aAnBR,CAoBL,QAAS,SApBJ,CAqBL,iBAAkB,kBArBb,CAsBL,kBAAmB,mBAtBd,CAuBL,iBAAkB,kBAvBb,CAwBL,cAAe,eAxBV,CAyBL,iBAAkB,kBAzBb,CA0BL,QAAS,SA1BJ,CA2BL,SAAU,UA3BL,CA4BL,gBAAiB,iBA5BZ,CA6BL,mBAAoB,oBA7Bf,CA8BL,gBAAiB,iBA9BZ,CA+BL,WAAY,YA/BP,CAgCL,eAAgB,gBAhCX,CAiCL,eAAgB,gBAjCX,CAkCL,aAAc,cAlCT,CAmCL,gBAAiB,iBAnCZ,CAoCL,iBAAkB,kBApCb,CAqCL,oBAAqB,qBArChB,CAsCL,mBAAoB,oBAtCf,CAuCL,eAAgB,gBAvCX,CAwCL,cAAe,eAxCV,CAAT,CA2CA,aAAe,CACX,KAAM,CADK,CAEX,IAAK,CAFM,CAGX,IAAK,CAHM,CAAf,C;AAOA,SAAW,CACP,gBAAkB,qBADX,CAEP,iBAAmB,mBAFZ,CAGP,iBAAmB,mBAHZ,CAIP,qBAAuB,uBAJhB,CAKP,mBAAqB,0BALd,CAMP,cAAgB,yBANT,CAOP,kBAAoB,6BAPb,CAQP,cAAe,4BARR,CASP,mBAAqB,uCATd,CAUP,uBAAyB,sCAVlB,CAWP,kBAAoB,kCAXb,CAYP,yBAA0B,kDAZnB,CAaP,iBAAmB,oCAbZ,CAcP,aAAc,wBAdP,CAeP,cAAe,qCAfR,CAgBP,gBAAiB,4BAhBV,CAiBP,aAAc,yBAjBP,CAkBP,cAAe,0BAlBR,CAmBP,eAAiB,mDAnBV,CAoBP,oBAAsB,4DApBf,CAqBP,cAAgB,2DArBT,CAsBP,gBAAkB,gEAtBX,CAuBP,gBAAiB,6DAvBV,CAwBP,mBAAqB,2DAxBd,CAyBP,mBAAqB,gDAzBd,CA0BP,aAAe,qDA1BR,CA2BP,wBAA0B,sEA3BnB,CA4BP,qBAAuB,2EA5BhB,CA6BP,eAAiB,2EA7BV,CA8BP,oBAAsB,+DA9Bf,CA+BP,iBAAmB,mFA/BZ,CAgCP,gBAAkB,kFAhCX,CAiCP,mBAAqB,4CAjCd,CAAX,C;AAqCA,MAAQ,CACJ,wBAAyB,GAAI,OAAJ,CAAW,o5BAAX,CADrB,CAEJ,uBAAwB,GAAI,OAAJ,CAAW,ulCAAX,CAFpB,CAAR,C;;;;AAUA,QAAS,OAAT,CAAgB,SAAhB,CAA2B,OAA3B,CAAoC,CAChC,GAAI,CAAC,SAAL,CAAgB,CACZ,KAAM,IAAI,MAAJ,CAAU,WAAa,OAAvB,CAAN,CACH,CACJ,CAED,QAAS,YAAT,CAAqB,IAArB,CAA2B,EAA3B,CAA+B,CAC3B,MAAO,QAAO,KAAP,CAAa,IAAb,CAAmB,EAAnB,CAAP,CACH,CAED,GAAI,MAAO,UAAU,CAAV,CAAP,GAAwB,WAA5B,CAAyC,CACrC,YAAc,QAAS,iBAAT,CAA0B,IAA1B,CAAgC,EAAhC,CAAoC,CAC9C,MAAO,QAAO,KAAP,CAAa,IAAb,CAAmB,EAAnB,EAAuB,IAAvB,CAA4B,EAA5B,CAAP,CACH,CAFD,CAGH,CAED,QAAS,eAAT,CAAwB,EAAxB,CAA4B,CACxB,MAAO,aAAa,OAAb,CAAqB,EAArB,GAA4B,CAAnC,CACH,CAED,QAAS,WAAT,CAAoB,EAApB,CAAwB,CACpB,MAAO,yBAAyB,OAAzB,CAAiC,EAAjC,GAAwC,CAA/C,CACH,CAED,QAAS,aAAT,CAAsB,EAAtB,CAA0B,CACtB,MAAO,WAAW,OAAX,CAAmB,EAAnB,GAA0B,CAAjC,CACH,C;AAKD,QAAS,aAAT,CAAsB,EAAtB,CAA0B,CACtB,MAAQ,MAAO,GAAR,EAAiB,KAAO,IAAxB,EAAsC,KAAO,QAA7C,EACF,KAAO,IADL,EACmB,KAAO,GAD1B,EAEF,GAAG,UAAH,CAAc,CAAd,GAAoB,MAApB,EACA,oBAAyG,OAAzG,CAAiH,EAAjH,GAAwH,CAH7H,CAIH,C;AAID,QAAS,iBAAT,CAA0B,EAA1B,CAA8B,CAC1B,MAAQ,MAAO,IAAP,EAAe,KAAO,IAAtB,EAA8B,KAAO,QAArC,EAAiD,KAAO,QAAhE,CACH,C;AAID,QAAS,kBAAT,CAA2B,EAA3B,CAA+B,CAC3B,MAAQ,MAAO,GAAR,EAAiB,KAAO,GAAxB,EAAiC,KAAO,IAAxC,EACF,IAAM,GAAN,EAAa,IAAM,GADjB,EAC0B,IAAM,GAAN,EAAa,IAAM,GAD7C,EAED,GAAG,UAAH,CAAc,CAAd,GAAoB,IAArB,EAA8B,MAAM,uBAAN,CAA8B,IAA9B,CAAmC,EAAnC,CAFnC,CAGH,CAED,QAAS,iBAAT,CAA0B,EAA1B,CAA8B,CAC1B,MAAQ,MAAO,GAAR,EAAiB,KAAO,GAAxB,EAAiC,KAAO,IAAxC,EACF,IAAM,GAAN,EAAa,IAAM,GADjB,EAC0B,IAAM,GAAN,EAAa,IAAM,GAD7C,EAED,IAAM,GAAP,EAAgB,IAAM,GAFpB,EAGD,GAAG,UAAH,CAAc,CAAd,GAAoB,IAArB,EAA8B,MAAM,sBAAN,CAA6B,IAA7B,CAAkC,EAAlC,CAHnC,CAIH,C;AAID,QAAS,qBAAT,CAA8B,EAA9B,CAAkC,CAC9B,OAAQ,EAAR,E;AAGA,IAAK,OAAL,CACA,IAAK,MAAL,CACA,IAAK,QAAL,CACA,IAAK,SAAL,CACA,IAAK,QAAL,CACA,IAAK,OAAL,CACI,MAAO,KAAP,CATJ,CAYA,MAAO,MAAP,CACH,CAED,QAAS,yBAAT,CAAkC,EAAlC,CAAsC,CAClC,OAAQ,EAAR,E;AAGA,IAAK,YAAL,CACA,IAAK,WAAL,CACA,IAAK,SAAL,CACA,IAAK,SAAL,CACA,IAAK,WAAL,CACA,IAAK,QAAL,CACA,IAAK,QAAL,CACA,IAAK,OAAL,CACA,IAAK,KAAL,CACI,MAAO,KAAP,CAZJ,CAeA,MAAO,MAAP,CACH,CAED,QAAS,iBAAT,CAA0B,EAA1B,CAA8B,CAC1B,MAAO,MAAO,MAAP,EAAiB,KAAO,WAA/B,CACH,C;AAID,QAAS,UAAT,CAAmB,EAAnB,CAAuB,CACnB,GAAI,SAAU,KAAd,CACA,OAAQ,GAAG,MAAX,EACA,IAAK,EAAL,CACI,QAAW,KAAO,IAAR,EAAkB,KAAO,IAAzB,EAAmC,KAAO,IAApD,CACA,MACJ,IAAK,EAAL,CACI,QAAW,KAAO,KAAR,EAAmB,KAAO,KAA1B,EAAqC,KAAO,KAA5C,EAAuD,KAAO,KAAxE,CACA,MACJ,IAAK,EAAL,CACI,QAAW,KAAO,MAAR,EAAoB,KAAO,MAA3B,EAAuC,KAAO,MAA9C,EAA0D,KAAO,MAAjE,EAA6E,KAAO,MAA9F,CACA,MACJ,IAAK,EAAL,CACI,QAAW,KAAO,OAAR,EAAqB,KAAO,OAA5B,EAAyC,KAAO,OAAhD,EAA6D,KAAO,OAA9E,CACA,MACJ,IAAK,EAAL,CACI,QAAW,KAAO,QAAR,EAAsB,KAAO,QAA7B,EAA2C,KAAO,QAAlD,EAAgE,KAAO,QAAjF,CACA,MACJ,IAAK,EAAL,CACI,QAAW,KAAO,SAAR,EAAuB,KAAO,SAAxC,CACA,MACJ,IAAK,EAAL,CACI,QAAW,KAAO,UAAR,EAAwB,KAAO,UAA/B,EAA+C,KAAO,UAAhE,CACA,MACJ,IAAK,GAAL,CACI,QAAW,KAAO,YAAlB,CACA,MAxBJ,CA2BA,GAAI,OAAJ,CAAa,CACT,MAAO,KAAP,CACH,CAED,OAAQ,EAAR,E;;AAGA,IAAK,OAAL,CACI,MAAO,KAAP,C;AAGJ,IAAK,OAAL,CACA,IAAK,KAAL,CACI,MAAO,KAAP,CATJ,CAYA,GAAI,QAAU,yBAAyB,EAAzB,CAAd,CAA4C,CACxC,MAAO,KAAP,CACH,CAED,MAAO,sBAAqB,EAArB,CAAP,CACH,C;AAID,QAAS,YAAT,EAAuB,CACnB,GAAI,GAAJ,CAAQ,YAAR,CAAsB,WAAtB,CAEA,aAAe,KAAf,CACA,YAAc,KAAd,CAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,KAAP,CAAL,CAEA,GAAI,WAAJ,CAAiB,CACb,GAAK,OAAO,OAAP,CAAL,CACA,GAAI,iBAAiB,EAAjB,CAAJ,CAA0B,CACtB,YAAc,KAAd,CACA,GAAI,KAAO,IAAP,EAAe,OAAO,KAAP,IAAkB,IAArC,CAA2C,CACvC,EAAE,KAAF,CACH,CACD,EAAE,UAAF,CACA,UAAY,KAAZ,CACH,CACJ,CAVD,IAUO,IAAI,YAAJ,CAAkB,CACrB,GAAI,iBAAiB,EAAjB,CAAJ,CAA0B,CACtB,GAAI,KAAO,IAAP,EAAe,OAAO,MAAQ,CAAf,IAAsB,IAAzC,CAA+C,CAC3C,EAAE,KAAF,CACH,CACD,EAAE,UAAF,CACA,EAAE,KAAF,CACA,UAAY,KAAZ,CACA,GAAI,OAAS,MAAb,CAAqB,CACjB,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACJ,CAVD,IAUO,CACH,GAAK,OAAO,OAAP,CAAL,CACA,GAAI,OAAS,MAAb,CAAqB,CACjB,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACD,GAAI,KAAO,GAAX,CAAgB,CACZ,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,KAAO,GAAX,CAAgB,CACZ,EAAE,KAAF,CACA,aAAe,KAAf,CACH,CACJ,CACJ,CACJ,CAxBM,IAwBA,IAAI,KAAO,GAAX,CAAgB,CACnB,GAAK,OAAO,MAAQ,CAAf,CAAL,CACA,GAAI,KAAO,GAAX,CAAgB,CACZ,OAAS,CAAT,CACA,YAAc,IAAd,CACH,CAHD,IAGO,IAAI,KAAO,GAAX,CAAgB,CACnB,OAAS,CAAT,CACA,aAAe,IAAf,CACA,GAAI,OAAS,MAAb,CAAqB,CACjB,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACJ,CANM,IAMA,CACH,MACH,CACJ,CAdM,IAcA,IAAI,aAAa,EAAb,CAAJ,CAAsB,CACzB,EAAE,KAAF,CACH,CAFM,IAEA,IAAI,iBAAiB,EAAjB,CAAJ,CAA0B,CAC7B,EAAE,KAAF,CACA,GAAI,KAAQ,IAAR,EAAgB,OAAO,KAAP,IAAkB,IAAtC,CAA4C,CACxC,EAAE,KAAF,CACH,CACD,EAAE,UAAF,CACA,UAAY,KAAZ,CACH,CAPM,IAOA,CACH,MACH,CACJ,CACJ,CAED,QAAS,cAAT,CAAuB,MAAvB,CAA+B,CAC3B,GAAI,EAAJ,CAAO,GAAP,CAAY,EAAZ,CAAgB,KAAO,CAAvB,CAEA,IAAO,SAAW,GAAZ,CAAmB,CAAnB,CAAuB,CAA7B,CACA,IAAK,EAAI,CAAT,CAAY,EAAI,GAAhB,CAAqB,EAAE,CAAvB,CAA0B,CACtB,GAAI,MAAQ,MAAR,EAAkB,WAAW,OAAO,KAAP,CAAX,CAAtB,CAAiD,CAC7C,GAAK,OAAO,OAAP,CAAL,CACA,KAAO,KAAO,EAAP,CAAY,mBAAmB,OAAnB,CAA2B,GAAG,WAAH,EAA3B,CAAnB,CACH,CAHD,IAGO,CACH,MAAO,EAAP,CACH,CACJ,CACD,MAAO,QAAO,YAAP,CAAoB,IAApB,CAAP,CACH,CAED,QAAS,eAAT,EAA0B,CACtB,GAAI,GAAJ,CAAQ,KAAR,CAAe,EAAf,CAAmB,OAAnB,CAEA,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,CAAC,kBAAkB,EAAlB,CAAL,CAA4B,CACxB,OACH,CAED,MAAQ,KAAR,CACA,GAAI,KAAO,IAAX,CAAiB,CACb,EAAE,KAAF,CACA,GAAI,OAAO,KAAP,IAAkB,GAAtB,CAA2B,CACvB,OACH,CACD,EAAE,KAAF,CACA,QAAU,KAAV,CACA,GAAK,cAAc,GAAd,CAAL,CACA,GAAI,EAAJ,CAAQ,CACJ,GAAI,KAAO,IAAP,EAAe,CAAC,kBAAkB,EAAlB,CAApB,CAA2C,CACvC,OACH,CACD,GAAK,EAAL,CACH,CALD,IAKO,CACH,MAAQ,OAAR,CACA,GAAK,GAAL,CACH,CACJ,CAjBD,IAiBO,CACH,GAAK,OAAO,OAAP,CAAL,CACH,CAED,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,CAAC,iBAAiB,EAAjB,CAAL,CAA2B,CACvB,MACH,CACD,GAAI,KAAO,IAAX,CAAiB,CACb,EAAE,KAAF,CACA,GAAI,OAAO,KAAP,IAAkB,GAAtB,CAA2B,CACvB,OACH,CACD,EAAE,KAAF,CACA,QAAU,KAAV,CACA,GAAK,cAAc,GAAd,CAAL,CACA,GAAI,EAAJ,CAAQ,CACJ,GAAI,KAAO,IAAP,EAAe,CAAC,iBAAiB,EAAjB,CAApB,CAA0C,CACtC,OACH,CACD,IAAM,EAAN,CACH,CALD,IAKO,CACH,MAAQ,OAAR,CACA,IAAM,GAAN,CACH,CACJ,CAjBD,IAiBO,CACH,IAAM,OAAO,OAAP,CAAN,CACH,CACJ,C;;AAID,GAAI,GAAG,MAAH,GAAc,CAAlB,CAAqB,CACjB,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,EAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CAED,GAAI,UAAU,EAAV,CAAJ,CAAmB,CACf,MAAO,CACH,KAAM,MAAM,OADT,CAEH,MAAO,EAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,C;AAID,GAAI,KAAO,MAAX,CAAmB,CACf,MAAO,CACH,KAAM,MAAM,WADT,CAEH,MAAO,EAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,C;AAID,GAAI,KAAO,MAAP,EAAiB,KAAO,OAA5B,CAAqC,CACjC,MAAO,CACH,KAAM,MAAM,cADT,CAEH,MAAO,EAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CAED,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,EAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,C;AAID,QAAS,eAAT,EAA0B,CACtB,GAAI,OAAQ,KAAZ,CACI,IAAM,OAAO,KAAP,CADV,CAEI,GAFJ,CAGI,GAHJ,CAII,GAJJ,C;AAQA,GAAI,MAAQ,GAAR,EAAe,MAAQ,GAAvB,EAA8B,MAAQ,GAA1C,CAA+C,CAC3C,EAAE,KAAF,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,GAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CAED,GAAI,MAAQ,GAAR,EAAe,MAAQ,GAAvB,EAA8B,MAAQ,GAA1C,CAA+C,CAC3C,EAAE,KAAF,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,GAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,C;;AAKD,IAAM,OAAO,MAAQ,CAAf,CAAN,CACA,GAAI,MAAQ,GAAR,EAAe,CAAC,eAAe,GAAf,CAApB,CAAyC,CACrC,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,OAAO,OAAP,CAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,C;AAID,IAAM,OAAO,MAAQ,CAAf,CAAN,CACA,IAAM,OAAO,MAAQ,CAAf,CAAN,C;AAIA,GAAI,MAAQ,GAAR,EAAe,MAAQ,GAAvB,EAA8B,MAAQ,GAA1C,CAA+C,CAC3C,GAAI,MAAQ,GAAZ,CAAiB,CACb,OAAS,CAAT,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,MAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CACJ,C;AAID,GAAI,MAAQ,GAAR,EAAe,MAAQ,GAAvB,EAA8B,MAAQ,GAA1C,CAA+C,CAC3C,OAAS,CAAT,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,KAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CAED,GAAI,MAAQ,GAAR,EAAe,MAAQ,GAAvB,EAA8B,MAAQ,GAA1C,CAA+C,CAC3C,OAAS,CAAT,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,KAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CAED,GAAI,MAAQ,GAAR,EAAe,MAAQ,GAAvB,EAA8B,MAAQ,GAA1C,CAA+C,CAC3C,OAAS,CAAT,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,KAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CAED,GAAI,MAAQ,GAAR,EAAe,MAAQ,GAAvB,EAA8B,MAAQ,GAA1C,CAA+C,CAC3C,OAAS,CAAT,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,KAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CAED,GAAI,MAAQ,GAAR,EAAe,MAAQ,GAAvB,EAA8B,MAAQ,GAA1C,CAA+C,CAC3C,OAAS,CAAT,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,KAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,C;;AAKD,GAAI,MAAQ,GAAZ,CAAiB,CACb,GAAI,eAAe,OAAf,CAAuB,GAAvB,GAA+B,CAAnC,CAAsC,CAClC,OAAS,CAAT,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,IAAM,GAFV,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CACJ,CAED,GAAI,MAAQ,GAAR,EAAgB,SAAS,OAAT,CAAiB,GAAjB,GAAyB,CAA7C,CAAiD,CAC7C,GAAI,SAAS,OAAT,CAAiB,GAAjB,GAAyB,CAA7B,CAAgC,CAC5B,OAAS,CAAT,CACA,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,IAAM,GAFV,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CACJ,C;AAID,GAAI,oBAAoB,OAApB,CAA4B,GAA5B,GAAoC,CAAxC,CAA2C,CACvC,MAAO,CACH,KAAM,MAAM,UADT,CAEH,MAAO,OAAO,OAAP,CAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CACJ,C;AAID,QAAS,mBAAT,EAA8B,CAC1B,GAAI,OAAJ,CAAY,KAAZ,CAAmB,EAAnB,CAEA,GAAK,OAAO,KAAP,CAAL,CACA,OAAO,eAAe,EAAf,GAAuB,KAAO,GAArC,CACI,oEADJ,EAGA,MAAQ,KAAR,CACA,OAAS,EAAT,CACA,GAAI,KAAO,GAAX,CAAgB,CACZ,OAAS,OAAO,OAAP,CAAT,CACA,GAAK,OAAO,KAAP,CAAL,C;;AAIA,GAAI,SAAW,GAAf,CAAoB,CAChB,GAAI,KAAO,GAAP,EAAc,KAAO,GAAzB,CAA8B,CAC1B,QAAU,OAAO,OAAP,CAAV,CACA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,CAAC,WAAW,EAAX,CAAL,CAAqB,CACjB,MACH,CACD,QAAU,OAAO,OAAP,CAAV,CACH,CAED,GAAI,OAAO,MAAP,EAAiB,CAArB,CAAwB,C;AAEpB,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CAED,GAAI,MAAQ,MAAZ,CAAoB,CAChB,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,kBAAkB,EAAlB,CAAJ,CAA2B,CACvB,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACJ,CACD,MAAO,CACH,KAAM,MAAM,cADT,CAEH,MAAO,SAAS,MAAT,CAAiB,EAAjB,CAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,CA5BD,IA4BO,IAAI,aAAa,EAAb,CAAJ,CAAsB,CACzB,QAAU,OAAO,OAAP,CAAV,CACA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,CAAC,aAAa,EAAb,CAAL,CAAuB,CACnB,MACH,CACD,QAAU,OAAO,OAAP,CAAV,CACH,CAED,GAAI,MAAQ,MAAZ,CAAoB,CAChB,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,kBAAkB,EAAlB,GAAyB,eAAe,EAAf,CAA7B,CAAiD,CAC7C,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACJ,CACD,MAAO,CACH,KAAM,MAAM,cADT,CAEH,MAAO,SAAS,MAAT,CAAiB,CAAjB,CAFJ,CAGH,MAAO,IAHJ,CAIH,WAAY,UAJT,CAKH,UAAW,SALR,CAMH,MAAO,CAAC,KAAD,CAAQ,KAAR,CANJ,CAAP,CAQH,C;AAGD,GAAI,eAAe,EAAf,CAAJ,CAAwB,CACpB,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACJ,CAED,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,CAAC,eAAe,EAAf,CAAL,CAAyB,CACrB,MACH,CACD,QAAU,OAAO,OAAP,CAAV,CACH,CACJ,CAED,GAAI,KAAO,GAAX,CAAgB,CACZ,QAAU,OAAO,OAAP,CAAV,CACA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,CAAC,eAAe,EAAf,CAAL,CAAyB,CACrB,MACH,CACD,QAAU,OAAO,OAAP,CAAV,CACH,CACJ,CAED,GAAI,KAAO,GAAP,EAAc,KAAO,GAAzB,CAA8B,CAC1B,QAAU,OAAO,OAAP,CAAV,CAEA,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,KAAO,GAAP,EAAc,KAAO,GAAzB,CAA8B,CAC1B,QAAU,OAAO,OAAP,CAAV,CACH,CAED,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,eAAe,EAAf,CAAJ,CAAwB,CACpB,QAAU,OAAO,OAAP,CAAV,CACA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,CAAC,eAAe,EAAf,CAAL,CAAyB,CACrB,MACH,CACD,QAAU,OAAO,OAAP,CAAV,CACH,CACJ,CATD,IASO,CACH,GAAK,aAAe,EAApB,CACA,GAAI,OAAS,MAAb,CAAqB,CACjB,GAAK,OAAL,CACH,CACD,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACJ,CAED,GAAI,MAAQ,MAAZ,CAAoB,CAChB,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,kBAAkB,EAAlB,CAAJ,CAA2B,CACvB,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACJ,CAED,MAAO,CACH,KAAM,MAAM,cADT,CAEH,MAAO,WAAW,MAAX,CAFJ,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAKH,MAAO,CAAC,KAAD,CAAQ,KAAR,CALJ,CAAP,CAOH,C;AAID,QAAS,kBAAT,EAA6B,CACzB,GAAI,KAAM,EAAV,CAAc,KAAd,CAAqB,KAArB,CAA4B,EAA5B,CAAgC,IAAhC,CAAsC,SAAtC,CAAiD,OAAjD,CAA0D,MAAQ,KAAlE,CAEA,MAAQ,OAAO,KAAP,CAAR,CACA,OAAQ,QAAU,IAAV,EAAkB,QAAU,GAApC,CACI,yCADJ,EAGA,MAAQ,KAAR,CACA,EAAE,KAAF,CAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,OAAP,CAAL,CAEA,GAAI,KAAO,KAAX,CAAkB,CACd,MAAQ,EAAR,CACA,MACH,CAHD,IAGO,IAAI,KAAO,IAAX,CAAiB,CACpB,GAAK,OAAO,OAAP,CAAL,CACA,GAAI,CAAC,iBAAiB,EAAjB,CAAL,CAA2B,CACvB,OAAQ,EAAR,EACA,IAAK,GAAL,CACI,KAAO,IAAP,CACA,MACJ,IAAK,GAAL,CACI,KAAO,IAAP,CACA,MACJ,IAAK,GAAL,CACI,KAAO,IAAP,CACA,MACJ,IAAK,GAAL,CACA,IAAK,GAAL,CACI,QAAU,KAAV,CACA,UAAY,cAAc,EAAd,CAAZ,CACA,GAAI,SAAJ,CAAe,CACX,KAAO,SAAP,CACH,CAFD,IAEO,CACH,MAAQ,OAAR,CACA,KAAO,EAAP,CACH,CACD,MACJ,IAAK,GAAL,CACI,KAAO,IAAP,CACA,MACJ,IAAK,GAAL,CACI,KAAO,IAAP,CACA,MACJ,IAAK,GAAL,CACI,KAAO,MAAP,CACA,MAEJ,QACI,GAAI,aAAa,EAAb,CAAJ,CAAsB,CAClB,KAAO,WAAW,OAAX,CAAmB,EAAnB,CAAP,C;AAGA,GAAI,OAAS,CAAb,CAAgB,CACZ,MAAQ,IAAR,CACH,CAED,GAAI,MAAQ,MAAR,EAAkB,aAAa,OAAO,KAAP,CAAb,CAAtB,CAAmD,CAC/C,MAAQ,IAAR,CACA,KAAO,KAAO,CAAP,CAAW,WAAW,OAAX,CAAmB,OAAO,OAAP,CAAnB,CAAlB,C;;AAIA,GAAI,OAAO,OAAP,CAAe,EAAf,GAAsB,CAAtB,EACI,MAAQ,MADZ,EAEI,aAAa,OAAO,KAAP,CAAb,CAFR,CAEqC,CACjC,KAAO,KAAO,CAAP,CAAW,WAAW,OAAX,CAAmB,OAAO,OAAP,CAAnB,CAAlB,CACH,CACJ,CACD,KAAO,OAAO,YAAP,CAAoB,IAApB,CAAP,CACH,CArBD,IAqBO,CACH,KAAO,EAAP,CACH,CACD,MAxDJ,CA0DH,CA3DD,IA2DO,CACH,EAAE,UAAF,CACA,GAAI,KAAQ,IAAR,EAAgB,OAAO,KAAP,IAAkB,IAAtC,CAA4C,CACxC,EAAE,KAAF,CACH,CACJ,CACJ,CAnEM,IAmEA,IAAI,iBAAiB,EAAjB,CAAJ,CAA0B,CAC7B,MACH,CAFM,IAEA,CACH,KAAO,EAAP,CACH,CACJ,CAED,GAAI,QAAU,EAAd,CAAkB,CACd,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CAED,MAAO,CACH,KAAM,MAAM,aADT,CAEH,MAAO,GAFJ,CAGH,MAAO,KAHJ,CAIH,WAAY,UAJT,CAKH,UAAW,SALR,CAMH,MAAO,CAAC,KAAD,CAAQ,KAAR,CANJ,CAAP,CAQH,CAED,QAAS,WAAT,EAAsB,CAClB,GAAI,IAAJ,CAAS,EAAT,CAAa,KAAb,CAAoB,OAApB,CAA6B,KAA7B,CAAoC,KAApC,CAA2C,YAAc,KAAzD,CAAgE,OAAhE,CAAyE,WAAa,KAAtF,CAEA,OAAS,IAAT,CACA,cAEA,MAAQ,KAAR,CACA,GAAK,OAAO,KAAP,CAAL,CACA,OAAO,KAAO,GAAd,CAAmB,oDAAnB,EACA,IAAM,OAAO,OAAP,CAAN,CAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,OAAP,CAAL,CACA,KAAO,EAAP,CACA,GAAI,KAAO,IAAX,CAAiB,CACb,GAAK,OAAO,OAAP,CAAL,C;AAEA,GAAI,iBAAiB,EAAjB,CAAJ,CAA0B,CACtB,WAAW,EAAX,CAAe,SAAS,kBAAxB,EACH,CACD,KAAO,EAAP,CACH,CAPD,IAOO,IAAI,WAAJ,CAAiB,CACpB,GAAI,KAAO,GAAX,CAAgB,CACZ,YAAc,KAAd,CACH,CACJ,CAJM,IAIA,CACH,GAAI,KAAO,GAAX,CAAgB,CACZ,WAAa,IAAb,CACA,MACH,CAHD,IAGO,IAAI,KAAO,GAAX,CAAgB,CACnB,YAAc,IAAd,CACH,CAFM,IAEA,IAAI,iBAAiB,EAAjB,CAAJ,CAA0B,CAC7B,WAAW,EAAX,CAAe,SAAS,kBAAxB,EACH,CACJ,CACJ,CAED,GAAI,CAAC,UAAL,CAAiB,CACb,WAAW,EAAX,CAAe,SAAS,kBAAxB,EACH,C;AAGD,QAAU,IAAI,MAAJ,CAAW,CAAX,CAAc,IAAI,MAAJ,CAAa,CAA3B,CAAV,CAEA,MAAQ,EAAR,CACA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,CAAC,iBAAiB,EAAjB,CAAL,CAA2B,CACvB,MACH,CAED,EAAE,KAAF,CACA,GAAI,KAAO,IAAP,EAAe,MAAQ,MAA3B,CAAmC,CAC/B,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,KAAO,GAAX,CAAgB,CACZ,EAAE,KAAF,CACA,QAAU,KAAV,CACA,GAAK,cAAc,GAAd,CAAL,CACA,GAAI,EAAJ,CAAQ,CACJ,OAAS,EAAT,CACA,KAAO,KAAP,CACA,KAAO,QAAU,KAAjB,CAAwB,EAAE,OAA1B,CAAmC,CAC/B,KAAO,OAAO,OAAP,CAAP,CACH,CACJ,CAND,IAMO,CACH,MAAQ,OAAR,CACA,OAAS,GAAT,CACA,KAAO,KAAP,CACH,CACJ,CAfD,IAeO,CACH,KAAO,IAAP,CACH,CACJ,CApBD,IAoBO,CACH,OAAS,EAAT,CACA,KAAO,EAAP,CACH,CACJ,CAED,GAAI,CACA,MAAQ,GAAI,OAAJ,CAAW,OAAX,CAAoB,KAApB,CAAR,CACH,CAAC,MAAO,CAAP,CAAU,CACR,WAAW,EAAX,CAAe,SAAS,aAAxB,EACH,CAED,MAAO,CACH,QAAS,GADN,CAEH,MAAO,KAFJ,CAGH,MAAO,CAAC,KAAD,CAAQ,KAAR,CAHJ,CAAP,CAKH,CAED,QAAS,iBAAT,CAA0B,KAA1B,CAAiC,CAC7B,MAAO,OAAM,IAAN,GAAe,MAAM,UAArB,EACH,MAAM,IAAN,GAAe,MAAM,OADlB,EAEH,MAAM,IAAN,GAAe,MAAM,cAFlB,EAGH,MAAM,IAAN,GAAe,MAAM,WAHzB,CAIH,CAED,QAAS,QAAT,EAAmB,CACf,GAAI,GAAJ,CAAQ,KAAR,CAEA,cAEA,GAAI,OAAS,MAAb,CAAqB,CACjB,MAAO,CACH,KAAM,MAAM,GADT,CAEH,WAAY,UAFT,CAGH,UAAW,SAHR,CAIH,MAAO,CAAC,KAAD,CAAQ,KAAR,CAJJ,CAAP,CAMH,CAED,MAAQ,gBAAR,CACA,GAAI,MAAO,MAAP,GAAiB,WAArB,CAAkC,CAC9B,MAAO,MAAP,CACH,CAED,GAAK,OAAO,KAAP,CAAL,CAEA,GAAI,KAAO,IAAP,EAAe,KAAO,GAA1B,CAA+B,CAC3B,MAAO,oBAAP,CACH,CAED,GAAI,KAAO,GAAP,EAAc,eAAe,EAAf,CAAlB,CAAsC,CAClC,MAAO,qBAAP,CACH,CAED,MAAQ,gBAAR,CACA,GAAI,MAAO,MAAP,GAAiB,WAArB,CAAkC,CAC9B,MAAO,MAAP,CACH,CAED,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CAED,QAAS,IAAT,EAAe,CACX,GAAI,MAAJ,CAEA,GAAI,MAAJ,CAAY,CACR,MAAQ,OAAO,KAAP,CAAa,CAAb,CAAR,CACA,WAAa,OAAO,UAApB,CACA,UAAY,OAAO,SAAnB,CACA,MAAQ,MAAR,CACA,OAAS,IAAT,CACA,MAAO,MAAP,CACH,CAED,OAAS,IAAT,CACA,MAAO,UAAP,CACH,CAED,QAAS,UAAT,EAAqB,CACjB,GAAI,IAAJ,CAAS,IAAT,CAAe,KAAf,CAEA,GAAI,SAAW,IAAf,CAAqB,CACjB,MAAO,OAAP,CACH,CAED,IAAM,KAAN,CACA,KAAO,UAAP,CACA,MAAQ,SAAR,CACA,OAAS,SAAT,CACA,MAAQ,GAAR,CACA,WAAa,IAAb,CACA,UAAY,KAAZ,CAEA,MAAO,OAAP,CACH,C;AAID,QAAS,mBAAT,EAA8B,CAC1B,GAAI,IAAJ,CAAS,IAAT,CAAe,KAAf,CAAsB,KAAtB,CAEA,IAAM,KAAN,CACA,KAAO,UAAP,CACA,MAAQ,SAAR,CACA,cACA,MAAQ,aAAe,IAAvB,CACA,MAAQ,GAAR,CACA,WAAa,IAAb,CACA,UAAY,KAAZ,CAEA,MAAO,MAAP,CACH,C;AAID,QAAS,WAAT,CAAoB,KAApB,CAA2B,aAA3B,CAA0C,CACtC,GAAI,MAAJ,CACI,KAAO,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,CAAsC,CAAtC,CADX,CAEI,IAAM,cAAc,OAAd,CACF,QADE,CAEF,SAAU,KAAV,CAAiB,KAAjB,CAAwB,CACpB,MAAO,MAAK,KAAL,GAAe,EAAtB,CACH,CAJC,CAFV,CASA,GAAI,MAAO,OAAM,UAAb,GAA4B,QAAhC,CAA0C,CACtC,MAAQ,GAAI,MAAJ,CAAU,QAAU,MAAM,UAAhB,CAA6B,IAA7B,CAAoC,GAA9C,CAAR,CACA,MAAM,KAAN,CAAc,MAAM,KAAN,CAAY,CAAZ,CAAd,CACA,MAAM,UAAN,CAAmB,MAAM,UAAzB,CACA,MAAM,MAAN,CAAe,MAAM,KAAN,CAAY,CAAZ,EAAiB,SAAjB,CAA6B,CAA5C,CACH,CALD,IAKO,CACH,MAAQ,GAAI,MAAJ,CAAU,QAAU,UAAV,CAAuB,IAAvB,CAA8B,GAAxC,CAAR,CACA,MAAM,KAAN,CAAc,KAAd,CACA,MAAM,UAAN,CAAmB,UAAnB,CACA,MAAM,MAAN,CAAe,MAAQ,SAAR,CAAoB,CAAnC,CACH,CAED,KAAM,MAAN,CACH,CAED,QAAS,mBAAT,EAA8B,CAC1B,GAAI,CACA,WAAW,KAAX,CAAiB,IAAjB,CAAuB,SAAvB,EACH,CAAC,MAAO,CAAP,CAAU,CACR,GAAI,MAAM,MAAV,CAAkB,CACd,MAAM,MAAN,CAAa,IAAb,CAAkB,CAAlB,EACH,CAFD,IAEO,CACH,KAAM,EAAN,CACH,CACJ,CACJ,C;AAKD,QAAS,gBAAT,CAAyB,KAAzB,CAAgC,CAC5B,GAAI,MAAM,IAAN,GAAe,MAAM,GAAzB,CAA8B,CAC1B,WAAW,KAAX,CAAkB,SAAS,aAA3B,EACH,CAED,GAAI,MAAM,IAAN,GAAe,MAAM,cAAzB,CAAyC,CACrC,WAAW,KAAX,CAAkB,SAAS,gBAA3B,EACH,CAED,GAAI,MAAM,IAAN,GAAe,MAAM,aAAzB,CAAwC,CACpC,WAAW,KAAX,CAAkB,SAAS,gBAA3B,EACH,CAED,GAAI,MAAM,IAAN,GAAe,MAAM,UAAzB,CAAqC,CACjC,WAAW,KAAX,CAAkB,SAAS,oBAA3B,EACH,CAED,GAAI,MAAM,IAAN,GAAe,MAAM,OAAzB,CAAkC,CAC9B,GAAI,qBAAqB,MAAM,KAA3B,CAAJ,CAAuC,CACnC,WAAW,KAAX,CAAkB,SAAS,kBAA3B,EACH,CAFD,IAEO,IAAI,QAAU,yBAAyB,MAAM,KAA/B,CAAd,CAAqD,CACxD,mBAAmB,KAAnB,CAA0B,SAAS,kBAAnC,EACA,OACH,CACD,WAAW,KAAX,CAAkB,SAAS,eAA3B,CAA4C,MAAM,KAAlD,EACH,C;AAGD,WAAW,KAAX,CAAkB,SAAS,eAA3B,CAA4C,MAAM,KAAlD,EACH,C;;AAKD,QAAS,OAAT,CAAgB,KAAhB,CAAuB,CACnB,GAAI,OAAQ,KAAZ,CACA,GAAI,MAAM,IAAN,GAAe,MAAM,UAArB,EAAmC,MAAM,KAAN,GAAgB,KAAvD,CAA8D,CAC1D,gBAAgB,KAAhB,EACH,CACJ,C;;AAKD,QAAS,cAAT,CAAuB,OAAvB,CAAgC,CAC5B,GAAI,OAAQ,KAAZ,CACA,GAAI,MAAM,IAAN,GAAe,MAAM,OAArB,EAAgC,MAAM,KAAN,GAAgB,OAApD,CAA6D,CACzD,gBAAgB,KAAhB,EACH,CACJ,C;AAID,QAAS,MAAT,CAAe,KAAf,CAAsB,CAClB,GAAI,OAAQ,WAAZ,CACA,MAAO,OAAM,IAAN,GAAe,MAAM,UAArB,EAAmC,MAAM,KAAN,GAAgB,KAA1D,CACH,C;AAID,QAAS,aAAT,CAAsB,OAAtB,CAA+B,CAC3B,GAAI,OAAQ,WAAZ,CACA,MAAO,OAAM,IAAN,GAAe,MAAM,OAArB,EAAgC,MAAM,KAAN,GAAgB,OAAvD,CACH,C;AAID,QAAS,YAAT,EAAuB,CACnB,GAAI,OAAQ,WAAZ,CACI,GAAK,MAAM,KADf,CAGA,GAAI,MAAM,IAAN,GAAe,MAAM,UAAzB,CAAqC,CACjC,MAAO,MAAP,CACH,CACD,MAAO,MAAO,GAAP,EACH,KAAO,IADJ,EAEH,KAAO,IAFJ,EAGH,KAAO,IAHJ,EAIH,KAAO,IAJJ,EAKH,KAAO,IALJ,EAMH,KAAO,KANJ,EAOH,KAAO,KAPJ,EAQH,KAAO,MARJ,EASH,KAAO,IATJ,EAUH,KAAO,IAVJ,EAWH,KAAO,IAXX,CAYH,CAED,QAAS,iBAAT,EAA4B,CACxB,GAAI,MAAJ,CAAW,IAAX,C;AAGA,GAAI,OAAO,KAAP,IAAkB,GAAtB,CAA2B,CACvB,MACA,OACH,CAED,KAAO,UAAP,CACA,cACA,GAAI,aAAe,IAAnB,CAAyB,CACrB,OACH,CAED,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACA,OACH,CAED,MAAQ,WAAR,CACA,GAAI,MAAM,IAAN,GAAe,MAAM,GAArB,EAA4B,CAAC,MAAM,GAAN,CAAjC,CAA6C,CACzC,gBAAgB,KAAhB,EACH,CACJ,C;AAID,QAAS,eAAT,CAAwB,IAAxB,CAA8B,CAC1B,MAAO,MAAK,IAAL,GAAc,OAAO,UAArB,EAAmC,KAAK,IAAL,GAAc,OAAO,gBAA/D,CACH,C;AAID,QAAS,sBAAT,EAAiC,CAC7B,GAAI,UAAW,EAAf,CAEA,OAAO,GAAP,EAEA,MAAO,CAAC,MAAM,GAAN,CAAR,CAAoB,CAChB,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACA,SAAS,IAAT,CAAc,IAAd,EACH,CAHD,IAGO,CACH,SAAS,IAAT,CAAc,2BAAd,EAEA,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,OAAO,GAAP,EACH,CACJ,CACJ,CAED,OAAO,GAAP,EAEA,MAAO,CACH,KAAM,OAAO,eADV,CAEH,SAAU,QAFP,CAAP,CAIH,C;AAID,QAAS,sBAAT,CAA+B,KAA/B,CAAsC,KAAtC,CAA6C,CACzC,GAAI,eAAJ,CAAoB,IAApB,CAEA,eAAiB,MAAjB,CACA,KAAO,6BAAP,CACA,GAAI,OAAS,MAAT,EAAmB,iBAAiB,MAAM,CAAN,EAAS,IAA1B,CAAvB,CAAwD,CACpD,mBAAmB,KAAnB,CAA0B,SAAS,eAAnC,EACH,CACD,OAAS,cAAT,CAEA,MAAO,CACH,KAAM,OAAO,kBADV,CAEH,GAAI,IAFD,CAGH,OAAQ,KAHL,CAIH,SAAU,EAJP,CAKH,KAAM,IALH,CAMH,KAAM,IANH,CAOH,UAAW,KAPR,CAQH,WAAY,KART,CAAP,CAUH,CAED,QAAS,uBAAT,EAAkC,CAC9B,GAAI,OAAQ,KAAZ,C;;AAKA,GAAI,MAAM,IAAN,GAAe,MAAM,aAArB,EAAsC,MAAM,IAAN,GAAe,MAAM,cAA/D,CAA+E,CAC3E,GAAI,QAAU,MAAM,KAApB,CAA2B,CACvB,mBAAmB,KAAnB,CAA0B,SAAS,kBAAnC,EACH,CACD,MAAO,eAAc,KAAd,CAAP,CACH,CAED,MAAO,CACH,KAAM,OAAO,UADV,CAEH,KAAM,MAAM,KAFT,CAAP,CAIH,CAED,QAAS,oBAAT,EAA+B,CAC3B,GAAI,MAAJ,CAAW,GAAX,CAAgB,EAAhB,CAAoB,KAApB,CAEA,MAAQ,WAAR,CAEA,GAAI,MAAM,IAAN,GAAe,MAAM,UAAzB,CAAqC,CAEjC,GAAK,wBAAL,C;AAIA,GAAI,MAAM,KAAN,GAAgB,KAAhB,EAAyB,CAAC,MAAM,GAAN,CAA9B,CAA0C,CACtC,IAAM,wBAAN,CACA,OAAO,GAAP,EACA,OAAO,GAAP,EACA,MAAO,CACH,KAAM,OAAO,QADV,CAEH,IAAK,GAFF,CAGH,MAAO,sBAAsB,EAAtB,CAHJ,CAIH,KAAM,KAJH,CAAP,CAMH,CAVD,IAUO,IAAI,MAAM,KAAN,GAAgB,KAAhB,EAAyB,CAAC,MAAM,GAAN,CAA9B,CAA0C,CAC7C,IAAM,wBAAN,CACA,OAAO,GAAP,EACA,MAAQ,WAAR,CACA,GAAI,MAAM,IAAN,GAAe,MAAM,UAAzB,CAAqC,CACjC,OAAO,GAAP,EACA,mBAAmB,KAAnB,CAA0B,SAAS,eAAnC,CAAoD,MAAM,KAA1D,EACA,MAAO,CACH,KAAM,OAAO,QADV,CAEH,IAAK,GAFF,CAGH,MAAO,sBAAsB,EAAtB,CAHJ,CAIH,KAAM,KAJH,CAAP,CAMH,CATD,IASO,CACH,MAAQ,CAAE,yBAAF,CAAR,CACA,OAAO,GAAP,EACA,MAAO,CACH,KAAM,OAAO,QADV,CAEH,IAAK,GAFF,CAGH,MAAO,sBAAsB,KAAtB,CAA6B,KAA7B,CAHJ,CAIH,KAAM,KAJH,CAAP,CAMH,CACJ,CAvBM,IAuBA,CACH,OAAO,GAAP,EACA,MAAO,CACH,KAAM,OAAO,QADV,CAEH,IAAK,EAFF,CAGH,MAAO,2BAHJ,CAIH,KAAM,MAJH,CAAP,CAMH,CACJ,CAhDD,IAgDO,IAAI,MAAM,IAAN,GAAe,MAAM,GAArB,EAA4B,MAAM,IAAN,GAAe,MAAM,UAArD,CAAiE,CACpE,gBAAgB,KAAhB,EACH,CAFM,IAEA,CACH,IAAM,wBAAN,CACA,OAAO,GAAP,EACA,MAAO,CACH,KAAM,OAAO,QADV,CAEH,IAAK,GAFF,CAGH,MAAO,2BAHJ,CAIH,KAAM,MAJH,CAAP,CAMH,CACJ,CAED,QAAS,uBAAT,EAAkC,CAC9B,GAAI,YAAa,EAAjB,CAAqB,QAArB,CAA+B,IAA/B,CAAqC,IAArC,CAA2C,IAAM,EAAjD,CAAqD,SAAW,MAAhE,CAEA,OAAO,GAAP,EAEA,MAAO,CAAC,MAAM,GAAN,CAAR,CAAoB,CAChB,SAAW,qBAAX,CAEA,GAAI,SAAS,GAAT,CAAa,IAAb,GAAsB,OAAO,UAAjC,CAA6C,CACzC,KAAO,SAAS,GAAT,CAAa,IAApB,CACH,CAFD,IAEO,CACH,KAAO,SAAS,SAAS,GAAT,CAAa,KAAtB,CAAP,CACH,CACD,KAAQ,SAAS,IAAT,GAAkB,MAAnB,CAA6B,aAAa,IAA1C,CAAkD,SAAS,IAAT,GAAkB,KAAnB,CAA4B,aAAa,GAAzC,CAA+C,aAAa,GAApH,CACA,GAAI,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,GAArC,CAA0C,IAA1C,CAAJ,CAAqD,CACjD,GAAI,IAAI,IAAJ,IAAc,aAAa,IAA/B,CAAqC,CACjC,GAAI,QAAU,OAAS,aAAa,IAApC,CAA0C,CACtC,mBAAmB,EAAnB,CAAuB,SAAS,uBAAhC,EACH,CAFD,IAEO,IAAI,OAAS,aAAa,IAA1B,CAAgC,CACnC,mBAAmB,EAAnB,CAAuB,SAAS,oBAAhC,EACH,CACJ,CAND,IAMO,CACH,GAAI,OAAS,aAAa,IAA1B,CAAgC,CAC5B,mBAAmB,EAAnB,CAAuB,SAAS,oBAAhC,EACH,CAFD,IAEO,IAAI,IAAI,IAAJ,EAAY,IAAhB,CAAsB,CACzB,mBAAmB,EAAnB,CAAuB,SAAS,cAAhC,EACH,CACJ,CACD,IAAI,IAAJ,GAAa,IAAb,CACH,CAfD,IAeO,CACH,IAAI,IAAJ,EAAY,IAAZ,CACH,CAED,WAAW,IAAX,CAAgB,QAAhB,EAEA,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,OAAO,GAAP,EACH,CACJ,CAED,OAAO,GAAP,EAEA,MAAO,CACH,KAAM,OAAO,gBADV,CAEH,WAAY,UAFT,CAAP,CAIH,C;AAID,QAAS,qBAAT,EAAgC,CAC5B,GAAI,KAAJ,CAEA,OAAO,GAAP,EAEA,KAAO,iBAAP,CAEA,OAAO,GAAP,EAEA,MAAO,KAAP,CACH,C;AAKD,QAAS,uBAAT,EAAkC,CAC9B,GAAI,OAAQ,WAAZ,CACI,KAAO,MAAM,IADjB,CAGA,GAAI,OAAS,MAAM,UAAnB,CAA+B,CAC3B,MAAO,CACH,KAAM,OAAO,UADV,CAEH,KAAM,MAAM,KAFT,CAAP,CAIH,CAED,GAAI,OAAS,MAAM,aAAf,EAAgC,OAAS,MAAM,cAAnD,CAAmE,CAC/D,GAAI,QAAU,MAAM,KAApB,CAA2B,CACvB,mBAAmB,KAAnB,CAA0B,SAAS,kBAAnC,EACH,CACD,MAAO,eAAc,KAAd,CAAP,CACH,CAED,GAAI,OAAS,MAAM,OAAnB,CAA4B,CACxB,GAAI,aAAa,MAAb,CAAJ,CAA0B,CACtB,MACA,MAAO,CACH,KAAM,OAAO,cADV,CAAP,CAGH,CAED,GAAI,aAAa,UAAb,CAAJ,CAA8B,CAC1B,MAAO,0BAAP,CACH,CACJ,CAED,GAAI,OAAS,MAAM,cAAnB,CAAmC,CAC/B,MACA,MAAM,KAAN,CAAe,MAAM,KAAN,GAAgB,MAA/B,CACA,MAAO,eAAc,KAAd,CAAP,CACH,CAED,GAAI,OAAS,MAAM,WAAnB,CAAgC,CAC5B,MACA,MAAM,KAAN,CAAc,IAAd,CACA,MAAO,eAAc,KAAd,CAAP,CACH,CAED,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MAAO,wBAAP,CACH,CAED,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MAAO,yBAAP,CACH,CAED,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MAAO,uBAAP,CACH,CAED,GAAI,MAAM,GAAN,GAAc,MAAM,IAAN,CAAlB,CAA+B,CAC3B,MAAO,eAAc,YAAd,CAAP,CACH,CAED,MAAO,iBAAgB,KAAhB,CAAP,CACH,C;AAID,QAAS,eAAT,EAA0B,CACtB,GAAI,MAAO,EAAX,CAEA,OAAO,GAAP,EAEA,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,MAAO,MAAQ,MAAf,CAAuB,CACnB,KAAK,IAAL,CAAU,2BAAV,EACA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACH,CACD,OAAO,GAAP,EACH,CACJ,CAED,OAAO,GAAP,EAEA,MAAO,KAAP,CACH,CAED,QAAS,yBAAT,EAAoC,CAChC,GAAI,OAAQ,KAAZ,CAEA,GAAI,CAAC,iBAAiB,KAAjB,CAAL,CAA8B,CAC1B,gBAAgB,KAAhB,EACH,CAED,MAAO,CACH,KAAM,OAAO,UADV,CAEH,KAAM,MAAM,KAFT,CAAP,CAIH,CAED,QAAS,uBAAT,EAAkC,CAC9B,OAAO,GAAP,EAEA,MAAO,2BAAP,CACH,CAED,QAAS,oBAAT,EAA+B,CAC3B,GAAI,KAAJ,CAEA,OAAO,GAAP,EAEA,KAAO,iBAAP,CAEA,OAAO,GAAP,EAEA,MAAO,KAAP,CACH,CAED,QAAS,mBAAT,EAA8B,CAC1B,GAAI,KAAJ,CAEA,cAAc,KAAd,EAEA,KAAO,CACH,KAAM,OAAO,aADV,CAEH,OAAQ,6BAFL,CAGH,YAAa,EAHV,CAAP,CAMA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,KAAK,WAAL,EAAoB,gBAApB,CACH,CAED,MAAO,KAAP,CACH,CAED,QAAS,qCAAT,EAAgD,CAC5C,GAAI,KAAJ,CAEA,KAAO,aAAa,KAAb,EAAsB,oBAAtB,CAA6C,wBAApD,CAEA,MAAO,MAAM,GAAN,GAAc,MAAM,GAAN,CAAd,EAA4B,MAAM,GAAN,CAAnC,CAA+C,CAC3C,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,KAAO,CACH,KAAM,OAAO,cADV,CAEH,OAAQ,IAFL,CAGH,YAAa,gBAHV,CAAP,CAKH,CAND,IAMO,IAAI,MAAM,GAAN,CAAJ,CAAgB,CACnB,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,IAFP,CAGH,OAAQ,IAHL,CAIH,SAAU,qBAJP,CAAP,CAMH,CAPM,IAOA,CACH,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,KAFP,CAGH,OAAQ,IAHL,CAIH,SAAU,wBAJP,CAAP,CAMH,CACJ,CAED,MAAO,KAAP,CACH,CAGD,QAAS,4BAAT,EAAuC,CACnC,GAAI,KAAJ,CAEA,KAAO,aAAa,KAAb,EAAsB,oBAAtB,CAA6C,wBAApD,CAEA,MAAO,MAAM,GAAN,GAAc,MAAM,GAAN,CAArB,CAAiC,CAC7B,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,IAFP,CAGH,OAAQ,IAHL,CAIH,SAAU,qBAJP,CAAP,CAMH,CAPD,IAOO,CACH,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,KAFP,CAGH,OAAQ,IAHL,CAIH,SAAU,wBAJP,CAAP,CAMH,CACJ,CAED,MAAO,KAAP,CACH,C;AAID,QAAS,uBAAT,EAAkC,CAC9B,GAAI,MAAO,sCAAX,CAAmD,KAAnD,CAEA,MAAQ,WAAR,CACA,GAAI,MAAM,IAAN,GAAe,MAAM,UAAzB,CAAqC,CACjC,MAAO,KAAP,CACH,CAED,GAAI,CAAC,MAAM,IAAN,GAAe,MAAM,IAAN,CAAhB,GAAgC,CAAC,oBAArC,CAA2D,C;AAEvD,GAAI,QAAU,KAAK,IAAL,GAAc,OAAO,UAA/B,EAA6C,iBAAiB,KAAK,IAAtB,CAAjD,CAA8E,CAC1E,mBAAmB,EAAnB,CAAuB,SAAS,gBAAhC,EACH,CACD,GAAI,CAAC,eAAe,IAAf,CAAL,CAA2B,CACvB,mBAAmB,EAAnB,CAAuB,SAAS,sBAAhC,EACH,CAED,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,MAAM,KAFb,CAGH,SAAU,IAHP,CAIH,OAAQ,KAJL,CAAP,CAMH,CAED,MAAO,KAAP,CACH,C;AAID,QAAS,qBAAT,EAAgC,CAC5B,GAAI,MAAJ,CAAW,IAAX,CAEA,MAAQ,WAAR,CACA,GAAI,MAAM,IAAN,GAAe,MAAM,UAArB,EAAmC,MAAM,IAAN,GAAe,MAAM,OAA5D,CAAqE,CACjE,MAAO,yBAAP,CACH,CAED,GAAI,MAAM,IAAN,GAAe,MAAM,IAAN,CAAnB,CAAgC,CAC5B,MAAQ,KAAR,CACA,KAAO,sBAAP,C;AAEA,GAAI,QAAU,KAAK,IAAL,GAAc,OAAO,UAA/B,EAA6C,iBAAiB,KAAK,IAAtB,CAAjD,CAA8E,CAC1E,mBAAmB,EAAnB,CAAuB,SAAS,eAAhC,EACH,CAED,GAAI,CAAC,eAAe,IAAf,CAAL,CAA2B,CACvB,mBAAmB,EAAnB,CAAuB,SAAS,sBAAhC,EACH,CAED,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,MAAM,KAFb,CAGH,SAAU,IAHP,CAIH,OAAQ,IAJL,CAAP,CAMA,MAAO,KAAP,CACH,CAED,GAAI,MAAM,GAAN,GAAc,MAAM,GAAN,CAAd,EAA4B,MAAM,GAAN,CAA5B,EAA0C,MAAM,GAAN,CAA9C,CAA0D,CACtD,KAAO,CACH,KAAM,OAAO,eADV,CAEH,SAAU,MAAM,KAFb,CAGH,SAAU,sBAHP,CAIH,OAAQ,IAJL,CAAP,CAMA,MAAO,KAAP,CACH,CAED,GAAI,aAAa,QAAb,GAA0B,aAAa,MAAb,CAA1B,EAAkD,aAAa,QAAb,CAAtD,CAA8E,CAC1E,KAAO,CACH,KAAM,OAAO,eADV,CAEH,SAAU,MAAM,KAFb,CAGH,SAAU,sBAHP,CAIH,OAAQ,IAJL,CAAP,CAMA,GAAI,QAAU,KAAK,QAAL,GAAkB,QAA5B,EAAwC,KAAK,QAAL,CAAc,IAAd,GAAuB,OAAO,UAA1E,CAAsF,CAClF,mBAAmB,EAAnB,CAAuB,SAAS,YAAhC,EACH,CACD,MAAO,KAAP,CACH,CAED,MAAO,yBAAP,CACH,C;AAID,QAAS,8BAAT,EAAyC,CACrC,GAAI,MAAO,sBAAX,CAEA,MAAO,MAAM,GAAN,GAAc,MAAM,GAAN,CAAd,EAA4B,MAAM,GAAN,CAAnC,CAA+C,CAC3C,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,MAAM,KAFb,CAGH,KAAM,IAHH,CAIH,MAAO,sBAJJ,CAAP,CAMH,CAED,MAAO,KAAP,CACH,C;AAID,QAAS,wBAAT,EAAmC,CAC/B,GAAI,MAAO,+BAAX,CAEA,MAAO,MAAM,GAAN,GAAc,MAAM,GAAN,CAArB,CAAiC,CAC7B,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,MAAM,KAFb,CAGH,KAAM,IAHH,CAIH,MAAO,+BAJJ,CAAP,CAMH,CAED,MAAO,KAAP,CACH,C;AAID,QAAS,qBAAT,EAAgC,CAC5B,GAAI,MAAO,yBAAX,CAEA,MAAO,MAAM,IAAN,GAAe,MAAM,IAAN,CAAf,EAA8B,MAAM,KAAN,CAArC,CAAmD,CAC/C,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,MAAM,KAFb,CAGH,KAAM,IAHH,CAIH,MAAO,yBAJJ,CAAP,CAMH,CAED,MAAO,KAAP,CACH,C;AAGD,QAAS,0BAAT,EAAqC,CACjC,GAAI,KAAJ,CAAU,eAAV,CAEA,gBAAkB,MAAM,OAAxB,CACA,MAAM,OAAN,CAAgB,IAAhB,CAEA,KAAO,sBAAP,CAEA,MAAO,MAAM,GAAN,GAAc,MAAM,GAAN,CAAd,EAA4B,MAAM,IAAN,CAA5B,EAA2C,MAAM,IAAN,CAA3C,EAA2D,iBAAmB,aAAa,IAAb,CAA9E,EAAqG,aAAa,YAAb,CAA5G,CAAwI,CACpI,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,MAAM,KAFb,CAGH,KAAM,IAHH,CAIH,MAAO,sBAJJ,CAAP,CAMH,CAED,MAAM,OAAN,CAAgB,eAAhB,CACA,MAAO,KAAP,CACH,C;AAID,QAAS,wBAAT,EAAmC,CAC/B,GAAI,MAAO,2BAAX,CAEA,MAAO,MAAM,IAAN,GAAe,MAAM,IAAN,CAAf,EAA8B,MAAM,KAAN,CAA9B,EAA8C,MAAM,KAAN,CAArD,CAAmE,CAC/D,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,MAAM,KAFb,CAGH,KAAM,IAHH,CAIH,MAAO,2BAJJ,CAAP,CAMH,CAED,MAAO,KAAP,CACH,C;AAID,QAAS,0BAAT,EAAqC,CACjC,GAAI,MAAO,yBAAX,CAEA,MAAO,MAAM,GAAN,CAAP,CAAmB,CACf,MACA,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,GAFP,CAGH,KAAM,IAHH,CAIH,MAAO,yBAJJ,CAAP,CAMH,CAED,MAAO,KAAP,CACH,CAED,QAAS,0BAAT,EAAqC,CACjC,GAAI,MAAO,2BAAX,CAEA,MAAO,MAAM,GAAN,CAAP,CAAmB,CACf,MACA,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,GAFP,CAGH,KAAM,IAHH,CAIH,MAAO,2BAJJ,CAAP,CAMH,CAED,MAAO,KAAP,CACH,CAED,QAAS,yBAAT,EAAoC,CAChC,GAAI,MAAO,2BAAX,CAEA,MAAO,MAAM,GAAN,CAAP,CAAmB,CACf,MACA,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,GAFP,CAGH,KAAM,IAHH,CAIH,MAAO,2BAJJ,CAAP,CAMH,CAED,MAAO,KAAP,CACH,C;AAID,QAAS,0BAAT,EAAqC,CACjC,GAAI,MAAO,0BAAX,CAEA,MAAO,MAAM,IAAN,CAAP,CAAoB,CAChB,MACA,KAAO,CACH,KAAM,OAAO,iBADV,CAEH,SAAU,IAFP,CAGH,KAAM,IAHH,CAIH,MAAO,0BAJJ,CAAP,CAMH,CAED,MAAO,KAAP,CACH,CAED,QAAS,yBAAT,EAAoC,CAChC,GAAI,MAAO,2BAAX,CAEA,MAAO,MAAM,IAAN,CAAP,CAAoB,CAChB,MACA,KAAO,CACH,KAAM,OAAO,iBADV,CAEH,SAAU,IAFP,CAGH,KAAM,IAHH,CAIH,MAAO,2BAJJ,CAAP,CAMH,CAED,MAAO,KAAP,CACH,C;AAID,QAAS,2BAAT,EAAsC,CAClC,GAAI,KAAJ,CAAU,eAAV,CAA2B,UAA3B,CAEA,KAAO,0BAAP,CAEA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACA,gBAAkB,MAAM,OAAxB,CACA,MAAM,OAAN,CAAgB,IAAhB,CACA,WAAa,2BAAb,CACA,MAAM,OAAN,CAAgB,eAAhB,CACA,OAAO,GAAP,EAEA,KAAO,CACH,KAAM,OAAO,qBADV,CAEH,KAAM,IAFH,CAGH,WAAY,UAHT,CAIH,UAAW,2BAJR,CAAP,CAMH,CAED,MAAO,KAAP,CACH,C;AAID,QAAS,0BAAT,EAAqC,CACjC,GAAI,MAAJ,CAAW,IAAX,CAEA,MAAQ,WAAR,CACA,KAAO,4BAAP,CAEA,GAAI,aAAJ,CAAmB,C;AAEf,GAAI,CAAC,eAAe,IAAf,CAAL,CAA2B,CACvB,mBAAmB,EAAnB,CAAuB,SAAS,sBAAhC,EACH,C;AAGD,GAAI,QAAU,KAAK,IAAL,GAAc,OAAO,UAA/B,EAA6C,iBAAiB,KAAK,IAAtB,CAAjD,CAA8E,CAC1E,mBAAmB,KAAnB,CAA0B,SAAS,mBAAnC,EACH,CAED,KAAO,CACH,KAAM,OAAO,oBADV,CAEH,SAAU,MAAM,KAFb,CAGH,KAAM,IAHH,CAIH,MAAO,2BAJJ,CAAP,CAMH,CAED,MAAO,KAAP,CACH,C;AAID,QAAS,gBAAT,EAA2B,CACvB,GAAI,MAAO,2BAAX,CAEA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,KAAO,CACH,KAAM,OAAO,kBADV,CAEH,YAAa,CAAE,IAAF,CAFV,CAAP,CAKA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,MACH,CACD,MACA,KAAK,WAAL,CAAiB,IAAjB,CAAsB,2BAAtB,EACH,CAEJ,CACD,MAAO,KAAP,CACH,C;AAID,QAAS,mBAAT,EAA8B,CAC1B,GAAI,MAAO,EAAX,CACI,SADJ,CAGA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACH,CACD,UAAY,oBAAZ,CACA,GAAI,MAAO,UAAP,GAAqB,WAAzB,CAAsC,CAClC,MACH,CACD,KAAK,IAAL,CAAU,SAAV,EACH,CAED,MAAO,KAAP,CACH,CAED,QAAS,WAAT,EAAsB,CAClB,GAAI,MAAJ,CAEA,OAAO,GAAP,EAEA,MAAQ,oBAAR,CAEA,OAAO,GAAP,EAEA,MAAO,CACH,KAAM,OAAO,cADV,CAEH,KAAM,KAFH,CAAP,CAIH,C;AAID,QAAS,wBAAT,EAAmC,CAC/B,GAAI,OAAQ,KAAZ,CAEA,GAAI,MAAM,IAAN,GAAe,MAAM,UAAzB,CAAqC,CACjC,gBAAgB,KAAhB,EACH,CAED,MAAO,CACH,KAAM,OAAO,UADV,CAEH,KAAM,MAAM,KAFT,CAAP,CAIH,CAED,QAAS,yBAAT,CAAkC,IAAlC,CAAwC,CACpC,GAAI,IAAK,yBAAT,CACI,KAAO,IADX,C;AAIA,GAAI,QAAU,iBAAiB,GAAG,IAApB,CAAd,CAAyC,CACrC,mBAAmB,EAAnB,CAAuB,SAAS,aAAhC,EACH,CAED,GAAI,OAAS,OAAb,CAAsB,CAClB,OAAO,GAAP,EACA,KAAO,2BAAP,CACH,CAHD,IAGO,IAAI,MAAM,GAAN,CAAJ,CAAgB,CACnB,MACA,KAAO,2BAAP,CACH,CAED,MAAO,CACH,KAAM,OAAO,kBADV,CAEH,GAAI,EAFD,CAGH,KAAM,IAHH,CAAP,CAKH,CAED,QAAS,6BAAT,CAAsC,IAAtC,CAA4C,CACxC,GAAI,MAAO,EAAX,CAEA,EAAG,CACC,KAAK,IAAL,CAAU,yBAAyB,IAAzB,CAAV,EACA,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,MACH,CACD,MACH,CAND,MAMS,MAAQ,MANjB,EAQA,MAAO,KAAP,CACH,CAED,QAAS,uBAAT,EAAkC,CAC9B,GAAI,aAAJ,CAEA,cAAc,KAAd,EAEA,aAAe,8BAAf,CAEA,mBAEA,MAAO,CACH,KAAM,OAAO,mBADV,CAEH,aAAc,YAFX,CAGH,KAAM,KAHH,CAAP,CAKH,C;;;;AAMD,QAAS,yBAAT,CAAkC,IAAlC,CAAwC,CACpC,GAAI,aAAJ,CAEA,cAAc,IAAd,EAEA,aAAe,6BAA6B,IAA7B,CAAf,CAEA,mBAEA,MAAO,CACH,KAAM,OAAO,mBADV,CAEH,aAAc,YAFX,CAGH,KAAM,IAHH,CAAP,CAKH,C;AAID,QAAS,oBAAT,EAA+B,CAC3B,OAAO,GAAP,EAEA,MAAO,CACH,KAAM,OAAO,cADV,CAAP,CAGH,C;AAID,QAAS,yBAAT,EAAoC,CAChC,GAAI,MAAO,iBAAX,CAEA,mBAEA,MAAO,CACH,KAAM,OAAO,mBADV,CAEH,WAAY,IAFT,CAAP,CAIH,C;AAID,QAAS,iBAAT,EAA4B,CACxB,GAAI,KAAJ,CAAU,UAAV,CAAsB,SAAtB,CAEA,cAAc,IAAd,EAEA,OAAO,GAAP,EAEA,KAAO,iBAAP,CAEA,OAAO,GAAP,EAEA,WAAa,gBAAb,CAEA,GAAI,aAAa,MAAb,CAAJ,CAA0B,CACtB,MACA,UAAY,gBAAZ,CACH,CAHD,IAGO,CACH,UAAY,IAAZ,CACH,CAED,MAAO,CACH,KAAM,OAAO,WADV,CAEH,KAAM,IAFH,CAGH,WAAY,UAHT,CAIH,UAAW,SAJR,CAAP,CAMH,C;AAID,QAAS,sBAAT,EAAiC,CAC7B,GAAI,KAAJ,CAAU,IAAV,CAAgB,cAAhB,CAEA,cAAc,IAAd,EAEA,eAAiB,MAAM,WAAvB,CACA,MAAM,WAAN,CAAoB,IAApB,CAEA,KAAO,gBAAP,CAEA,MAAM,WAAN,CAAoB,cAApB,CAEA,cAAc,OAAd,EAEA,OAAO,GAAP,EAEA,KAAO,iBAAP,CAEA,OAAO,GAAP,EAEA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACH,CAED,MAAO,CACH,KAAM,OAAO,gBADV,CAEH,KAAM,IAFH,CAGH,KAAM,IAHH,CAAP,CAKH,CAED,QAAS,oBAAT,EAA+B,CAC3B,GAAI,KAAJ,CAAU,IAAV,CAAgB,cAAhB,CAEA,cAAc,OAAd,EAEA,OAAO,GAAP,EAEA,KAAO,iBAAP,CAEA,OAAO,GAAP,EAEA,eAAiB,MAAM,WAAvB,CACA,MAAM,WAAN,CAAoB,IAApB,CAEA,KAAO,gBAAP,CAEA,MAAM,WAAN,CAAoB,cAApB,CAEA,MAAO,CACH,KAAM,OAAO,cADV,CAEH,KAAM,IAFH,CAGH,KAAM,IAHH,CAAP,CAKH,CAED,QAAS,4BAAT,EAAuC,CACnC,GAAI,OAAQ,KAAZ,CAEA,MAAO,CACH,KAAM,OAAO,mBADV,CAEH,aAAc,8BAFX,CAGH,KAAM,MAAM,KAHT,CAAP,CAKH,CAED,QAAS,kBAAT,EAA6B,CACzB,GAAI,KAAJ,CAAU,IAAV,CAAgB,MAAhB,CAAwB,IAAxB,CAA8B,KAA9B,CAAqC,IAArC,CAA2C,cAA3C,CAEA,KAAO,KAAO,OAAS,IAAvB,CAEA,cAAc,KAAd,EAEA,OAAO,GAAP,EAEA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACH,CAFD,IAEO,CACH,GAAI,aAAa,KAAb,GAAuB,aAAa,KAAb,CAA3B,CAAgD,CAC5C,MAAM,OAAN,CAAgB,KAAhB,CACA,KAAO,6BAAP,CACA,MAAM,OAAN,CAAgB,IAAhB,CAEA,GAAI,KAAK,YAAL,CAAkB,MAAlB,GAA6B,CAA7B,EAAkC,aAAa,IAAb,CAAtC,CAA0D,CACtD,MACA,KAAO,IAAP,CACA,MAAQ,iBAAR,CACA,KAAO,IAAP,CACH,CACJ,CAXD,IAWO,CACH,MAAM,OAAN,CAAgB,KAAhB,CACA,KAAO,iBAAP,CACA,MAAM,OAAN,CAAgB,IAAhB,CAEA,GAAI,aAAa,IAAb,CAAJ,CAAwB,C;AAEpB,GAAI,CAAC,eAAe,IAAf,CAAL,CAA2B,CACvB,mBAAmB,EAAnB,CAAuB,SAAS,iBAAhC,EACH,CAED,MACA,KAAO,IAAP,CACA,MAAQ,iBAAR,CACA,KAAO,IAAP,CACH,CACJ,CAED,GAAI,MAAO,KAAP,GAAgB,WAApB,CAAiC,CAC7B,OAAO,GAAP,EACH,CACJ,CAED,GAAI,MAAO,KAAP,GAAgB,WAApB,CAAiC,CAE7B,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,KAAO,iBAAP,CACH,CACD,OAAO,GAAP,EAEA,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,OAAS,iBAAT,CACH,CACJ,CAED,OAAO,GAAP,EAEA,eAAiB,MAAM,WAAvB,CACA,MAAM,WAAN,CAAoB,IAApB,CAEA,KAAO,gBAAP,CAEA,MAAM,WAAN,CAAoB,cAApB,CAEA,GAAI,MAAO,KAAP,GAAgB,WAApB,CAAiC,CAC7B,MAAO,CACH,KAAM,OAAO,YADV,CAEH,KAAM,IAFH,CAGH,KAAM,IAHH,CAIH,OAAQ,MAJL,CAKH,KAAM,IALH,CAAP,CAOH,CAED,MAAO,CACH,KAAM,OAAO,cADV,CAEH,KAAM,IAFH,CAGH,MAAO,KAHJ,CAIH,KAAM,IAJH,CAKH,KAAM,KALH,CAAP,CAOH,C;AAID,QAAS,uBAAT,EAAkC,CAC9B,GAAI,MAAJ,CAAW,MAAQ,IAAnB,CAEA,cAAc,UAAd,E;AAGA,GAAI,OAAO,KAAP,IAAkB,GAAtB,CAA2B,CACvB,MAEA,GAAI,CAAC,MAAM,WAAX,CAAwB,CACpB,WAAW,EAAX,CAAe,SAAS,eAAxB,EACH,CAED,MAAO,CACH,KAAM,OAAO,iBADV,CAEH,MAAO,IAFJ,CAAP,CAIH,CAED,GAAI,oBAAJ,CAA0B,CACtB,GAAI,CAAC,MAAM,WAAX,CAAwB,CACpB,WAAW,EAAX,CAAe,SAAS,eAAxB,EACH,CAED,MAAO,CACH,KAAM,OAAO,iBADV,CAEH,MAAO,IAFJ,CAAP,CAIH,CAED,MAAQ,WAAR,CACA,GAAI,MAAM,IAAN,GAAe,MAAM,UAAzB,CAAqC,CACjC,MAAQ,yBAAR,CAEA,GAAI,CAAC,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,MAAM,QAA3C,CAAqD,MAAM,IAA3D,CAAL,CAAuE,CACnE,WAAW,EAAX,CAAe,SAAS,YAAxB,CAAsC,MAAM,IAA5C,EACH,CACJ,CAED,mBAEA,GAAI,QAAU,IAAV,EAAkB,CAAC,MAAM,WAA7B,CAA0C,CACtC,WAAW,EAAX,CAAe,SAAS,eAAxB,EACH,CAED,MAAO,CACH,KAAM,OAAO,iBADV,CAEH,MAAO,KAFJ,CAAP,CAIH,C;AAID,QAAS,oBAAT,EAA+B,CAC3B,GAAI,MAAJ,CAAW,MAAQ,IAAnB,CAEA,cAAc,OAAd,E;AAGA,GAAI,OAAO,KAAP,IAAkB,GAAtB,CAA2B,CACvB,MAEA,GAAI,EAAE,MAAM,WAAN,EAAqB,MAAM,QAA7B,CAAJ,CAA4C,CACxC,WAAW,EAAX,CAAe,SAAS,YAAxB,EACH,CAED,MAAO,CACH,KAAM,OAAO,cADV,CAEH,MAAO,IAFJ,CAAP,CAIH,CAED,GAAI,oBAAJ,CAA0B,CACtB,GAAI,EAAE,MAAM,WAAN,EAAqB,MAAM,QAA7B,CAAJ,CAA4C,CACxC,WAAW,EAAX,CAAe,SAAS,YAAxB,EACH,CAED,MAAO,CACH,KAAM,OAAO,cADV,CAEH,MAAO,IAFJ,CAAP,CAIH,CAED,MAAQ,WAAR,CACA,GAAI,MAAM,IAAN,GAAe,MAAM,UAAzB,CAAqC,CACjC,MAAQ,yBAAR,CAEA,GAAI,CAAC,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,MAAM,QAA3C,CAAqD,MAAM,IAA3D,CAAL,CAAuE,CACnE,WAAW,EAAX,CAAe,SAAS,YAAxB,CAAsC,MAAM,IAA5C,EACH,CACJ,CAED,mBAEA,GAAI,QAAU,IAAV,EAAkB,EAAE,MAAM,WAAN,EAAqB,MAAM,QAA7B,CAAtB,CAA8D,CAC1D,WAAW,EAAX,CAAe,SAAS,YAAxB,EACH,CAED,MAAO,CACH,KAAM,OAAO,cADV,CAEH,MAAO,KAFJ,CAAP,CAIH,C;AAID,QAAS,qBAAT,EAAgC,CAC5B,GAAI,MAAJ,CAAW,SAAW,IAAtB,CAEA,cAAc,QAAd,EAEA,GAAI,CAAC,MAAM,cAAX,CAA2B,CACvB,mBAAmB,EAAnB,CAAuB,SAAS,aAAhC,EACH,C;AAGD,GAAI,OAAO,KAAP,IAAkB,GAAtB,CAA2B,CACvB,GAAI,kBAAkB,OAAO,MAAQ,CAAf,CAAlB,CAAJ,CAA0C,CACtC,SAAW,iBAAX,CACA,mBACA,MAAO,CACH,KAAM,OAAO,eADV,CAEH,SAAU,QAFP,CAAP,CAIH,CACJ,CAED,GAAI,oBAAJ,CAA0B,CACtB,MAAO,CACH,KAAM,OAAO,eADV,CAEH,SAAU,IAFP,CAAP,CAIH,CAED,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,MAAQ,WAAR,CACA,GAAI,CAAC,MAAM,GAAN,CAAD,EAAe,MAAM,IAAN,GAAe,MAAM,GAAxC,CAA6C,CACzC,SAAW,iBAAX,CACH,CACJ,CAED,mBAEA,MAAO,CACH,KAAM,OAAO,eADV,CAEH,SAAU,QAFP,CAAP,CAIH,C;AAID,QAAS,mBAAT,EAA8B,CAC1B,GAAI,OAAJ,CAAY,IAAZ,CAEA,GAAI,MAAJ,CAAY,CACR,mBAAmB,EAAnB,CAAuB,SAAS,cAAhC,EACH,CAED,cAAc,MAAd,EAEA,OAAO,GAAP,EAEA,OAAS,iBAAT,CAEA,OAAO,GAAP,EAEA,KAAO,gBAAP,CAEA,MAAO,CACH,KAAM,OAAO,aADV,CAEH,OAAQ,MAFL,CAGH,KAAM,IAHH,CAAP,CAKH,C;AAID,QAAS,gBAAT,EAA2B,CACvB,GAAI,KAAJ,CACI,WAAa,EADjB,CAEI,SAFJ,CAIA,GAAI,aAAa,SAAb,CAAJ,CAA6B,CACzB,MACA,KAAO,IAAP,CACH,CAHD,IAGO,CACH,cAAc,MAAd,EACA,KAAO,iBAAP,CACH,CACD,OAAO,GAAP,EAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAI,MAAM,GAAN,GAAc,aAAa,SAAb,CAAd,EAAyC,aAAa,MAAb,CAA7C,CAAmE,CAC/D,MACH,CACD,UAAY,gBAAZ,CACA,GAAI,MAAO,UAAP,GAAqB,WAAzB,CAAsC,CAClC,MACH,CACD,WAAW,IAAX,CAAgB,SAAhB,EACH,CAED,MAAO,CACH,KAAM,OAAO,UADV,CAEH,KAAM,IAFH,CAGH,WAAY,UAHT,CAAP,CAKH,CAED,QAAS,qBAAT,EAAgC,CAC5B,GAAI,aAAJ,CAAkB,KAAlB,CAAyB,MAAzB,CAAiC,WAAjC,CAA8C,YAA9C,CAEA,cAAc,QAAd,EAEA,OAAO,GAAP,EAEA,aAAe,iBAAf,CAEA,OAAO,GAAP,EAEA,OAAO,GAAP,EAEA,MAAQ,EAAR,CAEA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACA,MAAO,CACH,KAAM,OAAO,eADV,CAEH,aAAc,YAFX,CAGH,MAAO,KAHJ,CAAP,CAKH,CAED,YAAc,MAAM,QAApB,CACA,MAAM,QAAN,CAAiB,IAAjB,CACA,aAAe,KAAf,CAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACH,CACD,OAAS,iBAAT,CACA,GAAI,OAAO,IAAP,GAAgB,IAApB,CAA0B,CACtB,GAAI,YAAJ,CAAkB,CACd,WAAW,EAAX,CAAe,SAAS,wBAAxB,EACH,CACD,aAAe,IAAf,CACH,CACD,MAAM,IAAN,CAAW,MAAX,EACH,CAED,MAAM,QAAN,CAAiB,WAAjB,CAEA,OAAO,GAAP,EAEA,MAAO,CACH,KAAM,OAAO,eADV,CAEH,aAAc,YAFX,CAGH,MAAO,KAHJ,CAAP,CAKH,C;AAID,QAAS,oBAAT,EAA+B,CAC3B,GAAI,SAAJ,CAEA,cAAc,OAAd,EAEA,GAAI,oBAAJ,CAA0B,CACtB,WAAW,EAAX,CAAe,SAAS,iBAAxB,EACH,CAED,SAAW,iBAAX,CAEA,mBAEA,MAAO,CACH,KAAM,OAAO,cADV,CAEH,SAAU,QAFP,CAAP,CAIH,C;AAID,QAAS,iBAAT,EAA4B,CACxB,GAAI,MAAJ,CAEA,cAAc,OAAd,EAEA,OAAO,GAAP,EACA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,gBAAgB,WAAhB,EACH,CAED,MAAQ,yBAAR,C;AAEA,GAAI,QAAU,iBAAiB,MAAM,IAAvB,CAAd,CAA4C,CACxC,mBAAmB,EAAnB,CAAuB,SAAS,mBAAhC,EACH,CAED,OAAO,GAAP,EAEA,MAAO,CACH,KAAM,OAAO,WADV,CAEH,MAAO,KAFJ,CAGH,KAAM,YAHH,CAAP,CAKH,CAED,QAAS,kBAAT,EAA6B,CACzB,GAAI,MAAJ,CAAW,SAAW,EAAtB,CAA0B,UAAY,IAAtC,CAEA,cAAc,KAAd,EAEA,MAAQ,YAAR,CAEA,GAAI,aAAa,OAAb,CAAJ,CAA2B,CACvB,SAAS,IAAT,CAAc,kBAAd,EACH,CAED,GAAI,aAAa,SAAb,CAAJ,CAA6B,CACzB,MACA,UAAY,YAAZ,CACH,CAED,GAAI,SAAS,MAAT,GAAoB,CAApB,EAAyB,CAAC,SAA9B,CAAyC,CACrC,WAAW,EAAX,CAAe,SAAS,gBAAxB,EACH,CAED,MAAO,CACH,KAAM,OAAO,YADV,CAEH,MAAO,KAFJ,CAGH,gBAAiB,EAHd,CAIH,SAAU,QAJP,CAKH,UAAW,SALR,CAAP,CAOH,C;AAID,QAAS,uBAAT,EAAkC,CAC9B,cAAc,UAAd,EAEA,mBAEA,MAAO,CACH,KAAM,OAAO,iBADV,CAAP,CAGH,C;AAID,QAAS,eAAT,EAA0B,CACtB,GAAI,OAAQ,WAAZ,CACI,IADJ,CAEI,WAFJ,CAIA,GAAI,MAAM,IAAN,GAAe,MAAM,GAAzB,CAA8B,CAC1B,gBAAgB,KAAhB,EACH,CAED,GAAI,MAAM,IAAN,GAAe,MAAM,UAAzB,CAAqC,CACjC,OAAQ,MAAM,KAAd,EACA,IAAK,GAAL,CACI,MAAO,sBAAP,CACJ,IAAK,GAAL,CACI,MAAO,aAAP,CACJ,IAAK,GAAL,CACI,MAAO,2BAAP,CACJ,QACI,MARJ,CAUH,CAED,GAAI,MAAM,IAAN,GAAe,MAAM,OAAzB,CAAkC,CAC9B,OAAQ,MAAM,KAAd,EACA,IAAK,OAAL,CACI,MAAO,sBAAP,CACJ,IAAK,UAAL,CACI,MAAO,yBAAP,CACJ,IAAK,UAAL,CACI,MAAO,yBAAP,CACJ,IAAK,IAAL,CACI,MAAO,wBAAP,CACJ,IAAK,KAAL,CACI,MAAO,oBAAP,CACJ,IAAK,UAAL,CACI,MAAO,2BAAP,CACJ,IAAK,IAAL,CACI,MAAO,mBAAP,CACJ,IAAK,QAAL,CACI,MAAO,uBAAP,CACJ,IAAK,QAAL,CACI,MAAO,uBAAP,CACJ,IAAK,OAAL,CACI,MAAO,sBAAP,CACJ,IAAK,KAAL,CACI,MAAO,oBAAP,CACJ,IAAK,KAAL,CACI,MAAO,yBAAP,CACJ,IAAK,OAAL,CACI,MAAO,sBAAP,CACJ,IAAK,MAAL,CACI,MAAO,qBAAP,CACJ,QACI,MA9BJ,CAgCH,CAED,KAAO,iBAAP,C;AAGA,GAAK,KAAK,IAAL,GAAc,OAAO,UAAtB,EAAqC,MAAM,GAAN,CAAzC,CAAqD,CACjD,MAEA,GAAI,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,MAAM,QAA3C,CAAqD,KAAK,IAA1D,CAAJ,CAAqE,CACjE,WAAW,EAAX,CAAe,SAAS,aAAxB,CAAuC,OAAvC,CAAgD,KAAK,IAArD,EACH,CAED,MAAM,QAAN,CAAe,KAAK,IAApB,EAA4B,IAA5B,CACA,YAAc,gBAAd,CACA,MAAO,OAAM,QAAN,CAAe,KAAK,IAApB,CAAP,CAEA,MAAO,CACH,KAAM,OAAO,gBADV,CAEH,MAAO,IAFJ,CAGH,KAAM,WAHH,CAAP,CAKH,CAED,mBAEA,MAAO,CACH,KAAM,OAAO,mBADV,CAEH,WAAY,IAFT,CAAP,CAIH,C;AAID,QAAS,4BAAT,EAAuC,CACnC,GAAI,cAAJ,CAAmB,eAAiB,EAApC,CAAwC,KAAxC,CAA+C,SAA/C,CAA0D,eAA1D,CACI,WADJ,CACiB,cADjB,CACiC,WADjC,CAC8C,iBAD9C,CAGA,OAAO,GAAP,EAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,MAAQ,WAAR,CACA,GAAI,MAAM,IAAN,GAAe,MAAM,aAAzB,CAAwC,CACpC,MACH,CAED,cAAgB,oBAAhB,CACA,eAAe,IAAf,CAAoB,aAApB,EACA,GAAI,cAAc,UAAd,CAAyB,IAAzB,GAAkC,OAAO,OAA7C,CAAsD,C;AAElD,MACH,CACD,UAAY,YAAY,MAAM,KAAN,CAAY,CAAZ,EAAiB,CAA7B,CAAgC,MAAM,KAAN,CAAY,CAAZ,EAAiB,CAAjD,CAAZ,CACA,GAAI,YAAc,YAAlB,CAAgC,CAC5B,OAAS,IAAT,CACA,GAAI,eAAJ,CAAqB,CACjB,mBAAmB,eAAnB,CAAoC,SAAS,kBAA7C,EACH,CACJ,CALD,IAKO,CACH,GAAI,CAAC,eAAD,EAAoB,MAAM,KAA9B,CAAqC,CACjC,gBAAkB,KAAlB,CACH,CACJ,CACJ,CAED,YAAc,MAAM,QAApB,CACA,eAAiB,MAAM,WAAvB,CACA,YAAc,MAAM,QAApB,CACA,kBAAoB,MAAM,cAA1B,CAEA,MAAM,QAAN,CAAiB,EAAjB,CACA,MAAM,WAAN,CAAoB,KAApB,CACA,MAAM,QAAN,CAAiB,KAAjB,CACA,MAAM,cAAN,CAAuB,IAAvB,CAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACH,CACD,cAAgB,oBAAhB,CACA,GAAI,MAAO,cAAP,GAAyB,WAA7B,CAA0C,CACtC,MACH,CACD,eAAe,IAAf,CAAoB,aAApB,EACH,CAED,OAAO,GAAP,EAEA,MAAM,QAAN,CAAiB,WAAjB,CACA,MAAM,WAAN,CAAoB,cAApB,CACA,MAAM,QAAN,CAAiB,WAAjB,CACA,MAAM,cAAN,CAAuB,iBAAvB,CAEA,MAAO,CACH,KAAM,OAAO,cADV,CAEH,KAAM,cAFH,CAAP,CAIH,CAED,QAAS,yBAAT,EAAoC,CAChC,GAAI,GAAJ,CAAQ,KAAR,CAAe,OAAS,EAAxB,CAA4B,IAA5B,CAAkC,KAAlC,CAAyC,QAAzC,CAAmD,eAAnD,CAAoE,OAApE,CAA6E,cAA7E,CAA6F,QAA7F,CAEA,cAAc,UAAd,EACA,MAAQ,WAAR,CACA,GAAK,yBAAL,CACA,GAAI,MAAJ,CAAY,CACR,GAAI,iBAAiB,MAAM,KAAvB,CAAJ,CAAmC,CAC/B,mBAAmB,KAAnB,CAA0B,SAAS,kBAAnC,EACH,CACJ,CAJD,IAIO,CACH,GAAI,iBAAiB,MAAM,KAAvB,CAAJ,CAAmC,CAC/B,gBAAkB,KAAlB,CACA,QAAU,SAAS,kBAAnB,CACH,CAHD,IAGO,IAAI,yBAAyB,MAAM,KAA/B,CAAJ,CAA2C,CAC9C,gBAAkB,KAAlB,CACA,QAAU,SAAS,kBAAnB,CACH,CACJ,CAED,OAAO,GAAP,EAEA,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,SAAW,EAAX,CACA,MAAO,MAAQ,MAAf,CAAuB,CACnB,MAAQ,WAAR,CACA,MAAQ,yBAAR,CACA,GAAI,MAAJ,CAAY,CACR,GAAI,iBAAiB,MAAM,KAAvB,CAAJ,CAAmC,CAC/B,SAAW,KAAX,CACA,QAAU,SAAS,eAAnB,CACH,CACD,GAAI,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,QAArC,CAA+C,MAAM,KAArD,CAAJ,CAAiE,CAC7D,SAAW,KAAX,CACA,QAAU,SAAS,eAAnB,CACH,CACJ,CATD,IASO,IAAI,CAAC,eAAL,CAAsB,CACzB,GAAI,iBAAiB,MAAM,KAAvB,CAAJ,CAAmC,CAC/B,gBAAkB,KAAlB,CACA,QAAU,SAAS,eAAnB,CACH,CAHD,IAGO,IAAI,yBAAyB,MAAM,KAA/B,CAAJ,CAA2C,CAC9C,gBAAkB,KAAlB,CACA,QAAU,SAAS,kBAAnB,CACH,CAHM,IAGA,IAAI,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,QAArC,CAA+C,MAAM,KAArD,CAAJ,CAAiE,CACpE,gBAAkB,KAAlB,CACA,QAAU,SAAS,eAAnB,CACH,CACJ,CACD,OAAO,IAAP,CAAY,KAAZ,EACA,SAAS,MAAM,IAAf,EAAuB,IAAvB,CACA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACH,CACD,OAAO,GAAP,EACH,CACJ,CAED,OAAO,GAAP,EAEA,eAAiB,MAAjB,CACA,KAAO,6BAAP,CACA,GAAI,QAAU,eAAd,CAA+B,CAC3B,WAAW,eAAX,CAA4B,OAA5B,EACH,CACD,GAAI,QAAU,QAAd,CAAwB,CACpB,mBAAmB,QAAnB,CAA6B,OAA7B,EACH,CACD,OAAS,cAAT,CAEA,MAAO,CACH,KAAM,OAAO,mBADV,CAEH,GAAI,EAFD,CAGH,OAAQ,MAHL,CAIH,SAAU,EAJP,CAKH,KAAM,IALH,CAMH,KAAM,IANH,CAOH,UAAW,KAPR,CAQH,WAAY,KART,CAAP,CAUH,CAED,QAAS,wBAAT,EAAmC,CAC/B,GAAI,MAAJ,CAAW,GAAK,IAAhB,CAAsB,QAAtB,CAAgC,eAAhC,CAAiD,OAAjD,CAA0D,KAA1D,CAAiE,OAAS,EAA1E,CAA8E,IAA9E,CAAoF,cAApF,CAAoG,QAApG,CAEA,cAAc,UAAd,EAEA,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,MAAQ,WAAR,CACA,GAAK,yBAAL,CACA,GAAI,MAAJ,CAAY,CACR,GAAI,iBAAiB,MAAM,KAAvB,CAAJ,CAAmC,CAC/B,mBAAmB,KAAnB,CAA0B,SAAS,kBAAnC,EACH,CACJ,CAJD,IAIO,CACH,GAAI,iBAAiB,MAAM,KAAvB,CAAJ,CAAmC,CAC/B,gBAAkB,KAAlB,CACA,QAAU,SAAS,kBAAnB,CACH,CAHD,IAGO,IAAI,yBAAyB,MAAM,KAA/B,CAAJ,CAA2C,CAC9C,gBAAkB,KAAlB,CACA,QAAU,SAAS,kBAAnB,CACH,CACJ,CACJ,CAED,OAAO,GAAP,EAEA,GAAI,CAAC,MAAM,GAAN,CAAL,CAAiB,CACb,SAAW,EAAX,CACA,MAAO,MAAQ,MAAf,CAAuB,CACnB,MAAQ,WAAR,CACA,MAAQ,yBAAR,CACA,GAAI,MAAJ,CAAY,CACR,GAAI,iBAAiB,MAAM,KAAvB,CAAJ,CAAmC,CAC/B,SAAW,KAAX,CACA,QAAU,SAAS,eAAnB,CACH,CACD,GAAI,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,QAArC,CAA+C,MAAM,KAArD,CAAJ,CAAiE,CAC7D,SAAW,KAAX,CACA,QAAU,SAAS,eAAnB,CACH,CACJ,CATD,IASO,IAAI,CAAC,eAAL,CAAsB,CACzB,GAAI,iBAAiB,MAAM,KAAvB,CAAJ,CAAmC,CAC/B,gBAAkB,KAAlB,CACA,QAAU,SAAS,eAAnB,CACH,CAHD,IAGO,IAAI,yBAAyB,MAAM,KAA/B,CAAJ,CAA2C,CAC9C,gBAAkB,KAAlB,CACA,QAAU,SAAS,kBAAnB,CACH,CAHM,IAGA,IAAI,OAAO,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,QAArC,CAA+C,MAAM,KAArD,CAAJ,CAAiE,CACpE,gBAAkB,KAAlB,CACA,QAAU,SAAS,eAAnB,CACH,CACJ,CACD,OAAO,IAAP,CAAY,KAAZ,EACA,SAAS,MAAM,IAAf,EAAuB,IAAvB,CACA,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,MACH,CACD,OAAO,GAAP,EACH,CACJ,CAED,OAAO,GAAP,EAEA,eAAiB,MAAjB,CACA,KAAO,6BAAP,CACA,GAAI,QAAU,eAAd,CAA+B,CAC3B,WAAW,eAAX,CAA4B,OAA5B,EACH,CACD,GAAI,QAAU,QAAd,CAAwB,CACpB,mBAAmB,QAAnB,CAA6B,OAA7B,EACH,CACD,OAAS,cAAT,CAEA,MAAO,CACH,KAAM,OAAO,kBADV,CAEH,GAAI,EAFD,CAGH,OAAQ,MAHL,CAIH,SAAU,EAJP,CAKH,KAAM,IALH,CAMH,KAAM,IANH,CAOH,UAAW,KAPR,CAQH,WAAY,KART,CAAP,CAUH,C;AAID,QAAS,mBAAT,EAA8B,CAC1B,GAAI,OAAQ,WAAZ,CAEA,GAAI,MAAM,IAAN,GAAe,MAAM,OAAzB,CAAkC,CAC9B,OAAQ,MAAM,KAAd,EACA,IAAK,OAAL,CACA,IAAK,KAAL,CACI,MAAO,0BAAyB,MAAM,KAA/B,CAAP,CACJ,IAAK,UAAL,CACI,MAAO,2BAAP,CACJ,QACI,MAAO,iBAAP,CAPJ,CASH,CAED,GAAI,MAAM,IAAN,GAAe,MAAM,GAAzB,CAA8B,CAC1B,MAAO,iBAAP,CACH,CACJ,CAED,QAAS,oBAAT,EAA+B,CAC3B,GAAI,cAAJ,CAAmB,eAAiB,EAApC,CAAwC,KAAxC,CAA+C,SAA/C,CAA0D,eAA1D,CAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,MAAQ,WAAR,CACA,GAAI,MAAM,IAAN,GAAe,MAAM,aAAzB,CAAwC,CACpC,MACH,CAED,cAAgB,oBAAhB,CACA,eAAe,IAAf,CAAoB,aAApB,EACA,GAAI,cAAc,UAAd,CAAyB,IAAzB,GAAkC,OAAO,OAA7C,CAAsD,C;AAElD,MACH,CACD,UAAY,YAAY,MAAM,KAAN,CAAY,CAAZ,EAAiB,CAA7B,CAAgC,MAAM,KAAN,CAAY,CAAZ,EAAiB,CAAjD,CAAZ,CACA,GAAI,YAAc,YAAlB,CAAgC,CAC5B,OAAS,IAAT,CACA,GAAI,eAAJ,CAAqB,CACjB,mBAAmB,eAAnB,CAAoC,SAAS,kBAA7C,EACH,CACJ,CALD,IAKO,CACH,GAAI,CAAC,eAAD,EAAoB,MAAM,KAA9B,CAAqC,CACjC,gBAAkB,KAAlB,CACH,CACJ,CACJ,CAED,MAAO,MAAQ,MAAf,CAAuB,CACnB,cAAgB,oBAAhB,CACA,GAAI,MAAO,cAAP,GAAyB,WAA7B,CAA0C,CACtC,MACH,CACD,eAAe,IAAf,CAAoB,aAApB,EACH,CACD,MAAO,eAAP,CACH,CAED,QAAS,aAAT,EAAwB,CACpB,GAAI,QAAJ,CACA,OAAS,KAAT,CACA,QAAU,CACN,KAAM,OAAO,OADP,CAEN,KAAM,qBAFA,CAAV,CAIA,MAAO,QAAP,CACH,C;;AAKD,QAAS,WAAT,CAAoB,IAApB,CAA0B,KAA1B,CAAiC,KAAjC,CAAwC,GAAxC,CAA6C,GAA7C,CAAkD,CAC9C,OAAO,MAAO,MAAP,GAAiB,QAAxB,CAAkC,kCAAlC,E;;;;AAMA,GAAI,MAAM,QAAN,CAAe,MAAf,CAAwB,CAA5B,CAA+B,CAC3B,GAAI,MAAM,QAAN,CAAe,MAAM,QAAN,CAAe,MAAf,CAAwB,CAAvC,EAA0C,KAA1C,CAAgD,CAAhD,EAAqD,KAAzD,CAAgE,CAC5D,OACH,CACJ,CAED,MAAM,QAAN,CAAe,IAAf,CAAoB,CAChB,KAAM,IADU,CAEhB,MAAO,KAFS,CAGhB,MAAO,CAAC,KAAD,CAAQ,GAAR,CAHS,CAIhB,IAAK,GAJW,CAApB,EAMH,CAED,QAAS,YAAT,EAAuB,CACnB,GAAI,QAAJ,CAAa,EAAb,CAAiB,GAAjB,CAAsB,KAAtB,CAA6B,YAA7B,CAA2C,WAA3C,CAEA,QAAU,EAAV,CACA,aAAe,KAAf,CACA,YAAc,KAAd,CAEA,MAAO,MAAQ,MAAf,CAAuB,CACnB,GAAK,OAAO,KAAP,CAAL,CAEA,GAAI,WAAJ,CAAiB,CACb,GAAK,OAAO,OAAP,CAAL,CACA,GAAI,iBAAiB,EAAjB,CAAJ,CAA0B,CACtB,IAAI,GAAJ,CAAU,CACN,KAAM,UADA,CAEN,OAAQ,MAAQ,SAAR,CAAoB,CAFtB,CAAV,CAIA,YAAc,KAAd,CACA,WAAW,MAAX,CAAmB,OAAnB,CAA4B,KAA5B,CAAmC,MAAQ,CAA3C,CAA8C,GAA9C,EACA,GAAI,KAAO,IAAP,EAAe,OAAO,KAAP,IAAkB,IAArC,CAA2C,CACvC,EAAE,KAAF,CACH,CACD,EAAE,UAAF,CACA,UAAY,KAAZ,CACA,QAAU,EAAV,CACH,CAbD,IAaO,IAAI,OAAS,MAAb,CAAqB,CACxB,YAAc,KAAd,CACA,SAAW,EAAX,CACA,IAAI,GAAJ,CAAU,CACN,KAAM,UADA,CAEN,OAAQ,OAAS,SAFX,CAAV,CAIA,WAAW,MAAX,CAAmB,OAAnB,CAA4B,KAA5B,CAAmC,MAAnC,CAA2C,GAA3C,EACH,CARM,IAQA,CACH,SAAW,EAAX,CACH,CACJ,CA1BD,IA0BO,IAAI,YAAJ,CAAkB,CACrB,GAAI,iBAAiB,EAAjB,CAAJ,CAA0B,CACtB,GAAI,KAAO,IAAP,EAAe,OAAO,MAAQ,CAAf,IAAsB,IAAzC,CAA+C,CAC3C,EAAE,KAAF,CACA,SAAW,MAAX,CACH,CAHD,IAGO,CACH,SAAW,EAAX,CACH,CACD,EAAE,UAAF,CACA,EAAE,KAAF,CACA,UAAY,KAAZ,CACA,GAAI,OAAS,MAAb,CAAqB,CACjB,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACJ,CAbD,IAaO,CACH,GAAK,OAAO,OAAP,CAAL,CACA,GAAI,OAAS,MAAb,CAAqB,CACjB,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACD,SAAW,EAAX,CACA,GAAI,KAAO,GAAX,CAAgB,CACZ,GAAK,OAAO,KAAP,CAAL,CACA,GAAI,KAAO,GAAX,CAAgB,CACZ,QAAU,QAAQ,MAAR,CAAe,CAAf,CAAkB,QAAQ,MAAR,CAAiB,CAAnC,CAAV,CACA,aAAe,KAAf,CACA,EAAE,KAAF,CACA,IAAI,GAAJ,CAAU,CACN,KAAM,UADA,CAEN,OAAQ,MAAQ,SAFV,CAAV,CAIA,WAAW,OAAX,CAAoB,OAApB,CAA6B,KAA7B,CAAoC,KAApC,CAA2C,GAA3C,EACA,QAAU,EAAV,CACH,CACJ,CACJ,CACJ,CAnCM,IAmCA,IAAI,KAAO,GAAX,CAAgB,CACnB,GAAK,OAAO,MAAQ,CAAf,CAAL,CACA,GAAI,KAAO,GAAX,CAAgB,CACZ,IAAM,CACF,MAAO,CACH,KAAM,UADH,CAEH,OAAQ,MAAQ,SAFb,CADL,CAAN,CAMA,MAAQ,KAAR,CACA,OAAS,CAAT,CACA,YAAc,IAAd,CACA,GAAI,OAAS,MAAb,CAAqB,CACjB,IAAI,GAAJ,CAAU,CACN,KAAM,UADA,CAEN,OAAQ,MAAQ,SAFV,CAAV,CAIA,YAAc,KAAd,CACA,WAAW,MAAX,CAAmB,OAAnB,CAA4B,KAA5B,CAAmC,KAAnC,CAA0C,GAA1C,EACH,CACJ,CAlBD,IAkBO,IAAI,KAAO,GAAX,CAAgB,CACnB,MAAQ,KAAR,CACA,OAAS,CAAT,CACA,aAAe,IAAf,CACA,IAAM,CACF,MAAO,CACH,KAAM,UADH,CAEH,OAAQ,MAAQ,SAAR,CAAoB,CAFzB,CADL,CAAN,CAMA,GAAI,OAAS,MAAb,CAAqB,CACjB,WAAW,EAAX,CAAe,SAAS,eAAxB,CAAyC,SAAzC,EACH,CACJ,CAbM,IAaA,CACH,MACH,CACJ,CApCM,IAoCA,IAAI,aAAa,EAAb,CAAJ,CAAsB,CACzB,EAAE,KAAF,CACH,CAFM,IAEA,IAAI,iBAAiB,EAAjB,CAAJ,CAA0B,CAC7B,EAAE,KAAF,CACA,GAAI,KAAQ,IAAR,EAAgB,OAAO,KAAP,IAAkB,IAAtC,CAA4C,CACxC,EAAE,KAAF,CACH,CACD,EAAE,UAAF,CACA,UAAY,KAAZ,CACH,CAPM,IAOA,CACH,MACH,CACJ,CACJ,CAED,QAAS,sBAAT,EAAiC,CAC7B,GAAI,EAAJ,CAAO,KAAP,CAAc,OAAd,CAAuB,SAAW,EAAlC,CAEA,IAAK,EAAI,CAAT,CAAY,EAAI,MAAM,QAAN,CAAe,MAA/B,CAAuC,EAAE,CAAzC,CAA4C,CACxC,MAAQ,MAAM,QAAN,CAAe,CAAf,CAAR,CACA,QAAU,CACN,KAAM,MAAM,IADN,CAEN,MAAO,MAAM,KAFP,CAAV,CAIA,GAAI,MAAM,KAAV,CAAiB,CACb,QAAQ,KAAR,CAAgB,MAAM,KAAtB,CACH,CACD,GAAI,MAAM,GAAV,CAAe,CACX,QAAQ,GAAR,CAAc,MAAM,GAApB,CACH,CACD,SAAS,IAAT,CAAc,OAAd,EACH,CAED,MAAM,QAAN,CAAiB,QAAjB,CACH,CAED,QAAS,aAAT,EAAwB,CACpB,GAAI,MAAJ,CAAW,GAAX,CAAgB,KAAhB,CAAuB,KAAvB,CAA8B,KAA9B,CAEA,cACA,MAAQ,KAAR,CACA,IAAM,CACF,MAAO,CACH,KAAM,UADH,CAEH,OAAQ,MAAQ,SAFb,CADL,CAAN,CAOA,MAAQ,MAAM,OAAN,EAAR,CACA,IAAI,GAAJ,CAAU,CACN,KAAM,UADA,CAEN,OAAQ,MAAQ,SAFV,CAAV,CAKA,GAAI,MAAM,IAAN,GAAe,MAAM,GAAzB,CAA8B,CAC1B,MAAQ,CAAC,MAAM,KAAN,CAAY,CAAZ,CAAD,CAAiB,MAAM,KAAN,CAAY,CAAZ,CAAjB,CAAR,CACA,MAAQ,YAAY,MAAM,KAAN,CAAY,CAAZ,CAAZ,CAA4B,MAAM,KAAN,CAAY,CAAZ,CAA5B,CAAR,CACA,MAAM,MAAN,CAAa,IAAb,CAAkB,CACd,KAAM,UAAU,MAAM,IAAhB,CADQ,CAEd,MAAO,KAFO,CAGd,MAAO,KAHO,CAId,IAAK,GAJS,CAAlB,EAMH,CAED,MAAO,MAAP,CACH,CAED,QAAS,aAAT,EAAwB,CACpB,GAAI,IAAJ,CAAS,GAAT,CAAc,KAAd,CAAqB,KAArB,CAEA,cAEA,IAAM,KAAN,CACA,IAAM,CACF,MAAO,CACH,KAAM,UADH,CAEH,OAAQ,MAAQ,SAFb,CADL,CAAN,CAOA,MAAQ,MAAM,UAAN,EAAR,CACA,IAAI,GAAJ,CAAU,CACN,KAAM,UADA,CAEN,OAAQ,MAAQ,SAFV,CAAV,C;AAMA,GAAI,MAAM,MAAN,CAAa,MAAb,CAAsB,CAA1B,CAA6B,CACzB,MAAQ,MAAM,MAAN,CAAa,MAAM,MAAN,CAAa,MAAb,CAAsB,CAAnC,CAAR,CACA,GAAI,MAAM,KAAN,CAAY,CAAZ,IAAmB,GAAnB,EAA0B,MAAM,IAAN,GAAe,YAA7C,CAA2D,CACvD,GAAI,MAAM,KAAN,GAAgB,GAAhB,EAAuB,MAAM,KAAN,GAAgB,IAA3C,CAAiD,CAC7C,MAAM,MAAN,CAAa,GAAb,GACH,CACJ,CACJ,CAED,MAAM,MAAN,CAAa,IAAb,CAAkB,CACd,KAAM,mBADQ,CAEd,MAAO,MAAM,OAFC,CAGd,MAAO,CAAC,GAAD,CAAM,KAAN,CAHO,CAId,IAAK,GAJS,CAAlB,EAOA,MAAO,MAAP,CACH,CAED,QAAS,oBAAT,EAA+B,CAC3B,GAAI,EAAJ,CAAO,KAAP,CAAc,KAAd,CAAqB,OAAS,EAA9B,CAEA,IAAK,EAAI,CAAT,CAAY,EAAI,MAAM,MAAN,CAAa,MAA7B,CAAqC,EAAE,CAAvC,CAA0C,CACtC,MAAQ,MAAM,MAAN,CAAa,CAAb,CAAR,CACA,MAAQ,CACJ,KAAM,MAAM,IADR,CAEJ,MAAO,MAAM,KAFT,CAAR,CAIA,GAAI,MAAM,KAAV,CAAiB,CACb,MAAM,KAAN,CAAc,MAAM,KAApB,CACH,CACD,GAAI,MAAM,GAAV,CAAe,CACX,MAAM,GAAN,CAAY,MAAM,GAAlB,CACH,CACD,OAAO,IAAP,CAAY,KAAZ,EACH,CAED,MAAM,MAAN,CAAe,MAAf,CACH,CAED,QAAS,cAAT,CAAuB,KAAvB,CAA8B,CAC1B,MAAO,CACH,KAAM,OAAO,OADV,CAEH,MAAO,MAAM,KAFV,CAAP,CAIH,CAED,QAAS,iBAAT,CAA0B,KAA1B,CAAiC,CAC7B,MAAO,CACH,KAAM,OAAO,OADV,CAEH,MAAO,MAAM,KAFV,CAGH,IAAK,YAAY,MAAM,KAAN,CAAY,CAAZ,CAAZ,CAA4B,MAAM,KAAN,CAAY,CAAZ,CAA5B,CAHF,CAAP,CAKH,CAED,QAAS,qBAAT,EAAgC,CAC5B,GAAI,QAAS,EAAb,CAEA,OAAO,KAAP,CAAe,CAAC,KAAD,CAAQ,KAAR,CAAf,CACA,OAAO,GAAP,CAAa,CACT,MAAO,CACH,KAAM,UADH,CAEH,OAAQ,MAAQ,SAFb,CADE,CAKT,IAAK,CACD,KAAM,UADL,CAED,OAAQ,MAAQ,SAFf,CALI,CAAb,CAWA,OAAO,GAAP,CAAa,UAAY,CACrB,KAAK,KAAL,CAAW,CAAX,EAAgB,KAAhB,CACA,KAAK,GAAL,CAAS,GAAT,CAAa,IAAb,CAAoB,UAApB,CACA,KAAK,GAAL,CAAS,GAAT,CAAa,MAAb,CAAsB,MAAQ,SAA9B,CACH,CAJD,CAMA,OAAO,UAAP,CAAoB,SAAU,IAAV,CAAgB,CAChC,GAAI,MAAM,KAAV,CAAiB,CACb,KAAK,UAAL,CAAkB,CAAC,KAAK,KAAL,CAAW,CAAX,CAAD,CAAgB,KAAK,KAAL,CAAW,CAAX,CAAhB,CAAlB,CACH,CACD,GAAI,MAAM,GAAV,CAAe,CACX,KAAK,QAAL,CAAgB,CACZ,MAAO,CACH,KAAM,KAAK,GAAL,CAAS,KAAT,CAAe,IADlB,CAEH,OAAQ,KAAK,GAAL,CAAS,KAAT,CAAe,MAFpB,CADK,CAKZ,IAAK,CACD,KAAM,KAAK,GAAL,CAAS,GAAT,CAAa,IADlB,CAED,OAAQ,KAAK,GAAL,CAAS,GAAT,CAAa,MAFpB,CALO,CAAhB,CAUH,CACJ,CAhBD,CAkBA,OAAO,KAAP,CAAe,SAAU,IAAV,CAAgB,CAC3B,GAAI,MAAM,KAAV,CAAiB,CACb,KAAK,KAAL,CAAa,CAAC,KAAK,KAAL,CAAW,CAAX,CAAD,CAAgB,KAAK,KAAL,CAAW,CAAX,CAAhB,CAAb,CACH,CACD,GAAI,MAAM,GAAV,CAAe,CACX,KAAK,GAAL,CAAW,CACP,MAAO,CACH,KAAM,KAAK,GAAL,CAAS,KAAT,CAAe,IADlB,CAEH,OAAQ,KAAK,GAAL,CAAS,KAAT,CAAe,MAFpB,CADA,CAKP,IAAK,CACD,KAAM,KAAK,GAAL,CAAS,GAAT,CAAa,IADlB,CAED,OAAQ,KAAK,GAAL,CAAS,GAAT,CAAa,MAFpB,CALE,CAAX,CAUH,CACJ,CAhBD,CAkBA,MAAO,OAAP,CACH,CAED,QAAS,qBAAT,EAAgC,CAC5B,GAAI,OAAJ,CAAY,IAAZ,CAEA,cACA,OAAS,sBAAT,CACA,OAAO,GAAP,EAEA,KAAO,iBAAP,CAEA,OAAO,GAAP,EAEA,OAAO,GAAP,GACA,OAAO,UAAP,CAAkB,IAAlB,EAEA,MAAO,KAAP,CACH,CAED,QAAS,4BAAT,EAAuC,CACnC,GAAI,OAAJ,CAAY,IAAZ,CAEA,cACA,OAAS,sBAAT,CAEA,KAAO,aAAa,KAAb,EAAsB,oBAAtB,CAA6C,wBAApD,CAEA,MAAO,MAAM,GAAN,GAAc,MAAM,GAAN,CAArB,CAAiC,CAC7B,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,IAFP,CAGH,OAAQ,IAHL,CAIH,SAAU,qBAJP,CAAP,CAMA,OAAO,GAAP,GACA,OAAO,KAAP,CAAa,IAAb,EACH,CATD,IASO,CACH,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,KAFP,CAGH,OAAQ,IAHL,CAIH,SAAU,wBAJP,CAAP,CAMA,OAAO,GAAP,GACA,OAAO,KAAP,CAAa,IAAb,EACH,CACJ,CAED,MAAO,KAAP,CACH,CAED,QAAS,qCAAT,EAAgD,CAC5C,GAAI,OAAJ,CAAY,IAAZ,CAEA,cACA,OAAS,sBAAT,CAEA,KAAO,aAAa,KAAb,EAAsB,oBAAtB,CAA6C,wBAApD,CAEA,MAAO,MAAM,GAAN,GAAc,MAAM,GAAN,CAAd,EAA4B,MAAM,GAAN,CAAnC,CAA+C,CAC3C,GAAI,MAAM,GAAN,CAAJ,CAAgB,CACZ,KAAO,CACH,KAAM,OAAO,cADV,CAEH,OAAQ,IAFL,CAGH,YAAa,gBAHV,CAAP,CAKA,OAAO,GAAP,GACA,OAAO,KAAP,CAAa,IAAb,EACH,CARD,IAQO,IAAI,MAAM,GAAN,CAAJ,CAAgB,CACnB,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,IAFP,CAGH,OAAQ,IAHL,CAIH,SAAU,qBAJP,CAAP,CAMA,OAAO,GAAP,GACA,OAAO,KAAP,CAAa,IAAb,EACH,CATM,IASA,CACH,KAAO,CACH,KAAM,OAAO,gBADV,CAEH,SAAU,KAFP,CAGH,OAAQ,IAHL,CAIH,SAAU,wBAJP,CAAP,CAMA,OAAO,GAAP,GACA,OAAO,KAAP,CAAa,IAAb,EACH,CACJ,CAED,MAAO,KAAP,CACH,CAED,QAAS,YAAT,CAAqB,IAArB,CAA2B,CACvB,GAAI,EAAJ,CAAO,CAAP,CAAU,KAAV,CAEA,EAAK,OAAO,SAAP,CAAiB,QAAjB,CAA0B,KAA1B,CAAgC,IAAhC,IAA0C,gBAA3C,CAA+D,EAA/D,CAAoE,EAAxE,CACA,IAAK,CAAL,GAAU,KAAV,CAAgB,CACZ,GAAI,KAAK,cAAL,CAAoB,CAApB,GAA0B,IAAM,YAAhC,EAAgD,IAAM,UAA1D,CAAsE,CAClE,MAAQ,KAAK,CAAL,CAAR,CACA,GAAI,QAAU,IAAV,EAAkB,OAAO,MAAP,mCAAO,KAAP,KAAiB,QAAnC,EAA+C,gBAAiB,OAApE,CAA4E,CACxE,EAAE,CAAF,EAAO,KAAP,CACH,CAFD,IAEO,CACH,EAAE,CAAF,EAAO,YAAY,KAAZ,CAAP,CACH,CACJ,CACJ,CACD,MAAO,EAAP,CACH,CAED,QAAS,qBAAT,CAA8B,KAA9B,CAAqC,GAArC,CAA0C,CAEtC,MAAO,UAAU,aAAV,CAAyB,CAE5B,QAAS,SAAT,CAAkB,IAAlB,CAAwB,CACpB,MAAO,MAAK,IAAL,GAAc,OAAO,iBAArB,EACH,KAAK,IAAL,GAAc,OAAO,gBADzB,CAEH,CAED,QAAS,MAAT,CAAe,IAAf,CAAqB,CACjB,GAAI,MAAJ,CAAW,GAAX,CAEA,GAAI,SAAS,KAAK,IAAd,CAAJ,CAAyB,CACrB,MAAM,KAAK,IAAX,EACH,CACD,GAAI,SAAS,KAAK,KAAd,CAAJ,CAA0B,CACtB,MAAM,KAAK,KAAX,EACH,CAED,GAAI,KAAJ,CAAW,CACP,GAAI,KAAK,IAAL,CAAU,UAAV,EAAwB,KAAK,KAAL,CAAW,UAAvC,CAAmD,CAC/C,MAAQ,KAAK,IAAL,CAAU,UAAV,CAAuB,KAAK,IAAL,CAAU,UAAV,CAAqB,CAArB,CAAvB,CAAiD,KAAK,IAAL,CAAU,KAAV,CAAgB,CAAhB,CAAzD,CACA,IAAM,KAAK,KAAL,CAAW,UAAX,CAAwB,KAAK,KAAL,CAAW,UAAX,CAAsB,CAAtB,CAAxB,CAAmD,KAAK,KAAL,CAAW,KAAX,CAAiB,CAAjB,CAAzD,CACA,KAAK,KAAL,CAAa,CAAC,KAAD,CAAQ,GAAR,CAAb,CACH,CAJD,IAIO,IAAI,MAAO,MAAK,KAAZ,GAAsB,WAA1B,CAAuC,CAC1C,MAAQ,KAAK,IAAL,CAAU,KAAV,CAAgB,CAAhB,CAAR,CACA,IAAM,KAAK,KAAL,CAAW,KAAX,CAAiB,CAAjB,CAAN,CACA,KAAK,KAAL,CAAa,CAAC,KAAD,CAAQ,GAAR,CAAb,CACH,CACJ,CACD,GAAI,GAAJ,CAAS,CACL,GAAI,KAAK,IAAL,CAAU,QAAV,EAAsB,KAAK,KAAL,CAAW,QAArC,CAA+C,CAC3C,MAAQ,KAAK,IAAL,CAAU,QAAV,CAAqB,KAAK,IAAL,CAAU,QAAV,CAAmB,KAAxC,CAAgD,KAAK,IAAL,CAAU,GAAV,CAAc,KAAtE,CACA,IAAM,KAAK,KAAL,CAAW,QAAX,CAAsB,KAAK,KAAL,CAAW,QAAX,CAAoB,GAA1C,CAAgD,KAAK,KAAL,CAAW,GAAX,CAAe,GAArE,CACA,KAAK,GAAL,CAAW,CACP,MAAO,KADA,CAEP,IAAK,GAFE,CAAX,CAIH,CAPD,IAOO,IAAI,MAAO,MAAK,GAAZ,GAAoB,WAAxB,CAAqC,CACxC,KAAK,GAAL,CAAW,CACP,MAAO,KAAK,IAAL,CAAU,GAAV,CAAc,KADd,CAEP,IAAK,KAAK,KAAL,CAAW,GAAX,CAAe,GAFb,CAAX,CAIH,CACJ,CACJ,CAED,MAAO,WAAY,CACf,GAAI,OAAJ,CAAY,IAAZ,CAEA,cAEA,OAAS,sBAAT,CACA,KAAO,cAAc,KAAd,CAAoB,IAApB,CAA0B,SAA1B,CAAP,CACA,OAAO,GAAP,GAEA,GAAI,OAAS,MAAO,MAAK,KAAZ,GAAsB,WAAnC,CAAgD,CAC5C,OAAO,KAAP,CAAa,IAAb,EACH,CAED,GAAI,KAAO,MAAO,MAAK,GAAZ,GAAoB,WAA/B,CAA4C,CACxC,OAAO,KAAP,CAAa,IAAb,EACH,CAED,GAAI,SAAS,IAAT,CAAJ,CAAoB,CAChB,MAAM,IAAN,EACH,CAED,MAAO,KAAP,CACH,CAtBD,CAuBH,CApED,CAqEH,CAED,QAAS,MAAT,EAAiB,CAEb,GAAI,aAAJ,CAEA,GAAI,MAAM,QAAV,CAAoB,CAChB,MAAM,WAAN,CAAoB,WAApB,CACA,YAAc,WAAd,CACH,CAED,GAAI,MAAM,GAAV,CAAe,CACX,MAAM,aAAN,CAAsB,aAAtB,CACA,cAAgB,gBAAhB,CACH,CAED,GAAI,MAAM,KAAN,EAAe,MAAM,GAAzB,CAA8B,CAE1B,MAAM,oBAAN,CAA6B,oBAA7B,CACA,MAAM,2BAAN,CAAoC,2BAApC,CACA,MAAM,oCAAN,CAA6C,oCAA7C,CACA,qBAAuB,oBAAvB,CACA,4BAA8B,2BAA9B,CACA,qCAAuC,oCAAvC,CAEA,aAAe,qBAAqB,MAAM,KAA3B,CAAkC,MAAM,GAAxC,CAAf,CAEA,MAAM,uBAAN,CAAgC,uBAAhC,CACA,MAAM,yBAAN,CAAkC,yBAAlC,CACA,MAAM,yBAAN,CAAkC,yBAAlC,CACA,MAAM,wBAAN,CAAiC,wBAAjC,CACA,MAAM,yBAAN,CAAkC,yBAAlC,CACA,MAAM,UAAN,CAAmB,UAAnB,CACA,MAAM,2BAAN,CAAoC,2BAApC,CACA,MAAM,gBAAN,CAAyB,gBAAzB,CACA,MAAM,mBAAN,CAA4B,mBAA5B,CACA,MAAM,0BAAN,CAAmC,0BAAnC,CACA,MAAM,wBAAN,CAAiC,wBAAjC,CACA,MAAM,uBAAN,CAAgC,uBAAhC,CACA,MAAM,eAAN,CAAwB,eAAxB,CACA,MAAM,2BAAN,CAAoC,2BAApC,CACA,MAAM,wBAAN,CAAiC,wBAAjC,CACA,MAAM,uBAAN,CAAgC,uBAAhC,CACA,MAAM,yBAAN,CAAkC,yBAAlC,CACA,MAAM,wBAAN,CAAiC,wBAAjC,CACA,MAAM,6BAAN,CAAsC,6BAAtC,CACA,MAAM,kBAAN,CAA2B,kBAA3B,CACA,MAAM,wBAAN,CAAiC,wBAAjC,CACA,MAAM,mBAAN,CAA4B,mBAA5B,CACA,MAAM,sBAAN,CAA+B,sBAA/B,CACA,MAAM,sBAAN,CAA+B,sBAA/B,CACA,MAAM,sBAAN,CAA+B,sBAA/B,CACA,MAAM,YAAN,CAAqB,YAArB,CACA,MAAM,qBAAN,CAA8B,qBAA9B,CACA,MAAM,yBAAN,CAAkC,yBAAlC,CACA,MAAM,cAAN,CAAuB,cAAvB,CACA,MAAM,oBAAN,CAA6B,oBAA7B,CACA,MAAM,eAAN,CAAwB,eAAxB,CACA,MAAM,oBAAN,CAA6B,oBAA7B,CACA,MAAM,wBAAN,CAAiC,wBAAjC,CACA,MAAM,uBAAN,CAAgC,uBAAhC,CAEA,wBAA0B,aAAa,MAAM,uBAAnB,CAA1B,CACA,0BAA4B,aAAa,MAAM,yBAAnB,CAA5B,CACA,0BAA4B,aAAa,MAAM,yBAAnB,CAA5B,CACA,yBAA2B,aAAa,MAAM,wBAAnB,CAA3B,CACA,0BAA4B,aAAa,MAAM,yBAAnB,CAA5B,CACA,WAAa,aAAa,MAAM,UAAnB,CAAb,CACA,4BAA8B,aAAa,MAAM,2BAAnB,CAA9B,CACA,iBAAmB,aAAa,MAAM,gBAAnB,CAAnB,CACA,oBAAsB,aAAa,MAAM,mBAAnB,CAAtB,CACA,2BAA6B,aAAa,MAAM,0BAAnB,CAA7B,CACA,yBAA2B,aAAa,MAAM,wBAAnB,CAA3B,CACA,wBAA0B,aAAa,MAAM,uBAAnB,CAA1B,CACA,gBAAkB,aAAa,MAAM,eAAnB,CAAlB,CACA,4BAA8B,aAAa,MAAM,2BAAnB,CAA9B,CACA,yBAA2B,aAAa,MAAM,wBAAnB,CAA3B,CACA,wBAA0B,aAAa,MAAM,uBAAnB,CAA1B,CACA,4BAA8B,aAAa,2BAAb,CAA9B,CACA,0BAA4B,aAAa,MAAM,yBAAnB,CAA5B,CACA,yBAA2B,aAAa,MAAM,wBAAnB,CAA3B,CACA,8BAAgC,aAAa,MAAM,6BAAnB,CAAhC,CACA,mBAAqB,aAAa,MAAM,kBAAnB,CAArB,CACA,yBAA2B,aAAa,MAAM,wBAAnB,CAA3B,CACA,oBAAsB,aAAa,MAAM,mBAAnB,CAAtB,CACA,uBAAyB,aAAa,MAAM,sBAAnB,CAAzB,CACA,uBAAyB,aAAa,MAAM,sBAAnB,CAAzB,CACA,uBAAyB,aAAa,MAAM,sBAAnB,CAAzB,CACA,aAAe,aAAa,MAAM,YAAnB,CAAf,CACA,sBAAwB,aAAa,MAAM,qBAAnB,CAAxB,CACA,0BAA4B,aAAa,MAAM,yBAAnB,CAA5B,CACA,eAAiB,aAAa,MAAM,cAAnB,CAAjB,CACA,qBAAuB,aAAa,MAAM,oBAAnB,CAAvB,CACA,gBAAkB,aAAa,MAAM,eAAnB,CAAlB,CACA,qBAAuB,aAAa,MAAM,oBAAnB,CAAvB,CACA,yBAA2B,aAAa,MAAM,wBAAnB,CAA3B,CACA,wBAA0B,aAAa,MAAM,uBAAnB,CAA1B,CACH,CAED,GAAI,MAAO,OAAM,MAAb,GAAwB,WAA5B,CAAyC,CACrC,MAAM,OAAN,CAAgB,OAAhB,CACA,MAAM,UAAN,CAAmB,UAAnB,CAEA,QAAU,YAAV,CACA,WAAa,YAAb,CACH,CACJ,CAED,QAAS,QAAT,EAAmB,CACf,GAAI,MAAO,OAAM,WAAb,GAA6B,UAAjC,CAA6C,CACzC,YAAc,MAAM,WAApB,CACH,CAED,GAAI,MAAM,GAAV,CAAe,CACX,cAAgB,MAAM,aAAtB,CACH,CAED,GAAI,MAAM,KAAN,EAAe,MAAM,GAAzB,CAA8B,CAC1B,wBAA0B,MAAM,uBAAhC,CACA,0BAA4B,MAAM,yBAAlC,CACA,0BAA4B,MAAM,yBAAlC,CACA,yBAA2B,MAAM,wBAAjC,CACA,0BAA4B,MAAM,yBAAlC,CACA,WAAa,MAAM,UAAnB,CACA,4BAA8B,MAAM,2BAApC,CACA,iBAAmB,MAAM,gBAAzB,CACA,oBAAsB,MAAM,mBAA5B,CACA,2BAA6B,MAAM,0BAAnC,CACA,yBAA2B,MAAM,wBAAjC,CACA,wBAA0B,MAAM,uBAAhC,CACA,gBAAkB,MAAM,eAAxB,CACA,4BAA8B,MAAM,2BAApC,CACA,yBAA2B,MAAM,wBAAjC,CACA,wBAA0B,MAAM,uBAAhC,CACA,qBAAuB,MAAM,oBAA7B,CACA,4BAA8B,MAAM,2BAApC,CACA,qCAAuC,MAAM,oCAA7C,CACA,0BAA4B,MAAM,yBAAlC,CACA,yBAA2B,MAAM,wBAAjC,CACA,8BAAgC,MAAM,6BAAtC,CACA,mBAAqB,MAAM,kBAA3B,CACA,yBAA2B,MAAM,wBAAjC,CACA,oBAAsB,MAAM,mBAA5B,CACA,uBAAyB,MAAM,sBAA/B,CACA,uBAAyB,MAAM,sBAA/B,CACA,uBAAyB,MAAM,sBAA/B,CACA,aAAe,MAAM,YAArB,CACA,sBAAwB,MAAM,qBAA9B,CACA,0BAA4B,MAAM,yBAAlC,CACA,eAAiB,MAAM,cAAvB,CACA,qBAAuB,MAAM,oBAA7B,CACA,gBAAkB,MAAM,eAAxB,CACA,qBAAuB,MAAM,oBAA7B,CACA,yBAA2B,MAAM,wBAAjC,CACA,wBAA0B,MAAM,uBAAhC,CACH,CAED,GAAI,MAAO,OAAM,UAAb,GAA4B,UAAhC,CAA4C,CACxC,QAAU,MAAM,OAAhB,CACA,WAAa,MAAM,UAAnB,CACH,CACJ,CAED,QAAS,cAAT,CAAuB,GAAvB,CAA4B,CACxB,GAAI,QAAS,IAAI,MAAjB,CACI,OAAS,EADb,CAEI,CAFJ,CAGA,IAAK,EAAI,CAAT,CAAY,EAAI,MAAhB,CAAwB,EAAE,CAA1B,CAA6B,CACzB,OAAO,CAAP,EAAY,IAAI,MAAJ,CAAW,CAAX,CAAZ,CACH,CACD,MAAO,OAAP,CACH,CAED,QAAS,MAAT,CAAe,IAAf,CAAqB,OAArB,CAA8B,CAC1B,GAAI,QAAJ,CAAa,QAAb,CAEA,SAAW,MAAX,CACA,GAAI,MAAO,KAAP,GAAgB,QAAhB,EAA4B,EAAE,eAAgB,OAAlB,CAAhC,CAA2D,CACvD,KAAO,SAAS,IAAT,CAAP,CACH,CAED,OAAS,IAAT,CACA,MAAQ,CAAR,CACA,WAAc,OAAO,MAAP,CAAgB,CAAjB,CAAsB,CAAtB,CAA0B,CAAvC,CACA,UAAY,CAAZ,CACA,OAAS,OAAO,MAAhB,CACA,OAAS,IAAT,CACA,MAAQ,CACJ,QAAS,IADL,CAEJ,SAAU,EAFN,CAGJ,eAAgB,KAHZ,CAIJ,YAAa,KAJT,CAKJ,SAAU,KALN,CAAR,CAQA,MAAQ,EAAR,CACA,GAAI,MAAO,QAAP,GAAmB,WAAvB,CAAoC,CAChC,MAAM,KAAN,CAAe,MAAO,SAAQ,KAAf,GAAyB,SAA1B,EAAwC,QAAQ,KAA9D,CACA,MAAM,GAAN,CAAa,MAAO,SAAQ,GAAf,GAAuB,SAAxB,EAAsC,QAAQ,GAA1D,CACA,MAAM,GAAN,CAAa,MAAO,SAAQ,GAAf,GAAuB,SAAxB,EAAsC,QAAQ,GAA1D,CACA,GAAI,MAAO,SAAQ,MAAf,GAA0B,SAA1B,EAAuC,QAAQ,MAAnD,CAA2D,CACvD,MAAM,MAAN,CAAe,EAAf,CACH,CACD,GAAI,MAAO,SAAQ,OAAf,GAA2B,SAA3B,EAAwC,QAAQ,OAApD,CAA6D,CACzD,MAAM,QAAN,CAAiB,EAAjB,CACH,CACD,GAAI,MAAO,SAAQ,QAAf,GAA4B,SAA5B,EAAyC,QAAQ,QAArD,CAA+D,CAC3D,MAAM,MAAN,CAAe,EAAf,CACH,CACJ,CAED,GAAI,OAAS,CAAb,CAAgB,CACZ,GAAI,MAAO,QAAO,CAAP,CAAP,GAAqB,WAAzB,CAAsC,C;;;AAIlC,GAAI,eAAgB,OAApB,CAA4B,CACxB,OAAS,KAAK,OAAL,EAAT,CACH,C;AAGD,GAAI,MAAO,QAAO,CAAP,CAAP,GAAqB,WAAzB,CAAsC,CAClC,OAAS,cAAc,IAAd,CAAT,CACH,CACJ,CACJ,CAED,QACA,GAAI,CACA,QAAU,cAAV,CACA,GAAI,MAAO,OAAM,QAAb,GAA0B,WAA9B,CAA2C,CACvC,wBACA,QAAQ,QAAR,CAAmB,MAAM,QAAzB,CACH,CACD,GAAI,MAAO,OAAM,MAAb,GAAwB,WAA5B,CAAyC,CACrC,sBACA,QAAQ,MAAR,CAAiB,MAAM,MAAvB,CACH,CACD,GAAI,MAAO,OAAM,MAAb,GAAwB,WAA5B,CAAyC,CACrC,QAAQ,MAAR,CAAiB,MAAM,MAAvB,CACH,CACD,GAAI,MAAM,KAAN,EAAe,MAAM,GAAzB,CAA8B,CAC1B,QAAQ,IAAR,CAAe,YAAY,QAAQ,IAApB,CAAf,CACH,CACJ,CAAC,MAAO,CAAP,CAAU,CACR,KAAM,EAAN,CACH,CAlBD,OAkBU,CACN,UACA,MAAQ,EAAR,CACH,CAED,MAAO,QAAP,CACH,C;AAGD,QAAQ,OAAR,CAAkB,OAAlB,CAEA,QAAQ,KAAR,CAAgB,KAAhB,C;AAGA,QAAQ,MAAR,CAAkB,UAAY,CAC1B,GAAI,KAAJ,CAAU,MAAQ,EAAlB,CAEA,GAAI,MAAO,QAAO,MAAd,GAAyB,UAA7B,CAAyC,CACrC,MAAQ,OAAO,MAAP,CAAc,IAAd,CAAR,CACH,CAED,IAAK,IAAL,GAAa,OAAb,CAAqB,CACjB,GAAI,OAAO,cAAP,CAAsB,IAAtB,CAAJ,CAAiC,CAC7B,MAAM,IAAN,EAAc,OAAO,IAAP,CAAd,CACH,CACJ,CAED,GAAI,MAAO,QAAO,MAAd,GAAyB,UAA7B,CAAyC,CACrC,OAAO,MAAP,CAAc,KAAd,EACH,CAED,MAAO,MAAP,CACH,CAlBiB,EAAlB,CAoBH,CA3xHA,CAAD,C","file":"esprima-compiled.js","sourcesContent":["/*\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint bitwise:true plusplus:true */\n/*global esprima:true, define:true, exports:true, window: true,\nthrowError: true, createLiteral: true, generateStatement: true,\nparseAssignmentExpression: true, parseBlock: true, parseExpression: true,\nparseFunctionDeclaration: true, parseFunctionExpression: true,\nparseFunctionSourceElements: true, parseVariableIdentifier: true,\nparseLeftHandSideExpression: true,\nparseStatement: true, parseSourceElement: true */\n\n(function (root, factory) {\n    'use strict';\n\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\n    // Rhino, and plain browser loading.\n    if (typeof define === 'function' && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== 'undefined') {\n        factory(exports);\n    } else {\n        factory((root.esprima = {}));\n    }\n}(this, function (exports) {\n    'use strict';\n\n    var Token,\n        TokenName,\n        Syntax,\n        PropertyKind,\n        Messages,\n        Regex,\n        source,\n        strict,\n        index,\n        lineNumber,\n        lineStart,\n        length,\n        buffer,\n        state,\n        extra;\n\n    Token = {\n        BooleanLiteral: 1,\n        EOF: 2,\n        Identifier: 3,\n        Keyword: 4,\n        NullLiteral: 5,\n        NumericLiteral: 6,\n        Punctuator: 7,\n        StringLiteral: 8\n    };\n\n    TokenName = {};\n    TokenName[Token.BooleanLiteral] = 'Boolean';\n    TokenName[Token.EOF] = '<end>';\n    TokenName[Token.Identifier] = 'Identifier';\n    TokenName[Token.Keyword] = 'Keyword';\n    TokenName[Token.NullLiteral] = 'Null';\n    TokenName[Token.NumericLiteral] = 'Numeric';\n    TokenName[Token.Punctuator] = 'Punctuator';\n    TokenName[Token.StringLiteral] = 'String';\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement'\n    };\n\n    PropertyKind = {\n        Data: 1,\n        Get: 2,\n        Set: 4\n    };\n\n    // Error messages should be identical to V8.\n    Messages = {\n        UnexpectedToken:  'Unexpected token %0',\n        UnexpectedNumber:  'Unexpected number',\n        UnexpectedString:  'Unexpected string',\n        UnexpectedIdentifier:  'Unexpected identifier',\n        UnexpectedReserved:  'Unexpected reserved word',\n        UnexpectedEOS:  'Unexpected end of input',\n        NewlineAfterThrow:  'Illegal newline after throw',\n        InvalidRegExp: 'Invalid regular expression',\n        UnterminatedRegExp:  'Invalid regular expression: missing /',\n        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',\n        InvalidLHSInForIn:  'Invalid left-hand side in for-in',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NoCatchOrFinally:  'Missing catch or finally after try',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalBreak: 'Illegal break statement',\n        IllegalReturn: 'Illegal return statement',\n        StrictModeWith:  'Strict mode code may not include a with statement',\n        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',\n        StrictVarName:  'Variable name may not be eval or arguments in strict mode',\n        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',\n        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',\n        StrictDelete:  'Delete of an unqualified identifier in strict mode.',\n        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',\n        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',\n        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',\n        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictReservedWord:  'Use of future reserved word in strict mode'\n    };\n\n    // See also tools/generate-unicode-regex.py.\n    Regex = {\n        NonAsciiIdentifierStart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]'),\n        NonAsciiIdentifierPart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u0487\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0610-\\u061a\\u0620-\\u0669\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07c0-\\u07f5\\u07fa\\u0800-\\u082d\\u0840-\\u085b\\u08a0\\u08a2-\\u08ac\\u08e4-\\u08fe\\u0900-\\u0963\\u0966-\\u096f\\u0971-\\u0977\\u0979-\\u097f\\u0981-\\u0983\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc\\u09dd\\u09df-\\u09e3\\u09e6-\\u09f1\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5c\\u0b5d\\u0b5f-\\u0b63\\u0b66-\\u0b6f\\u0b71\\u0b82\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c58\\u0c59\\u0c60-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0ce6-\\u0cef\\u0cf1\\u0cf2\\u0d02\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d57\\u0d60-\\u0d63\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d82\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e50-\\u0e59\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb9\\u0ebb-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1049\\u1050-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772\\u1773\\u1780-\\u17d3\\u17d7\\u17dc\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1aa7\\u1b00-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1bf3\\u1c00-\\u1c37\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1cd0-\\u1cd2\\u1cd4-\\u1cf6\\u1d00-\\u1de6\\u1dfc-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u200c\\u200d\\u203f\\u2040\\u2054\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u2e2f\\u3005-\\u3007\\u3021-\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u3099\\u309a\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66f\\ua674-\\ua67d\\ua67f-\\ua697\\ua69f-\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua827\\ua840-\\ua873\\ua880-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f7\\ua8fb\\ua900-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf-\\ua9d9\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa50-\\uaa59\\uaa60-\\uaa76\\uaa7a\\uaa7b\\uaa80-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]')\n    };\n\n    // Ensure the condition is true, otherwise throw an error.\n    // This is only to have a better contract semantic, i.e. another safety net\n    // to catch a logic error. The condition shall be fulfilled in normal case.\n    // Do NOT use this to enforce a certain condition on any user input.\n\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error('ASSERT: ' + message);\n        }\n    }\n\n    function sliceSource(from, to) {\n        return source.slice(from, to);\n    }\n\n    if (typeof 'esprima'[0] === 'undefined') {\n        sliceSource = function sliceArraySource(from, to) {\n            return source.slice(from, to).join('');\n        };\n    }\n\n    function isDecimalDigit(ch) {\n        return '0123456789'.indexOf(ch) >= 0;\n    }\n\n    function isHexDigit(ch) {\n        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n    }\n\n    function isOctalDigit(ch) {\n        return '01234567'.indexOf(ch) >= 0;\n    }\n\n\n    // 7.2 White Space\n\n    function isWhiteSpace(ch) {\n        return (ch === ' ') || (ch === '\\u0009') || (ch === '\\u000B') ||\n            (ch === '\\u000C') || (ch === '\\u00A0') ||\n            (ch.charCodeAt(0) >= 0x1680 &&\n             '\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\uFEFF'.indexOf(ch) >= 0);\n    }\n\n    // 7.3 Line Terminators\n\n    function isLineTerminator(ch) {\n        return (ch === '\\n' || ch === '\\r' || ch === '\\u2028' || ch === '\\u2029');\n    }\n\n    // 7.6 Identifier Names and Identifiers\n\n    function isIdentifierStart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierStart.test(ch));\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch >= '0') && (ch <= '9')) ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierPart.test(ch));\n    }\n\n    // 7.6.1.2 Future Reserved Words\n\n    function isFutureReservedWord(id) {\n        switch (id) {\n\n        // Future reserved words.\n        case 'class':\n        case 'enum':\n        case 'export':\n        case 'extends':\n        case 'import':\n        case 'super':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isStrictModeReservedWord(id) {\n        switch (id) {\n\n        // Strict Mode reserved words.\n        case 'implements':\n        case 'interface':\n        case 'package':\n        case 'private':\n        case 'protected':\n        case 'public':\n        case 'static':\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n    }\n\n    // 7.6.1.1 Keywords\n\n    function isKeyword(id) {\n        var keyword = false;\n        switch (id.length) {\n        case 2:\n            keyword = (id === 'if') || (id === 'in') || (id === 'do');\n            break;\n        case 3:\n            keyword = (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');\n            break;\n        case 4:\n            keyword = (id === 'this') || (id === 'else') || (id === 'case') || (id === 'void') || (id === 'with');\n            break;\n        case 5:\n            keyword = (id === 'while') || (id === 'break') || (id === 'catch') || (id === 'throw');\n            break;\n        case 6:\n            keyword = (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch');\n            break;\n        case 7:\n            keyword = (id === 'default') || (id === 'finally');\n            break;\n        case 8:\n            keyword = (id === 'function') || (id === 'continue') || (id === 'debugger');\n            break;\n        case 10:\n            keyword = (id === 'instanceof');\n            break;\n        }\n\n        if (keyword) {\n            return true;\n        }\n\n        switch (id) {\n        // Future reserved words.\n        // 'const' is specialized as Keyword in V8.\n        case 'const':\n            return true;\n\n        // For compatiblity to SpiderMonkey and ES.next\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        if (strict && isStrictModeReservedWord(id)) {\n            return true;\n        }\n\n        return isFutureReservedWord(id);\n    }\n\n    // 7.4 Comments\n\n    function skipComment() {\n        var ch, blockComment, lineComment;\n\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = source[index++];\n                if (isLineTerminator(ch)) {\n                    lineComment = false;\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = source[index++];\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            ++index;\n                            blockComment = false;\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    index += 2;\n                    lineComment = true;\n                } else if (ch === '*') {\n                    index += 2;\n                    blockComment = true;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function scanHexEscape(prefix) {\n        var i, len, ch, code = 0;\n\n        len = (prefix === 'u') ? 4 : 2;\n        for (i = 0; i < len; ++i) {\n            if (index < length && isHexDigit(source[index])) {\n                ch = source[index++];\n                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n            } else {\n                return '';\n            }\n        }\n        return String.fromCharCode(code);\n    }\n\n    function scanIdentifier() {\n        var ch, start, id, restore;\n\n        ch = source[index];\n        if (!isIdentifierStart(ch)) {\n            return;\n        }\n\n        start = index;\n        if (ch === '\\\\') {\n            ++index;\n            if (source[index] !== 'u') {\n                return;\n            }\n            ++index;\n            restore = index;\n            ch = scanHexEscape('u');\n            if (ch) {\n                if (ch === '\\\\' || !isIdentifierStart(ch)) {\n                    return;\n                }\n                id = ch;\n            } else {\n                index = restore;\n                id = 'u';\n            }\n        } else {\n            id = source[index++];\n        }\n\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n            if (ch === '\\\\') {\n                ++index;\n                if (source[index] !== 'u') {\n                    return;\n                }\n                ++index;\n                restore = index;\n                ch = scanHexEscape('u');\n                if (ch) {\n                    if (ch === '\\\\' || !isIdentifierPart(ch)) {\n                        return;\n                    }\n                    id += ch;\n                } else {\n                    index = restore;\n                    id += 'u';\n                }\n            } else {\n                id += source[index++];\n            }\n        }\n\n        // There is no keyword or literal with only one character.\n        // Thus, it must be an identifier.\n        if (id.length === 1) {\n            return {\n                type: Token.Identifier,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (isKeyword(id)) {\n            return {\n                type: Token.Keyword,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.1 Null Literals\n\n        if (id === 'null') {\n            return {\n                type: Token.NullLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.2 Boolean Literals\n\n        if (id === 'true' || id === 'false') {\n            return {\n                type: Token.BooleanLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        return {\n            type: Token.Identifier,\n            value: id,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.7 Punctuators\n\n    function scanPunctuator() {\n        var start = index,\n            ch1 = source[index],\n            ch2,\n            ch3,\n            ch4;\n\n        // Check for most common single-character punctuators.\n\n        if (ch1 === ';' || ch1 === '{' || ch1 === '}') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === ',' || ch1 === '(' || ch1 === ')') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Dot (.) can also start a floating-point number, hence the need\n        // to check the next character.\n\n        ch2 = source[index + 1];\n        if (ch1 === '.' && !isDecimalDigit(ch2)) {\n            return {\n                type: Token.Punctuator,\n                value: source[index++],\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Peek more characters.\n\n        ch3 = source[index + 2];\n        ch4 = source[index + 3];\n\n        // 4-character punctuator: >>>=\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            if (ch4 === '=') {\n                index += 4;\n                return {\n                    type: Token.Punctuator,\n                    value: '>>>=',\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // 3-character punctuators: === !== >>> <<= >>=\n\n        if (ch1 === '=' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '===',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '!' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '!==',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>>',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '<' && ch2 === '<' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '<<=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 2-character punctuators: <= >= == != ++ -- << >> && ||\n        // += -= *= %= &= |= ^= /=\n\n        if (ch2 === '=') {\n            if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {\n            if ('+-<>&|'.indexOf(ch2) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // The remaining 1-character punctuators.\n\n        if ('[]<>+-*%&|^!~?:=/'.indexOf(ch1) >= 0) {\n            return {\n                type: Token.Punctuator,\n                value: source[index++],\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n    }\n\n    // 7.8.3 Numeric Literals\n\n    function scanNumericLiteral() {\n        var number, start, ch;\n\n        ch = source[index];\n        assert(isDecimalDigit(ch) || (ch === '.'),\n            'Numeric literal must start with a decimal digit or a decimal point');\n\n        start = index;\n        number = '';\n        if (ch !== '.') {\n            number = source[index++];\n            ch = source[index];\n\n            // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            if (number === '0') {\n                if (ch === 'x' || ch === 'X') {\n                    number += source[index++];\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isHexDigit(ch)) {\n                            break;\n                        }\n                        number += source[index++];\n                    }\n\n                    if (number.length <= 2) {\n                        // only 0x\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 16),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                } else if (isOctalDigit(ch)) {\n                    number += source[index++];\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isOctalDigit(ch)) {\n                            break;\n                        }\n                        number += source[index++];\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 8),\n                        octal: true,\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                }\n\n                // decimal number starts with '0' such as '09' is illegal.\n                if (isDecimalDigit(ch)) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            }\n\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += source[index++];\n            }\n        }\n\n        if (ch === '.') {\n            number += source[index++];\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += source[index++];\n            }\n        }\n\n        if (ch === 'e' || ch === 'E') {\n            number += source[index++];\n\n            ch = source[index];\n            if (ch === '+' || ch === '-') {\n                number += source[index++];\n            }\n\n            ch = source[index];\n            if (isDecimalDigit(ch)) {\n                number += source[index++];\n                while (index < length) {\n                    ch = source[index];\n                    if (!isDecimalDigit(ch)) {\n                        break;\n                    }\n                    number += source[index++];\n                }\n            } else {\n                ch = 'character ' + ch;\n                if (index >= length) {\n                    ch = '<end>';\n                }\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        if (index < length) {\n            ch = source[index];\n            if (isIdentifierStart(ch)) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseFloat(number),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.8.4 String Literals\n\n    function scanStringLiteral() {\n        var str = '', quote, start, ch, code, unescaped, restore, octal = false;\n\n        quote = source[index];\n        assert((quote === '\\'' || quote === '\"'),\n            'String literal must starts with a quote');\n\n        start = index;\n        ++index;\n\n        while (index < length) {\n            ch = source[index++];\n\n            if (ch === quote) {\n                quote = '';\n                break;\n            } else if (ch === '\\\\') {\n                ch = source[index++];\n                if (!isLineTerminator(ch)) {\n                    switch (ch) {\n                    case 'n':\n                        str += '\\n';\n                        break;\n                    case 'r':\n                        str += '\\r';\n                        break;\n                    case 't':\n                        str += '\\t';\n                        break;\n                    case 'u':\n                    case 'x':\n                        restore = index;\n                        unescaped = scanHexEscape(ch);\n                        if (unescaped) {\n                            str += unescaped;\n                        } else {\n                            index = restore;\n                            str += ch;\n                        }\n                        break;\n                    case 'b':\n                        str += '\\b';\n                        break;\n                    case 'f':\n                        str += '\\f';\n                        break;\n                    case 'v':\n                        str += '\\x0B';\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            code = '01234567'.indexOf(ch);\n\n                            // \\0 is not octal escape sequence\n                            if (code !== 0) {\n                                octal = true;\n                            }\n\n                            if (index < length && isOctalDigit(source[index])) {\n                                octal = true;\n                                code = code * 8 + '01234567'.indexOf(source[index++]);\n\n                                // 3 digits are only allowed when string starts\n                                // with 0, 1, 2, 3\n                                if ('0123'.indexOf(ch) >= 0 &&\n                                        index < length &&\n                                        isOctalDigit(source[index])) {\n                                    code = code * 8 + '01234567'.indexOf(source[index++]);\n                                }\n                            }\n                            str += String.fromCharCode(code);\n                        } else {\n                            str += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch ===  '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                }\n            } else if (isLineTerminator(ch)) {\n                break;\n            } else {\n                str += ch;\n            }\n        }\n\n        if (quote !== '') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.StringLiteral,\n            value: str,\n            octal: octal,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    function scanRegExp() {\n        var str, ch, start, pattern, flags, value, classMarker = false, restore, terminated = false;\n\n        buffer = null;\n        skipComment();\n\n        start = index;\n        ch = source[index];\n        assert(ch === '/', 'Regular expression literal must start with a slash');\n        str = source[index++];\n\n        while (index < length) {\n            ch = source[index++];\n            str += ch;\n            if (ch === '\\\\') {\n                ch = source[index++];\n                // ECMA-262 7.8.5\n                if (isLineTerminator(ch)) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n                str += ch;\n            } else if (classMarker) {\n                if (ch === ']') {\n                    classMarker = false;\n                }\n            } else {\n                if (ch === '/') {\n                    terminated = true;\n                    break;\n                } else if (ch === '[') {\n                    classMarker = true;\n                } else if (isLineTerminator(ch)) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n            }\n        }\n\n        if (!terminated) {\n            throwError({}, Messages.UnterminatedRegExp);\n        }\n\n        // Exclude leading and trailing slash.\n        pattern = str.substr(1, str.length - 2);\n\n        flags = '';\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n\n            ++index;\n            if (ch === '\\\\' && index < length) {\n                ch = source[index];\n                if (ch === 'u') {\n                    ++index;\n                    restore = index;\n                    ch = scanHexEscape('u');\n                    if (ch) {\n                        flags += ch;\n                        str += '\\\\u';\n                        for (; restore < index; ++restore) {\n                            str += source[restore];\n                        }\n                    } else {\n                        index = restore;\n                        flags += 'u';\n                        str += '\\\\u';\n                    }\n                } else {\n                    str += '\\\\';\n                }\n            } else {\n                flags += ch;\n                str += ch;\n            }\n        }\n\n        try {\n            value = new RegExp(pattern, flags);\n        } catch (e) {\n            throwError({}, Messages.InvalidRegExp);\n        }\n\n        return {\n            literal: str,\n            value: value,\n            range: [start, index]\n        };\n    }\n\n    function isIdentifierName(token) {\n        return token.type === Token.Identifier ||\n            token.type === Token.Keyword ||\n            token.type === Token.BooleanLiteral ||\n            token.type === Token.NullLiteral;\n    }\n\n    function advance() {\n        var ch, token;\n\n        skipComment();\n\n        if (index >= length) {\n            return {\n                type: Token.EOF,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [index, index]\n            };\n        }\n\n        token = scanPunctuator();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        ch = source[index];\n\n        if (ch === '\\'' || ch === '\"') {\n            return scanStringLiteral();\n        }\n\n        if (ch === '.' || isDecimalDigit(ch)) {\n            return scanNumericLiteral();\n        }\n\n        token = scanIdentifier();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    function lex() {\n        var token;\n\n        if (buffer) {\n            index = buffer.range[1];\n            lineNumber = buffer.lineNumber;\n            lineStart = buffer.lineStart;\n            token = buffer;\n            buffer = null;\n            return token;\n        }\n\n        buffer = null;\n        return advance();\n    }\n\n    function lookahead() {\n        var pos, line, start;\n\n        if (buffer !== null) {\n            return buffer;\n        }\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        buffer = advance();\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return buffer;\n    }\n\n    // Return true if there is a line terminator before the next token.\n\n    function peekLineTerminator() {\n        var pos, line, start, found;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        skipComment();\n        found = lineNumber !== line;\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return found;\n    }\n\n    // Throw an exception\n\n    function throwError(token, messageFormat) {\n        var error,\n            args = Array.prototype.slice.call(arguments, 2),\n            msg = messageFormat.replace(\n                /%(\\d)/g,\n                function (whole, index) {\n                    return args[index] || '';\n                }\n            );\n\n        if (typeof token.lineNumber === 'number') {\n            error = new Error('Line ' + token.lineNumber + ': ' + msg);\n            error.index = token.range[0];\n            error.lineNumber = token.lineNumber;\n            error.column = token.range[0] - lineStart + 1;\n        } else {\n            error = new Error('Line ' + lineNumber + ': ' + msg);\n            error.index = index;\n            error.lineNumber = lineNumber;\n            error.column = index - lineStart + 1;\n        }\n\n        throw error;\n    }\n\n    function throwErrorTolerant() {\n        try {\n            throwError.apply(null, arguments);\n        } catch (e) {\n            if (extra.errors) {\n                extra.errors.push(e);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n\n    // Throw an exception because of the token.\n\n    function throwUnexpected(token) {\n        if (token.type === Token.EOF) {\n            throwError(token, Messages.UnexpectedEOS);\n        }\n\n        if (token.type === Token.NumericLiteral) {\n            throwError(token, Messages.UnexpectedNumber);\n        }\n\n        if (token.type === Token.StringLiteral) {\n            throwError(token, Messages.UnexpectedString);\n        }\n\n        if (token.type === Token.Identifier) {\n            throwError(token, Messages.UnexpectedIdentifier);\n        }\n\n        if (token.type === Token.Keyword) {\n            if (isFutureReservedWord(token.value)) {\n                throwError(token, Messages.UnexpectedReserved);\n            } else if (strict && isStrictModeReservedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictReservedWord);\n                return;\n            }\n            throwError(token, Messages.UnexpectedToken, token.value);\n        }\n\n        // BooleanLiteral, NullLiteral, or Punctuator.\n        throwError(token, Messages.UnexpectedToken, token.value);\n    }\n\n    // Expect the next token to match the specified punctuator.\n    // If not, an exception will be thrown.\n\n    function expect(value) {\n        var token = lex();\n        if (token.type !== Token.Punctuator || token.value !== value) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Expect the next token to match the specified keyword.\n    // If not, an exception will be thrown.\n\n    function expectKeyword(keyword) {\n        var token = lex();\n        if (token.type !== Token.Keyword || token.value !== keyword) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if the next token matches the specified punctuator.\n\n    function match(value) {\n        var token = lookahead();\n        return token.type === Token.Punctuator && token.value === value;\n    }\n\n    // Return true if the next token matches the specified keyword\n\n    function matchKeyword(keyword) {\n        var token = lookahead();\n        return token.type === Token.Keyword && token.value === keyword;\n    }\n\n    // Return true if the next token is an assignment operator\n\n    function matchAssign() {\n        var token = lookahead(),\n            op = token.value;\n\n        if (token.type !== Token.Punctuator) {\n            return false;\n        }\n        return op === '=' ||\n            op === '*=' ||\n            op === '/=' ||\n            op === '%=' ||\n            op === '+=' ||\n            op === '-=' ||\n            op === '<<=' ||\n            op === '>>=' ||\n            op === '>>>=' ||\n            op === '&=' ||\n            op === '^=' ||\n            op === '|=';\n    }\n\n    function consumeSemicolon() {\n        var token, line;\n\n        // Catch the very common case first.\n        if (source[index] === ';') {\n            lex();\n            return;\n        }\n\n        line = lineNumber;\n        skipComment();\n        if (lineNumber !== line) {\n            return;\n        }\n\n        if (match(';')) {\n            lex();\n            return;\n        }\n\n        token = lookahead();\n        if (token.type !== Token.EOF && !match('}')) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if provided expression is LeftHandSideExpression\n\n    function isLeftHandSide(expr) {\n        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;\n    }\n\n    // 11.1.4 Array Initialiser\n\n    function parseArrayInitialiser() {\n        var elements = [];\n\n        expect('[');\n\n        while (!match(']')) {\n            if (match(',')) {\n                lex();\n                elements.push(null);\n            } else {\n                elements.push(parseAssignmentExpression());\n\n                if (!match(']')) {\n                    expect(',');\n                }\n            }\n        }\n\n        expect(']');\n\n        return {\n            type: Syntax.ArrayExpression,\n            elements: elements\n        };\n    }\n\n    // 11.1.5 Object Initialiser\n\n    function parsePropertyFunction(param, first) {\n        var previousStrict, body;\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (first && strict && isRestrictedWord(param[0].name)) {\n            throwErrorTolerant(first, Messages.StrictParamName);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: null,\n            params: param,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: false\n        };\n    }\n\n    function parseObjectPropertyKey() {\n        var token = lex();\n\n        // Note: This function is called only from parseObjectProperty(), where\n        // EOF and Punctuator tokens are already filtered out.\n\n        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseObjectProperty() {\n        var token, key, id, param;\n\n        token = lookahead();\n\n        if (token.type === Token.Identifier) {\n\n            id = parseObjectPropertyKey();\n\n            // Property Assignment: Getter and Setter.\n\n            if (token.value === 'get' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                expect(')');\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyFunction([]),\n                    kind: 'get'\n                };\n            } else if (token.value === 'set' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                token = lookahead();\n                if (token.type !== Token.Identifier) {\n                    expect(')');\n                    throwErrorTolerant(token, Messages.UnexpectedToken, token.value);\n                    return {\n                        type: Syntax.Property,\n                        key: key,\n                        value: parsePropertyFunction([]),\n                        kind: 'set'\n                    };\n                } else {\n                    param = [ parseVariableIdentifier() ];\n                    expect(')');\n                    return {\n                        type: Syntax.Property,\n                        key: key,\n                        value: parsePropertyFunction(param, token),\n                        kind: 'set'\n                    };\n                }\n            } else {\n                expect(':');\n                return {\n                    type: Syntax.Property,\n                    key: id,\n                    value: parseAssignmentExpression(),\n                    kind: 'init'\n                };\n            }\n        } else if (token.type === Token.EOF || token.type === Token.Punctuator) {\n            throwUnexpected(token);\n        } else {\n            key = parseObjectPropertyKey();\n            expect(':');\n            return {\n                type: Syntax.Property,\n                key: key,\n                value: parseAssignmentExpression(),\n                kind: 'init'\n            };\n        }\n    }\n\n    function parseObjectInitialiser() {\n        var properties = [], property, name, kind, map = {}, toString = String;\n\n        expect('{');\n\n        while (!match('}')) {\n            property = parseObjectProperty();\n\n            if (property.key.type === Syntax.Identifier) {\n                name = property.key.name;\n            } else {\n                name = toString(property.key.value);\n            }\n            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;\n            if (Object.prototype.hasOwnProperty.call(map, name)) {\n                if (map[name] === PropertyKind.Data) {\n                    if (strict && kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);\n                    } else if (kind !== PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    }\n                } else {\n                    if (kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    } else if (map[name] & kind) {\n                        throwErrorTolerant({}, Messages.AccessorGetSet);\n                    }\n                }\n                map[name] |= kind;\n            } else {\n                map[name] = kind;\n            }\n\n            properties.push(property);\n\n            if (!match('}')) {\n                expect(',');\n            }\n        }\n\n        expect('}');\n\n        return {\n            type: Syntax.ObjectExpression,\n            properties: properties\n        };\n    }\n\n    // 11.1.6 The Grouping Operator\n\n    function parseGroupExpression() {\n        var expr;\n\n        expect('(');\n\n        expr = parseExpression();\n\n        expect(')');\n\n        return expr;\n    }\n\n\n    // 11.1 Primary Expressions\n\n    function parsePrimaryExpression() {\n        var token = lookahead(),\n            type = token.type;\n\n        if (type === Token.Identifier) {\n            return {\n                type: Syntax.Identifier,\n                name: lex().value\n            };\n        }\n\n        if (type === Token.StringLiteral || type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(lex());\n        }\n\n        if (type === Token.Keyword) {\n            if (matchKeyword('this')) {\n                lex();\n                return {\n                    type: Syntax.ThisExpression\n                };\n            }\n\n            if (matchKeyword('function')) {\n                return parseFunctionExpression();\n            }\n        }\n\n        if (type === Token.BooleanLiteral) {\n            lex();\n            token.value = (token.value === 'true');\n            return createLiteral(token);\n        }\n\n        if (type === Token.NullLiteral) {\n            lex();\n            token.value = null;\n            return createLiteral(token);\n        }\n\n        if (match('[')) {\n            return parseArrayInitialiser();\n        }\n\n        if (match('{')) {\n            return parseObjectInitialiser();\n        }\n\n        if (match('(')) {\n            return parseGroupExpression();\n        }\n\n        if (match('/') || match('/=')) {\n            return createLiteral(scanRegExp());\n        }\n\n        return throwUnexpected(lex());\n    }\n\n    // 11.2 Left-Hand-Side Expressions\n\n    function parseArguments() {\n        var args = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            while (index < length) {\n                args.push(parseAssignmentExpression());\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return args;\n    }\n\n    function parseNonComputedProperty() {\n        var token = lex();\n\n        if (!isIdentifierName(token)) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseNonComputedMember() {\n        expect('.');\n\n        return parseNonComputedProperty();\n    }\n\n    function parseComputedMember() {\n        var expr;\n\n        expect('[');\n\n        expr = parseExpression();\n\n        expect(']');\n\n        return expr;\n    }\n\n    function parseNewExpression() {\n        var expr;\n\n        expectKeyword('new');\n\n        expr = {\n            type: Syntax.NewExpression,\n            callee: parseLeftHandSideExpression(),\n            'arguments': []\n        };\n\n        if (match('(')) {\n            expr['arguments'] = parseArguments();\n        }\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpressionAllowCall() {\n        var expr;\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[') || match('(')) {\n            if (match('(')) {\n                expr = {\n                    type: Syntax.CallExpression,\n                    callee: expr,\n                    'arguments': parseArguments()\n                };\n            } else if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n            }\n        }\n\n        return expr;\n    }\n\n\n    function parseLeftHandSideExpression() {\n        var expr;\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[')) {\n            if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n            }\n        }\n\n        return expr;\n    }\n\n    // 11.3 Postfix Expressions\n\n    function parsePostfixExpression() {\n        var expr = parseLeftHandSideExpressionAllowCall(), token;\n\n        token = lookahead();\n        if (token.type !== Token.Punctuator) {\n            return expr;\n        }\n\n        if ((match('++') || match('--')) && !peekLineTerminator()) {\n            // 11.3.1, 11.3.2\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant({}, Messages.StrictLHSPostfix);\n            }\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: lex().value,\n                argument: expr,\n                prefix: false\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.4 Unary Operators\n\n    function parseUnaryExpression() {\n        var token, expr;\n\n        token = lookahead();\n        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {\n            return parsePostfixExpression();\n        }\n\n        if (match('++') || match('--')) {\n            token = lex();\n            expr = parseUnaryExpression();\n            // 11.4.4, 11.4.5\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant({}, Messages.StrictLHSPrefix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: token.value,\n                argument: expr,\n                prefix: true\n            };\n            return expr;\n        }\n\n        if (match('+') || match('-') || match('~') || match('!')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression(),\n                prefix: true\n            };\n            return expr;\n        }\n\n        if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression(),\n                prefix: true\n            };\n            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\n                throwErrorTolerant({}, Messages.StrictDelete);\n            }\n            return expr;\n        }\n\n        return parsePostfixExpression();\n    }\n\n    // 11.5 Multiplicative Operators\n\n    function parseMultiplicativeExpression() {\n        var expr = parseUnaryExpression();\n\n        while (match('*') || match('/') || match('%')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseUnaryExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.6 Additive Operators\n\n    function parseAdditiveExpression() {\n        var expr = parseMultiplicativeExpression();\n\n        while (match('+') || match('-')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseMultiplicativeExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.7 Bitwise Shift Operators\n\n    function parseShiftExpression() {\n        var expr = parseAdditiveExpression();\n\n        while (match('<<') || match('>>') || match('>>>')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAdditiveExpression()\n            };\n        }\n\n        return expr;\n    }\n    // 11.8 Relational Operators\n\n    function parseRelationalExpression() {\n        var expr, previousAllowIn;\n\n        previousAllowIn = state.allowIn;\n        state.allowIn = true;\n\n        expr = parseShiftExpression();\n\n        while (match('<') || match('>') || match('<=') || match('>=') || (previousAllowIn && matchKeyword('in')) || matchKeyword('instanceof')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseShiftExpression()\n            };\n        }\n\n        state.allowIn = previousAllowIn;\n        return expr;\n    }\n\n    // 11.9 Equality Operators\n\n    function parseEqualityExpression() {\n        var expr = parseRelationalExpression();\n\n        while (match('==') || match('!=') || match('===') || match('!==')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.10 Binary Bitwise Operators\n\n    function parseBitwiseANDExpression() {\n        var expr = parseEqualityExpression();\n\n        while (match('&')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '&',\n                left: expr,\n                right: parseEqualityExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseXORExpression() {\n        var expr = parseBitwiseANDExpression();\n\n        while (match('^')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '^',\n                left: expr,\n                right: parseBitwiseANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseORExpression() {\n        var expr = parseBitwiseXORExpression();\n\n        while (match('|')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '|',\n                left: expr,\n                right: parseBitwiseXORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.11 Binary Logical Operators\n\n    function parseLogicalANDExpression() {\n        var expr = parseBitwiseORExpression();\n\n        while (match('&&')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '&&',\n                left: expr,\n                right: parseBitwiseORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseLogicalORExpression() {\n        var expr = parseLogicalANDExpression();\n\n        while (match('||')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '||',\n                left: expr,\n                right: parseLogicalANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.12 Conditional Operator\n\n    function parseConditionalExpression() {\n        var expr, previousAllowIn, consequent;\n\n        expr = parseLogicalORExpression();\n\n        if (match('?')) {\n            lex();\n            previousAllowIn = state.allowIn;\n            state.allowIn = true;\n            consequent = parseAssignmentExpression();\n            state.allowIn = previousAllowIn;\n            expect(':');\n\n            expr = {\n                type: Syntax.ConditionalExpression,\n                test: expr,\n                consequent: consequent,\n                alternate: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.13 Assignment Operators\n\n    function parseAssignmentExpression() {\n        var token, expr;\n\n        token = lookahead();\n        expr = parseConditionalExpression();\n\n        if (matchAssign()) {\n            // LeftHandSideExpression\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            // 11.13.1\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant(token, Messages.StrictLHSAssignment);\n            }\n\n            expr = {\n                type: Syntax.AssignmentExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.14 Comma Operator\n\n    function parseExpression() {\n        var expr = parseAssignmentExpression();\n\n        if (match(',')) {\n            expr = {\n                type: Syntax.SequenceExpression,\n                expressions: [ expr ]\n            };\n\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expr.expressions.push(parseAssignmentExpression());\n            }\n\n        }\n        return expr;\n    }\n\n    // 12.1 Block\n\n    function parseStatementList() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseSourceElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseBlock() {\n        var block;\n\n        expect('{');\n\n        block = parseStatementList();\n\n        expect('}');\n\n        return {\n            type: Syntax.BlockStatement,\n            body: block\n        };\n    }\n\n    // 12.2 Variable Statement\n\n    function parseVariableIdentifier() {\n        var token = lex();\n\n        if (token.type !== Token.Identifier) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseVariableDeclaration(kind) {\n        var id = parseVariableIdentifier(),\n            init = null;\n\n        // 12.2.1\n        if (strict && isRestrictedWord(id.name)) {\n            throwErrorTolerant({}, Messages.StrictVarName);\n        }\n\n        if (kind === 'const') {\n            expect('=');\n            init = parseAssignmentExpression();\n        } else if (match('=')) {\n            lex();\n            init = parseAssignmentExpression();\n        }\n\n        return {\n            type: Syntax.VariableDeclarator,\n            id: id,\n            init: init\n        };\n    }\n\n    function parseVariableDeclarationList(kind) {\n        var list = [];\n\n        do {\n            list.push(parseVariableDeclaration(kind));\n            if (!match(',')) {\n                break;\n            }\n            lex();\n        } while (index < length);\n\n        return list;\n    }\n\n    function parseVariableStatement() {\n        var declarations;\n\n        expectKeyword('var');\n\n        declarations = parseVariableDeclarationList();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: 'var'\n        };\n    }\n\n    // kind may be `const` or `let`\n    // Both are experimental and not in the specification yet.\n    // see http://wiki.ecmascript.org/doku.php?id=harmony:const\n    // and http://wiki.ecmascript.org/doku.php?id=harmony:let\n    function parseConstLetDeclaration(kind) {\n        var declarations;\n\n        expectKeyword(kind);\n\n        declarations = parseVariableDeclarationList(kind);\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: kind\n        };\n    }\n\n    // 12.3 Empty Statement\n\n    function parseEmptyStatement() {\n        expect(';');\n\n        return {\n            type: Syntax.EmptyStatement\n        };\n    }\n\n    // 12.4 Expression Statement\n\n    function parseExpressionStatement() {\n        var expr = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 12.5 If statement\n\n    function parseIfStatement() {\n        var test, consequent, alternate;\n\n        expectKeyword('if');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        consequent = parseStatement();\n\n        if (matchKeyword('else')) {\n            lex();\n            alternate = parseStatement();\n        } else {\n            alternate = null;\n        }\n\n        return {\n            type: Syntax.IfStatement,\n            test: test,\n            consequent: consequent,\n            alternate: alternate\n        };\n    }\n\n    // 12.6 Iteration Statements\n\n    function parseDoWhileStatement() {\n        var body, test, oldInIteration;\n\n        expectKeyword('do');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        if (match(';')) {\n            lex();\n        }\n\n        return {\n            type: Syntax.DoWhileStatement,\n            body: body,\n            test: test\n        };\n    }\n\n    function parseWhileStatement() {\n        var test, body, oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return {\n            type: Syntax.WhileStatement,\n            test: test,\n            body: body\n        };\n    }\n\n    function parseForVariableDeclaration() {\n        var token = lex();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: parseVariableDeclarationList(),\n            kind: token.value\n        };\n    }\n\n    function parseForStatement() {\n        var init, test, update, left, right, body, oldInIteration;\n\n        init = test = update = null;\n\n        expectKeyword('for');\n\n        expect('(');\n\n        if (match(';')) {\n            lex();\n        } else {\n            if (matchKeyword('var') || matchKeyword('let')) {\n                state.allowIn = false;\n                init = parseForVariableDeclaration();\n                state.allowIn = true;\n\n                if (init.declarations.length === 1 && matchKeyword('in')) {\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            } else {\n                state.allowIn = false;\n                init = parseExpression();\n                state.allowIn = true;\n\n                if (matchKeyword('in')) {\n                    // LeftHandSideExpression\n                    if (!isLeftHandSide(init)) {\n                        throwErrorTolerant({}, Messages.InvalidLHSInForIn);\n                    }\n\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            }\n\n            if (typeof left === 'undefined') {\n                expect(';');\n            }\n        }\n\n        if (typeof left === 'undefined') {\n\n            if (!match(';')) {\n                test = parseExpression();\n            }\n            expect(';');\n\n            if (!match(')')) {\n                update = parseExpression();\n            }\n        }\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        if (typeof left === 'undefined') {\n            return {\n                type: Syntax.ForStatement,\n                init: init,\n                test: test,\n                update: update,\n                body: body\n            };\n        }\n\n        return {\n            type: Syntax.ForInStatement,\n            left: left,\n            right: right,\n            body: body,\n            each: false\n        };\n    }\n\n    // 12.7 The continue statement\n\n    function parseContinueStatement() {\n        var token, label = null;\n\n        expectKeyword('continue');\n\n        // Optimize the most common form: 'continue;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !state.inIteration) {\n            throwError({}, Messages.IllegalContinue);\n        }\n\n        return {\n            type: Syntax.ContinueStatement,\n            label: label\n        };\n    }\n\n    // 12.8 The break statement\n\n    function parseBreakStatement() {\n        var token, label = null;\n\n        expectKeyword('break');\n\n        // Optimize the most common form: 'break;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !(state.inIteration || state.inSwitch)) {\n            throwError({}, Messages.IllegalBreak);\n        }\n\n        return {\n            type: Syntax.BreakStatement,\n            label: label\n        };\n    }\n\n    // 12.9 The return statement\n\n    function parseReturnStatement() {\n        var token, argument = null;\n\n        expectKeyword('return');\n\n        if (!state.inFunctionBody) {\n            throwErrorTolerant({}, Messages.IllegalReturn);\n        }\n\n        // 'return' followed by a space and an identifier is very common.\n        if (source[index] === ' ') {\n            if (isIdentifierStart(source[index + 1])) {\n                argument = parseExpression();\n                consumeSemicolon();\n                return {\n                    type: Syntax.ReturnStatement,\n                    argument: argument\n                };\n            }\n        }\n\n        if (peekLineTerminator()) {\n            return {\n                type: Syntax.ReturnStatement,\n                argument: null\n            };\n        }\n\n        if (!match(';')) {\n            token = lookahead();\n            if (!match('}') && token.type !== Token.EOF) {\n                argument = parseExpression();\n            }\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ReturnStatement,\n            argument: argument\n        };\n    }\n\n    // 12.10 The with statement\n\n    function parseWithStatement() {\n        var object, body;\n\n        if (strict) {\n            throwErrorTolerant({}, Messages.StrictModeWith);\n        }\n\n        expectKeyword('with');\n\n        expect('(');\n\n        object = parseExpression();\n\n        expect(')');\n\n        body = parseStatement();\n\n        return {\n            type: Syntax.WithStatement,\n            object: object,\n            body: body\n        };\n    }\n\n    // 12.10 The swith statement\n\n    function parseSwitchCase() {\n        var test,\n            consequent = [],\n            statement;\n\n        if (matchKeyword('default')) {\n            lex();\n            test = null;\n        } else {\n            expectKeyword('case');\n            test = parseExpression();\n        }\n        expect(':');\n\n        while (index < length) {\n            if (match('}') || matchKeyword('default') || matchKeyword('case')) {\n                break;\n            }\n            statement = parseStatement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            consequent.push(statement);\n        }\n\n        return {\n            type: Syntax.SwitchCase,\n            test: test,\n            consequent: consequent\n        };\n    }\n\n    function parseSwitchStatement() {\n        var discriminant, cases, clause, oldInSwitch, defaultFound;\n\n        expectKeyword('switch');\n\n        expect('(');\n\n        discriminant = parseExpression();\n\n        expect(')');\n\n        expect('{');\n\n        cases = [];\n\n        if (match('}')) {\n            lex();\n            return {\n                type: Syntax.SwitchStatement,\n                discriminant: discriminant,\n                cases: cases\n            };\n        }\n\n        oldInSwitch = state.inSwitch;\n        state.inSwitch = true;\n        defaultFound = false;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            clause = parseSwitchCase();\n            if (clause.test === null) {\n                if (defaultFound) {\n                    throwError({}, Messages.MultipleDefaultsInSwitch);\n                }\n                defaultFound = true;\n            }\n            cases.push(clause);\n        }\n\n        state.inSwitch = oldInSwitch;\n\n        expect('}');\n\n        return {\n            type: Syntax.SwitchStatement,\n            discriminant: discriminant,\n            cases: cases\n        };\n    }\n\n    // 12.13 The throw statement\n\n    function parseThrowStatement() {\n        var argument;\n\n        expectKeyword('throw');\n\n        if (peekLineTerminator()) {\n            throwError({}, Messages.NewlineAfterThrow);\n        }\n\n        argument = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ThrowStatement,\n            argument: argument\n        };\n    }\n\n    // 12.14 The try statement\n\n    function parseCatchClause() {\n        var param;\n\n        expectKeyword('catch');\n\n        expect('(');\n        if (match(')')) {\n            throwUnexpected(lookahead());\n        }\n\n        param = parseVariableIdentifier();\n        // 12.14.1\n        if (strict && isRestrictedWord(param.name)) {\n            throwErrorTolerant({}, Messages.StrictCatchVariable);\n        }\n\n        expect(')');\n\n        return {\n            type: Syntax.CatchClause,\n            param: param,\n            body: parseBlock()\n        };\n    }\n\n    function parseTryStatement() {\n        var block, handlers = [], finalizer = null;\n\n        expectKeyword('try');\n\n        block = parseBlock();\n\n        if (matchKeyword('catch')) {\n            handlers.push(parseCatchClause());\n        }\n\n        if (matchKeyword('finally')) {\n            lex();\n            finalizer = parseBlock();\n        }\n\n        if (handlers.length === 0 && !finalizer) {\n            throwError({}, Messages.NoCatchOrFinally);\n        }\n\n        return {\n            type: Syntax.TryStatement,\n            block: block,\n            guardedHandlers: [],\n            handlers: handlers,\n            finalizer: finalizer\n        };\n    }\n\n    // 12.15 The debugger statement\n\n    function parseDebuggerStatement() {\n        expectKeyword('debugger');\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.DebuggerStatement\n        };\n    }\n\n    // 12 Statements\n\n    function parseStatement() {\n        var token = lookahead(),\n            expr,\n            labeledBody;\n\n        if (token.type === Token.EOF) {\n            throwUnexpected(token);\n        }\n\n        if (token.type === Token.Punctuator) {\n            switch (token.value) {\n            case ';':\n                return parseEmptyStatement();\n            case '{':\n                return parseBlock();\n            case '(':\n                return parseExpressionStatement();\n            default:\n                break;\n            }\n        }\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'break':\n                return parseBreakStatement();\n            case 'continue':\n                return parseContinueStatement();\n            case 'debugger':\n                return parseDebuggerStatement();\n            case 'do':\n                return parseDoWhileStatement();\n            case 'for':\n                return parseForStatement();\n            case 'function':\n                return parseFunctionDeclaration();\n            case 'if':\n                return parseIfStatement();\n            case 'return':\n                return parseReturnStatement();\n            case 'switch':\n                return parseSwitchStatement();\n            case 'throw':\n                return parseThrowStatement();\n            case 'try':\n                return parseTryStatement();\n            case 'var':\n                return parseVariableStatement();\n            case 'while':\n                return parseWhileStatement();\n            case 'with':\n                return parseWithStatement();\n            default:\n                break;\n            }\n        }\n\n        expr = parseExpression();\n\n        // 12.12 Labelled Statements\n        if ((expr.type === Syntax.Identifier) && match(':')) {\n            lex();\n\n            if (Object.prototype.hasOwnProperty.call(state.labelSet, expr.name)) {\n                throwError({}, Messages.Redeclaration, 'Label', expr.name);\n            }\n\n            state.labelSet[expr.name] = true;\n            labeledBody = parseStatement();\n            delete state.labelSet[expr.name];\n\n            return {\n                type: Syntax.LabeledStatement,\n                label: expr,\n                body: labeledBody\n            };\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 13 Function Definition\n\n    function parseFunctionSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted,\n            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;\n\n        expect('{');\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        oldLabelSet = state.labelSet;\n        oldInIteration = state.inIteration;\n        oldInSwitch = state.inSwitch;\n        oldInFunctionBody = state.inFunctionBody;\n\n        state.labelSet = {};\n        state.inIteration = false;\n        state.inSwitch = false;\n        state.inFunctionBody = true;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n\n        expect('}');\n\n        state.labelSet = oldLabelSet;\n        state.inIteration = oldInIteration;\n        state.inSwitch = oldInSwitch;\n        state.inFunctionBody = oldInFunctionBody;\n\n        return {\n            type: Syntax.BlockStatement,\n            body: sourceElements\n        };\n    }\n\n    function parseFunctionDeclaration() {\n        var id, param, params = [], body, token, stricted, firstRestricted, message, previousStrict, paramSet;\n\n        expectKeyword('function');\n        token = lookahead();\n        id = parseVariableIdentifier();\n        if (strict) {\n            if (isRestrictedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictFunctionName);\n            }\n        } else {\n            if (isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictFunctionName;\n            } else if (isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictReservedWord;\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamName;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionDeclaration,\n            id: id,\n            params: params,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: false\n        };\n    }\n\n    function parseFunctionExpression() {\n        var token, id = null, stricted, firstRestricted, message, param, params = [], body, previousStrict, paramSet;\n\n        expectKeyword('function');\n\n        if (!match('(')) {\n            token = lookahead();\n            id = parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    throwErrorTolerant(token, Messages.StrictFunctionName);\n                }\n            } else {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictFunctionName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                }\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamName;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: id,\n            params: params,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: false\n        };\n    }\n\n    // 14 Program\n\n    function parseSourceElement() {\n        var token = lookahead();\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'const':\n            case 'let':\n                return parseConstLetDeclaration(token.value);\n            case 'function':\n                return parseFunctionDeclaration();\n            default:\n                return parseStatement();\n            }\n        }\n\n        if (token.type !== Token.EOF) {\n            return parseStatement();\n        }\n    }\n\n    function parseSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted;\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        while (index < length) {\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n        return sourceElements;\n    }\n\n    function parseProgram() {\n        var program;\n        strict = false;\n        program = {\n            type: Syntax.Program,\n            body: parseSourceElements()\n        };\n        return program;\n    }\n\n    // The following functions are needed only when the option to preserve\n    // the comments is active.\n\n    function addComment(type, value, start, end, loc) {\n        assert(typeof start === 'number', 'Comment must have valid position');\n\n        // Because the way the actual token is scanned, often the comments\n        // (if any) are skipped twice during the lexical analysis.\n        // Thus, we need to skip adding a comment if the comment array already\n        // handled it.\n        if (extra.comments.length > 0) {\n            if (extra.comments[extra.comments.length - 1].range[1] > start) {\n                return;\n            }\n        }\n\n        extra.comments.push({\n            type: type,\n            value: value,\n            range: [start, end],\n            loc: loc\n        });\n    }\n\n    function scanComment() {\n        var comment, ch, loc, start, blockComment, lineComment;\n\n        comment = '';\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = source[index++];\n                if (isLineTerminator(ch)) {\n                    loc.end = {\n                        line: lineNumber,\n                        column: index - lineStart - 1\n                    };\n                    lineComment = false;\n                    addComment('Line', comment, start, index - 1, loc);\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                    comment = '';\n                } else if (index >= length) {\n                    lineComment = false;\n                    comment += ch;\n                    loc.end = {\n                        line: lineNumber,\n                        column: length - lineStart\n                    };\n                    addComment('Line', comment, start, length, loc);\n                } else {\n                    comment += ch;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                        comment += '\\r\\n';\n                    } else {\n                        comment += ch;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = source[index++];\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    comment += ch;\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            comment = comment.substr(0, comment.length - 1);\n                            blockComment = false;\n                            ++index;\n                            loc.end = {\n                                line: lineNumber,\n                                column: index - lineStart\n                            };\n                            addComment('Block', comment, start, index, loc);\n                            comment = '';\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    loc = {\n                        start: {\n                            line: lineNumber,\n                            column: index - lineStart\n                        }\n                    };\n                    start = index;\n                    index += 2;\n                    lineComment = true;\n                    if (index >= length) {\n                        loc.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        lineComment = false;\n                        addComment('Line', comment, start, index, loc);\n                    }\n                } else if (ch === '*') {\n                    start = index;\n                    index += 2;\n                    blockComment = true;\n                    loc = {\n                        start: {\n                            line: lineNumber,\n                            column: index - lineStart - 2\n                        }\n                    };\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function filterCommentLocation() {\n        var i, entry, comment, comments = [];\n\n        for (i = 0; i < extra.comments.length; ++i) {\n            entry = extra.comments[i];\n            comment = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                comment.range = entry.range;\n            }\n            if (extra.loc) {\n                comment.loc = entry.loc;\n            }\n            comments.push(comment);\n        }\n\n        extra.comments = comments;\n    }\n\n    function collectToken() {\n        var start, loc, token, range, value;\n\n        skipComment();\n        start = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        token = extra.advance();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        if (token.type !== Token.EOF) {\n            range = [token.range[0], token.range[1]];\n            value = sliceSource(token.range[0], token.range[1]);\n            extra.tokens.push({\n                type: TokenName[token.type],\n                value: value,\n                range: range,\n                loc: loc\n            });\n        }\n\n        return token;\n    }\n\n    function collectRegex() {\n        var pos, loc, regex, token;\n\n        skipComment();\n\n        pos = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        regex = extra.scanRegExp();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        // Pop the previous token, which is likely '/' or '/='\n        if (extra.tokens.length > 0) {\n            token = extra.tokens[extra.tokens.length - 1];\n            if (token.range[0] === pos && token.type === 'Punctuator') {\n                if (token.value === '/' || token.value === '/=') {\n                    extra.tokens.pop();\n                }\n            }\n        }\n\n        extra.tokens.push({\n            type: 'RegularExpression',\n            value: regex.literal,\n            range: [pos, index],\n            loc: loc\n        });\n\n        return regex;\n    }\n\n    function filterTokenLocation() {\n        var i, entry, token, tokens = [];\n\n        for (i = 0; i < extra.tokens.length; ++i) {\n            entry = extra.tokens[i];\n            token = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                token.range = entry.range;\n            }\n            if (extra.loc) {\n                token.loc = entry.loc;\n            }\n            tokens.push(token);\n        }\n\n        extra.tokens = tokens;\n    }\n\n    function createLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value\n        };\n    }\n\n    function createRawLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value,\n            raw: sliceSource(token.range[0], token.range[1])\n        };\n    }\n\n    function createLocationMarker() {\n        var marker = {};\n\n        marker.range = [index, index];\n        marker.loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            },\n            end: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        marker.end = function () {\n            this.range[1] = index;\n            this.loc.end.line = lineNumber;\n            this.loc.end.column = index - lineStart;\n        };\n\n        marker.applyGroup = function (node) {\n            if (extra.range) {\n                node.groupRange = [this.range[0], this.range[1]];\n            }\n            if (extra.loc) {\n                node.groupLoc = {\n                    start: {\n                        line: this.loc.start.line,\n                        column: this.loc.start.column\n                    },\n                    end: {\n                        line: this.loc.end.line,\n                        column: this.loc.end.column\n                    }\n                };\n            }\n        };\n\n        marker.apply = function (node) {\n            if (extra.range) {\n                node.range = [this.range[0], this.range[1]];\n            }\n            if (extra.loc) {\n                node.loc = {\n                    start: {\n                        line: this.loc.start.line,\n                        column: this.loc.start.column\n                    },\n                    end: {\n                        line: this.loc.end.line,\n                        column: this.loc.end.column\n                    }\n                };\n            }\n        };\n\n        return marker;\n    }\n\n    function trackGroupExpression() {\n        var marker, expr;\n\n        skipComment();\n        marker = createLocationMarker();\n        expect('(');\n\n        expr = parseExpression();\n\n        expect(')');\n\n        marker.end();\n        marker.applyGroup(expr);\n\n        return expr;\n    }\n\n    function trackLeftHandSideExpression() {\n        var marker, expr;\n\n        skipComment();\n        marker = createLocationMarker();\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[')) {\n            if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            }\n        }\n\n        return expr;\n    }\n\n    function trackLeftHandSideExpressionAllowCall() {\n        var marker, expr;\n\n        skipComment();\n        marker = createLocationMarker();\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[') || match('(')) {\n            if (match('(')) {\n                expr = {\n                    type: Syntax.CallExpression,\n                    callee: expr,\n                    'arguments': parseArguments()\n                };\n                marker.end();\n                marker.apply(expr);\n            } else if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            }\n        }\n\n        return expr;\n    }\n\n    function filterGroup(node) {\n        var n, i, entry;\n\n        n = (Object.prototype.toString.apply(node) === '[object Array]') ? [] : {};\n        for (i in node) {\n            if (node.hasOwnProperty(i) && i !== 'groupRange' && i !== 'groupLoc') {\n                entry = node[i];\n                if (entry === null || typeof entry !== 'object' || entry instanceof RegExp) {\n                    n[i] = entry;\n                } else {\n                    n[i] = filterGroup(entry);\n                }\n            }\n        }\n        return n;\n    }\n\n    function wrapTrackingFunction(range, loc) {\n\n        return function (parseFunction) {\n\n            function isBinary(node) {\n                return node.type === Syntax.LogicalExpression ||\n                    node.type === Syntax.BinaryExpression;\n            }\n\n            function visit(node) {\n                var start, end;\n\n                if (isBinary(node.left)) {\n                    visit(node.left);\n                }\n                if (isBinary(node.right)) {\n                    visit(node.right);\n                }\n\n                if (range) {\n                    if (node.left.groupRange || node.right.groupRange) {\n                        start = node.left.groupRange ? node.left.groupRange[0] : node.left.range[0];\n                        end = node.right.groupRange ? node.right.groupRange[1] : node.right.range[1];\n                        node.range = [start, end];\n                    } else if (typeof node.range === 'undefined') {\n                        start = node.left.range[0];\n                        end = node.right.range[1];\n                        node.range = [start, end];\n                    }\n                }\n                if (loc) {\n                    if (node.left.groupLoc || node.right.groupLoc) {\n                        start = node.left.groupLoc ? node.left.groupLoc.start : node.left.loc.start;\n                        end = node.right.groupLoc ? node.right.groupLoc.end : node.right.loc.end;\n                        node.loc = {\n                            start: start,\n                            end: end\n                        };\n                    } else if (typeof node.loc === 'undefined') {\n                        node.loc = {\n                            start: node.left.loc.start,\n                            end: node.right.loc.end\n                        };\n                    }\n                }\n            }\n\n            return function () {\n                var marker, node;\n\n                skipComment();\n\n                marker = createLocationMarker();\n                node = parseFunction.apply(null, arguments);\n                marker.end();\n\n                if (range && typeof node.range === 'undefined') {\n                    marker.apply(node);\n                }\n\n                if (loc && typeof node.loc === 'undefined') {\n                    marker.apply(node);\n                }\n\n                if (isBinary(node)) {\n                    visit(node);\n                }\n\n                return node;\n            };\n        };\n    }\n\n    function patch() {\n\n        var wrapTracking;\n\n        if (extra.comments) {\n            extra.skipComment = skipComment;\n            skipComment = scanComment;\n        }\n\n        if (extra.raw) {\n            extra.createLiteral = createLiteral;\n            createLiteral = createRawLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n\n            extra.parseGroupExpression = parseGroupExpression;\n            extra.parseLeftHandSideExpression = parseLeftHandSideExpression;\n            extra.parseLeftHandSideExpressionAllowCall = parseLeftHandSideExpressionAllowCall;\n            parseGroupExpression = trackGroupExpression;\n            parseLeftHandSideExpression = trackLeftHandSideExpression;\n            parseLeftHandSideExpressionAllowCall = trackLeftHandSideExpressionAllowCall;\n\n            wrapTracking = wrapTrackingFunction(extra.range, extra.loc);\n\n            extra.parseAdditiveExpression = parseAdditiveExpression;\n            extra.parseAssignmentExpression = parseAssignmentExpression;\n            extra.parseBitwiseANDExpression = parseBitwiseANDExpression;\n            extra.parseBitwiseORExpression = parseBitwiseORExpression;\n            extra.parseBitwiseXORExpression = parseBitwiseXORExpression;\n            extra.parseBlock = parseBlock;\n            extra.parseFunctionSourceElements = parseFunctionSourceElements;\n            extra.parseCatchClause = parseCatchClause;\n            extra.parseComputedMember = parseComputedMember;\n            extra.parseConditionalExpression = parseConditionalExpression;\n            extra.parseConstLetDeclaration = parseConstLetDeclaration;\n            extra.parseEqualityExpression = parseEqualityExpression;\n            extra.parseExpression = parseExpression;\n            extra.parseForVariableDeclaration = parseForVariableDeclaration;\n            extra.parseFunctionDeclaration = parseFunctionDeclaration;\n            extra.parseFunctionExpression = parseFunctionExpression;\n            extra.parseLogicalANDExpression = parseLogicalANDExpression;\n            extra.parseLogicalORExpression = parseLogicalORExpression;\n            extra.parseMultiplicativeExpression = parseMultiplicativeExpression;\n            extra.parseNewExpression = parseNewExpression;\n            extra.parseNonComputedProperty = parseNonComputedProperty;\n            extra.parseObjectProperty = parseObjectProperty;\n            extra.parseObjectPropertyKey = parseObjectPropertyKey;\n            extra.parsePostfixExpression = parsePostfixExpression;\n            extra.parsePrimaryExpression = parsePrimaryExpression;\n            extra.parseProgram = parseProgram;\n            extra.parsePropertyFunction = parsePropertyFunction;\n            extra.parseRelationalExpression = parseRelationalExpression;\n            extra.parseStatement = parseStatement;\n            extra.parseShiftExpression = parseShiftExpression;\n            extra.parseSwitchCase = parseSwitchCase;\n            extra.parseUnaryExpression = parseUnaryExpression;\n            extra.parseVariableDeclaration = parseVariableDeclaration;\n            extra.parseVariableIdentifier = parseVariableIdentifier;\n\n            parseAdditiveExpression = wrapTracking(extra.parseAdditiveExpression);\n            parseAssignmentExpression = wrapTracking(extra.parseAssignmentExpression);\n            parseBitwiseANDExpression = wrapTracking(extra.parseBitwiseANDExpression);\n            parseBitwiseORExpression = wrapTracking(extra.parseBitwiseORExpression);\n            parseBitwiseXORExpression = wrapTracking(extra.parseBitwiseXORExpression);\n            parseBlock = wrapTracking(extra.parseBlock);\n            parseFunctionSourceElements = wrapTracking(extra.parseFunctionSourceElements);\n            parseCatchClause = wrapTracking(extra.parseCatchClause);\n            parseComputedMember = wrapTracking(extra.parseComputedMember);\n            parseConditionalExpression = wrapTracking(extra.parseConditionalExpression);\n            parseConstLetDeclaration = wrapTracking(extra.parseConstLetDeclaration);\n            parseEqualityExpression = wrapTracking(extra.parseEqualityExpression);\n            parseExpression = wrapTracking(extra.parseExpression);\n            parseForVariableDeclaration = wrapTracking(extra.parseForVariableDeclaration);\n            parseFunctionDeclaration = wrapTracking(extra.parseFunctionDeclaration);\n            parseFunctionExpression = wrapTracking(extra.parseFunctionExpression);\n            parseLeftHandSideExpression = wrapTracking(parseLeftHandSideExpression);\n            parseLogicalANDExpression = wrapTracking(extra.parseLogicalANDExpression);\n            parseLogicalORExpression = wrapTracking(extra.parseLogicalORExpression);\n            parseMultiplicativeExpression = wrapTracking(extra.parseMultiplicativeExpression);\n            parseNewExpression = wrapTracking(extra.parseNewExpression);\n            parseNonComputedProperty = wrapTracking(extra.parseNonComputedProperty);\n            parseObjectProperty = wrapTracking(extra.parseObjectProperty);\n            parseObjectPropertyKey = wrapTracking(extra.parseObjectPropertyKey);\n            parsePostfixExpression = wrapTracking(extra.parsePostfixExpression);\n            parsePrimaryExpression = wrapTracking(extra.parsePrimaryExpression);\n            parseProgram = wrapTracking(extra.parseProgram);\n            parsePropertyFunction = wrapTracking(extra.parsePropertyFunction);\n            parseRelationalExpression = wrapTracking(extra.parseRelationalExpression);\n            parseStatement = wrapTracking(extra.parseStatement);\n            parseShiftExpression = wrapTracking(extra.parseShiftExpression);\n            parseSwitchCase = wrapTracking(extra.parseSwitchCase);\n            parseUnaryExpression = wrapTracking(extra.parseUnaryExpression);\n            parseVariableDeclaration = wrapTracking(extra.parseVariableDeclaration);\n            parseVariableIdentifier = wrapTracking(extra.parseVariableIdentifier);\n        }\n\n        if (typeof extra.tokens !== 'undefined') {\n            extra.advance = advance;\n            extra.scanRegExp = scanRegExp;\n\n            advance = collectToken;\n            scanRegExp = collectRegex;\n        }\n    }\n\n    function unpatch() {\n        if (typeof extra.skipComment === 'function') {\n            skipComment = extra.skipComment;\n        }\n\n        if (extra.raw) {\n            createLiteral = extra.createLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n            parseAdditiveExpression = extra.parseAdditiveExpression;\n            parseAssignmentExpression = extra.parseAssignmentExpression;\n            parseBitwiseANDExpression = extra.parseBitwiseANDExpression;\n            parseBitwiseORExpression = extra.parseBitwiseORExpression;\n            parseBitwiseXORExpression = extra.parseBitwiseXORExpression;\n            parseBlock = extra.parseBlock;\n            parseFunctionSourceElements = extra.parseFunctionSourceElements;\n            parseCatchClause = extra.parseCatchClause;\n            parseComputedMember = extra.parseComputedMember;\n            parseConditionalExpression = extra.parseConditionalExpression;\n            parseConstLetDeclaration = extra.parseConstLetDeclaration;\n            parseEqualityExpression = extra.parseEqualityExpression;\n            parseExpression = extra.parseExpression;\n            parseForVariableDeclaration = extra.parseForVariableDeclaration;\n            parseFunctionDeclaration = extra.parseFunctionDeclaration;\n            parseFunctionExpression = extra.parseFunctionExpression;\n            parseGroupExpression = extra.parseGroupExpression;\n            parseLeftHandSideExpression = extra.parseLeftHandSideExpression;\n            parseLeftHandSideExpressionAllowCall = extra.parseLeftHandSideExpressionAllowCall;\n            parseLogicalANDExpression = extra.parseLogicalANDExpression;\n            parseLogicalORExpression = extra.parseLogicalORExpression;\n            parseMultiplicativeExpression = extra.parseMultiplicativeExpression;\n            parseNewExpression = extra.parseNewExpression;\n            parseNonComputedProperty = extra.parseNonComputedProperty;\n            parseObjectProperty = extra.parseObjectProperty;\n            parseObjectPropertyKey = extra.parseObjectPropertyKey;\n            parsePrimaryExpression = extra.parsePrimaryExpression;\n            parsePostfixExpression = extra.parsePostfixExpression;\n            parseProgram = extra.parseProgram;\n            parsePropertyFunction = extra.parsePropertyFunction;\n            parseRelationalExpression = extra.parseRelationalExpression;\n            parseStatement = extra.parseStatement;\n            parseShiftExpression = extra.parseShiftExpression;\n            parseSwitchCase = extra.parseSwitchCase;\n            parseUnaryExpression = extra.parseUnaryExpression;\n            parseVariableDeclaration = extra.parseVariableDeclaration;\n            parseVariableIdentifier = extra.parseVariableIdentifier;\n        }\n\n        if (typeof extra.scanRegExp === 'function') {\n            advance = extra.advance;\n            scanRegExp = extra.scanRegExp;\n        }\n    }\n\n    function stringToArray(str) {\n        var length = str.length,\n            result = [],\n            i;\n        for (i = 0; i < length; ++i) {\n            result[i] = str.charAt(i);\n        }\n        return result;\n    }\n\n    function parse(code, options) {\n        var program, toString;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        buffer = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false\n        };\n\n        extra = {};\n        if (typeof options !== 'undefined') {\n            extra.range = (typeof options.range === 'boolean') && options.range;\n            extra.loc = (typeof options.loc === 'boolean') && options.loc;\n            extra.raw = (typeof options.raw === 'boolean') && options.raw;\n            if (typeof options.tokens === 'boolean' && options.tokens) {\n                extra.tokens = [];\n            }\n            if (typeof options.comment === 'boolean' && options.comment) {\n                extra.comments = [];\n            }\n            if (typeof options.tolerant === 'boolean' && options.tolerant) {\n                extra.errors = [];\n            }\n        }\n\n        if (length > 0) {\n            if (typeof source[0] === 'undefined') {\n                // Try first to convert to a string. This is good as fast path\n                // for old IE which understands string indexing for string\n                // literals only and not for string object.\n                if (code instanceof String) {\n                    source = code.valueOf();\n                }\n\n                // Force accessing the characters via an array.\n                if (typeof source[0] === 'undefined') {\n                    source = stringToArray(code);\n                }\n            }\n        }\n\n        patch();\n        try {\n            program = parseProgram();\n            if (typeof extra.comments !== 'undefined') {\n                filterCommentLocation();\n                program.comments = extra.comments;\n            }\n            if (typeof extra.tokens !== 'undefined') {\n                filterTokenLocation();\n                program.tokens = extra.tokens;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                program.errors = extra.errors;\n            }\n            if (extra.range || extra.loc) {\n                program.body = filterGroup(program.body);\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            unpatch();\n            extra = {};\n        }\n\n        return program;\n    }\n\n    // Sync with package.json.\n    exports.version = '1.0.4';\n\n    exports.parse = parse;\n\n    // Deep copy.\n    exports.Syntax = (function () {\n        var name, types = {};\n\n        if (typeof Object.create === 'function') {\n            types = Object.create(null);\n        }\n\n        for (name in Syntax) {\n            if (Syntax.hasOwnProperty(name)) {\n                types[name] = Syntax[name];\n            }\n        }\n\n        if (typeof Object.freeze === 'function') {\n            Object.freeze(types);\n        }\n\n        return types;\n    }());\n\n}));\n/* vim: set sw=4 ts=4 et tw=80 : */\n"]}